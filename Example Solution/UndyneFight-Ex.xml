<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UndyneFight-Ex</name>
    </assembly>
    <members>
        <member name="T:UndyneFight_Ex.ChampionShips.ChampionShip">
            <summary>
            A championship class
            </summary>
            <param name="fightSet"></param>
        </member>
        <member name="M:UndyneFight_Ex.ChampionShips.ChampionShip.#ctor(UndyneFight_Ex.SongSet)">
            <summary>
            A championship class
            </summary>
            <param name="fightSet"></param>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.Fights">
            <summary>
            The list of fights of the championship
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.Title">
            <summary>
            The title of the championship
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.SubTitle">
            <summary>
            The subtitle of the championship (Usually used as the duration of the championship)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.EditorName">
            <summary>
            The host of the championship (Useless for now)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.Introduce">
            <summary>
            The description of the championship
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.IconPath">
            <summary>
            The path to the icon of the championship
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.DivisionExist">
            <summary>
            List of available divisions of the championship
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.ChampionShips.ChampionShip.ChampionShipStates">
            <summary>
            The state of the championship
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.ChampionShips.ChampionShip.ChampionShipStates.NotStart">
            <summary>
            The championship has not yet begun
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.ChampionShips.ChampionShip.ChampionShipStates.Starting">
            <summary>
            The championship is occurring
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.ChampionShips.ChampionShip.ChampionShipStates.NotAvailable">
            <summary>
            The championship is not available
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.ChampionShips.ChampionShip.ChampionShipStates.End">
            <summary>
            The championship ended
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.CheckTime">
            <summary>
            The function to check for time (Returns <see cref="T:UndyneFight_Ex.ChampionShips.ChampionShip.ChampionShipStates"/>)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.Start">
            <summary>
            The starting time of the championship
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.ChampionShips.ChampionShip.End">
            <summary>
            The ending time of the championship
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.ChampionShips.ChampionShip.ToInfo">
            <summary>
            Converts the championship to info
            </summary>
            <returns></returns>
        </member>
        <member name="P:UndyneFight_Ex.Fight.ClassicFight.RoundType">
            <summary>
            当前回合属于玩家还是属于敌人, false->敌人, true->玩家
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.ClassicFight.InterActive.NoDamageMessage">
            <summary>
            没有对敌人造成伤害产生的信息
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.ClassicFight.InterActive.MainMessageAttributes">
            <summary>
            主信息的效果增加
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.ClassicFight.InterActive.MainMessage">
            <summary>
            当玩家在菜单栏选择的时候框内的信息。请最好先填写MainMessageAttributes项，否则有一定可能会出现错误。
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.ClassicFight.InterActive.AttackAnimation">
            <summary>
            攻击动效。传递一个类型反射
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.ClassicFight.InterActive.EventAfterAction">
            <summary>
            完成所有选项选择和选项选择后事件 即将进入敌人回合时 所发生的事件
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.ClassicFight.InterActive.DamageMessageColor">
            <summary>
            敌人被击中时，显示伤害的颜色
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.ClassicFight.InterActive.UIAlpha">
            <summary>
            UI界面的alpha值。血条不考虑在内。
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.FightStates.roundType">
            <summary>
            当前回合属于玩家还是属于敌人, false->敌人, true->玩家
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.FightStates.finishSelecting">
            <summary>
            是否完成选项。特别地，当它为true的时候心会自动隐藏
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.FightStates.firstDecision">
            <summary>
            在fight, act, item, mecry中的选择
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.FightStates.attackDelay">
            <summary>
            在fight, act, item, mecry中的选择
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.FightStates.actionDelay">
            <summary>
            在fight, act, item, mecry中的选择
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextAttribute">
            <summary>
            The base class for text attributes, contains
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextAction">
            <summary>
            Invokes an action when the text reaches this point
            </summary>
            <param name="act">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextAction.#ctor(System.Action)">
            <summary>
            Invokes an action when the text reaches this point
            </summary>
            <param name="act">The action to invoke</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextMoveAttribute">
            <summary>
            Moves the text(s) using provided function
            </summary>
            <param name="act">The easing function</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextMoveAttribute.#ctor(System.Func{System.Single,Microsoft.Xna.Framework.Vector2})">
            <summary>
            Moves the text(s) using provided function
            </summary>
            <param name="act">The easing function</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextSizeAttribute">
            <summary>
            Scales the text(s) by the given scale
            </summary>
            <param name="scale">The scale of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextSizeAttribute.#ctor(System.Single)">
            <summary>
            Scales the text(s) by the given scale
            </summary>
            <param name="scale">The scale of the text</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextSpeedAttribute">
            <summary>
            Changes the speed of the typing
            </summary>
            <param name="speed">The speed to change to (Default 20)</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextSpeedAttribute.#ctor(System.Single)">
            <summary>
            Changes the speed of the typing
            </summary>
            <param name="speed">The speed to change to (Default 20)</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextTimeThreshold">
            <summary>
            Pauses the typer for the given duration of time
            </summary>
            <param name="time">The time to pause</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextTimeThreshold.#ctor(System.Single)">
            <summary>
            Pauses the typer for the given duration of time
            </summary>
            <param name="time">The time to pause</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextGleamAttribute">
            <summary>
            Toggles the bloom effect of the text
            </summary>
            <param name="enabled">Whether to enable bloom or not</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextGleamAttribute.#ctor(System.Boolean)">
            <summary>
            Toggles the bloom effect of the text
            </summary>
            <param name="enabled">Whether to enable bloom or not</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextColorAttribute">
            <summary>
            Sets the color of the text to the given color
            </summary>
            <param name="color">The color to set to</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextColorAttribute.#ctor(Microsoft.Xna.Framework.Color)">
            <summary>
            Sets the color of the text to the given color
            </summary>
            <param name="color">The color to set to</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextFadeoutAttribute">
            <summary>
            Fades the text after a time delay in the given duration
            </summary>
            <param name="delay">The delay before the text fades</param>
            <param name="duration">The duration of the fading</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextFadeoutAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Fades the text after a time delay in the given duration
            </summary>
            <param name="delay">The delay before the text fades</param>
            <param name="duration">The duration of the fading</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.AttributeSet">
            <summary>
            A <see cref="T:UndyneFight_Ex.Fight.TextAttribute"/> that combines several <see cref="T:UndyneFight_Ex.Fight.TextAttribute"/>s, you can use this to avoid using multiple $
            </summary>
            <param name="textAttributes">The <see cref="T:UndyneFight_Ex.Fight.TextAttribute"/>s to combine</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.AttributeSet.#ctor(UndyneFight_Ex.Fight.TextAttribute[])">
            <summary>
            A <see cref="T:UndyneFight_Ex.Fight.TextAttribute"/> that combines several <see cref="T:UndyneFight_Ex.Fight.TextAttribute"/>s, you can use this to avoid using multiple $
            </summary>
            <param name="textAttributes">The <see cref="T:UndyneFight_Ex.Fight.TextAttribute"/>s to combine</param>
        </member>
        <member name="F:UndyneFight_Ex.Fight.PrintingSettings.renderFont">
            <summary>
            The font for the text (Default <see cref="P:UndyneFight_Ex.FightResources.Font.NormalFont"/>)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.PrintingSettings.printSound">
            <summary>
            The printing sound of the typer (Default <see cref="F:UndyneFight_Ex.FightResources.Sounds.printWord"/>)
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.TextPrinter">
            <summary>
            The text typing entity
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextPrinter.InstantEnd">
            <summary>
            Instantly ends the text typer
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.TextPrinter.AllShowed">
            <summary>
            Whether the text typer has displayed all it's text
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.TextPrinter.PlaySound">
            <summary>
            Whether the text typer plays the typing text
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.TextPrinter.LinesDistance">
            <summary>
            The distance between the lines for each line break (Default 40 pixels)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.TextPrinter.CentreDraw">
            <summary>
            Whether the texts are alligned to the centre (WIP)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.TextPrinter.Position">
            <summary>
            The position of the text typer
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextPrinter.#ctor(System.Single,System.String,Microsoft.Xna.Framework.Vector2,UndyneFight_Ex.Fight.TextAttribute[])">
            <summary>
            Creates a text printer with a given duration
            </summary>
            <param name="forceTime">The time before the text typer disposes</param>
            <param name="text">The text to draw</param>
            <param name="position">The position of the text typer</param>
            <param name="textAttributes">The attributes of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextPrinter.#ctor(System.Single,System.String,UndyneFight_Ex.Fight.TextAttribute[])">
            <summary>
            Creates a text printer with a given duration
            </summary>
            <param name="forceTime">The time before the text typer disposes</param>
            <param name="text">The text to draw</param>
            <param name="textAttributes">The attributes of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextPrinter.#ctor(System.String,Microsoft.Xna.Framework.Vector2,UndyneFight_Ex.Fight.TextAttribute[])">
            <summary>
            Creates a text typer
            </summary>
            <param name="text">The text to draw</param>
            <param name="position">The position of the text typer</param>
            <param name="textAttributes">The attributes of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.TextPrinter.#ctor(System.String,UndyneFight_Ex.Fight.TextAttribute[])">
            <summary>
            Creates a text typer
            </summary>
            <param name="text">The text to draw</param>
            <param name="textAttributes">The attributes of the text</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.AdvanceFunctions">
            <summary>
            More advance functions for scoring
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.AdvanceFunctions.Interactive">
            <summary>
            Score events
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.AdvanceFunctions.Interactive.AddMissEvent(System.Action)">
            <summary>
            Adds an event to be executed when a Miss was gained by the player
            </summary>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.AdvanceFunctions.Interactive.AddOkayEvent(System.Action)">
            <summary>
            Adds an event to be executed when a Okay was gained by the player
            </summary>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.AdvanceFunctions.Interactive.AddNiceEvent(System.Action)">
            <summary>
            Adds an event to be executed when a Nice was gained by the player
            </summary>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.AdvanceFunctions.Interactive.AddPerfectEvent(System.Action)">
            <summary>
            Adds an event to be executed when a Perfect was gained by the player
            </summary>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.AdvanceFunctions.Interactive.AddEndEvent(System.Action)">
            <summary>
            Adds an event to be executed when the chart ends
            </summary>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.AdvanceFunctions.Cos01(System.Single)">
            <summary>
            The same as cos(<paramref name="v"/> * PI), cos(0) = cos(1) = 0, cos(0.5) = 1
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.AdvanceFunctions.Sin01(System.Single)">
            <summary>
            The same as sin(<paramref name="v"/> * PI), sin(0) = sin(1) = 0, sin(0.5) = 1
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.AdvanceFunctions.PushScore(System.Int32)">
            <summary>
            Adds a score type, generally used in <see cref="T:UndyneFight_Ex.Entities.ICollideAble"/> for score check
            </summary>
            <param name="score">0-> Miss, 1-> Okay, 2-> Nice, 3-> Perfect</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions">
            <summary>
            General charting functions
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.HeartAttribute">
            <summary>
            Use this static class to access some attributes of the Heart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.SoftFalling">
            <summary>
            Sets whether the blue soul will have a softer falling (Smoother but longer)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.ArrowFixed">
            <summary>
            Determine whether the arrows rotate along the soul
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.IsFullHP">
            <summary>
            Is the player at full HP
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.DamageTaken">
            <summary>
            Damage taken by the player per hit
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.BuffedLevel">
            <summary>
            Level of HP drain of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.PurpleLineCount">
            <summary>
            The amount of purple lines in purple soul mode
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.Gravity">
            <summary>
            Gravity of the blue soul (Default 9.8f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.JumpSpeed">
            <summary>
            Initial jump speed of blue soul (Default 6)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.JumpTimeLimit">
            <summary>
            Amount of times a player can jump (Default 2)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.KR">
            <summary>
            Whether to enable KR
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.KRDamage">
            <summary>
            The damage the KR deals (Default 4)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.Speed">
            <summary>
            Speed of the player (Default 2.5f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.MaxHP">
            <summary>
            The max HP of the player (Also automatically sets the current HP of the player)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.InvincibleToPhysics">
            <summary>
            Whether the player is immune to physical damage
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.HP">
            <summary>
            The current HP of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.KRHP">
            <summary>
            The current KR of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.UmbrellaAvailable">
            <summary>
            Whether the blue soul can descend slower by holding spacebar (Default false)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.UmbrellaSpeed">
            <summary>
            The falling speed of the player when descending using umbrella (Default 2/3f)
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.BoxStates">
            <summary>
            Use this static class to access variables of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.CurrentBox">
            <summary>
            The current box you are controlling
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.CurrentRectBox">
            <summary>
            The current rectangle box you are controlling
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.Left">
            <summary>
            The x coordinate of the left side of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.Right">
            <summary>
            The x coordinate of the right side of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.Up">
            <summary>
            The y coordinate of the upper side of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.Down">
            <summary>
            The y coordinate of the lower side of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.Centre">
            <summary>
            The center of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.Width">
            <summary>
            The width of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.Height">
            <summary>
            The height of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.BoxStates.BoxMovingScale">
            <summary>
            Lerp value of box movement, range is [0, 1]
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.Loader">
            <summary>
            The content loader, you can use this to load dynamic assets
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.SongIllustration">
            <summary>
            The cover of the current chart (If any)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.AutoEnd">
            <summary>
            Whether the chart automatically switch to the result screen after ending
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.PlayOffset">
            <summary>
            When the song will begin playing (If the value is negative, <see cref="P:UndyneFight_Ex.SongSystem.SongInformation.MusicOptimized"/> MUST be false)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.GametimeDelta">
            <summary>
            Gametime displacement of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.Gametime">
            <summary>
            Frames elapsed in integers (Readonly, Not recommended to use)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.GametimeF">
            <summary>
            Frames elapsed in float (Recommended)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.CurrentDifficulty">
            <summary>
            The current difficulty of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.Heart">
            <summary>
            The soul you are currently controlling
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.PlayerInstance">
            <summary>
            The player you are currently controlling
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetPlayerMission(System.Int32)">
            <summary>
            Sets which player you are currently controlling
            </summary>
            <param name="val">The ID of the player (Default 0)</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetPlayerMission(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Sets which player you are currently controlling
            </summary>
            <param name="p">The player to control</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetPlayerBoxMission(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Sets which player and box you are currently controlling
            </summary>
            <param name="p">The player to control</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetPlayerBoxMission(System.Int32)">
            <summary>
            Sets which player and box you are currently controlling
            </summary>
            <param name="val">The ID of the player and box</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetBoxMission(System.Int32)">
            <summary>
            Sets which box you are currently controlling
            </summary>
            <param name="val">The ID of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetBoxMission(UndyneFight_Ex.Entities.FightBox)">
            <summary>
            Sets the box you are currently controlling
            </summary>
            <param name="box">The ID of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.TP(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves the player to the target location
            </summary>
            <param name="vect">The target position</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.TP(System.Single,System.Single)">
            <summary>
            Moves the player to the target position
            </summary>
            <param name="x">The x-coordinate to teleport to</param>
            <param name="y">The y-coordinate to teleport to</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.InstantTP(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves the player to the target position
            </summary>
            <param name="vec">The vector location to teleport the box to</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.InstantTP(System.Single,System.Single)">
            <summary>
            Moves the player to the target position
            </summary>
            <param name="x">The x-coordinate to teleport to</param>
            <param name="y">The y-coordinate to teleport to</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Regenerate(System.Int32)">
            <summary>
            Recovers HP
            </summary>
            <param name="HP">The amount of HP to recover</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Regenerate">
            <summary>
            Recovers full HP
            </summary>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.LoseHP(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Reduces HP from the given heart
            </summary>
            <param name="heart">The heart to apply the damage to (For particle effect)</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.GiveKR(System.Single)">
            <summary>
            Applies KR damage to the player
            </summary>
            <param name="scale">The scale of the KR damage (X times <see cref="P:UndyneFight_Ex.Fight.Functions.HeartAttribute.KRDamage"/>)</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.GetAll``1(System.String)">
            <summary>
            Gets all the objects of the given type with the given tag
            </summary>
            <typeparam name="T">The type to check</typeparam>
            <param name="tag">The tag to contain</param>
            <returns>The array of objects of the type <typeparamref name="T"/> that contains the <paramref name="tag"/></returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.GetAll``1">
            <summary>
            Gets all the objects of the given type
            </summary>
            <typeparam name="T">The type to check</typeparam>
            <returns>The array of objects of the type <typeparamref name="T"/></returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetSoul(System.Int32,System.Boolean)">
            <summary>
            Change the soul state
            </summary>
            <param name="type">0: Red, 1: Green, 2: Blue, 3: Orange, 4: Purple, 5: Gray</param>
            <param name="resetGravSpd">Whether the gravity speed will be reset to 0 to prevent bugs (Default false)</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetSoul(UndyneFight_Ex.Entities.Player.MoveState)">
            <summary>
            Change the soul state of the player
            </summary> 
            <param name="state">The moving state of the player (Mostly for custom souls)</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ArrowAttribute">
            <summary>
            Attributes of an arrow
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.None">
            <summary>
            Normal arrow
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.SpeedUp">
            <summary>
            Speeds up mid-way
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.RotateR">
            <summary>
            Rotates clockwise during movement
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.RotateL">
            <summary>
            Rotates counterclockwise during movement
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.Hold">
            <summary>
            Hold arrow judgement
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.Tap">
            <summary>
            Tap arrow judgement
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.Void">
            <summary>
            Void arrow drawing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.NoScore">
            <summary>
            No score given
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.ForceGreen">
            <summary>
            Force display as green arrow
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.NoGoldTag">
            <summary>
            No golden tag when drawn
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreateArrow(System.Single,System.Int32,System.Single,System.Int32,System.Int32,UndyneFight_Ex.Fight.Functions.ArrowAttribute)">
            <summary>
            Creates an arrow
            </summary>
            <param name="shootShieldTime">Time taken to reach the shield</param>
            <param name="way">Direction of arrow, 0-> Right, 1-> Down, 2-> Left, 3-> Up</param>
            <param name="speed">Speed of arrow</param>
            <param name="color">Color of arrow, 0-> Blue, 1-> Red</param>
            <param name="rotatingType">Rotation Type, 0-> None, 1-> Reverse, 2-> Diagonal</param>
            <param name="attribute">Arrow attributes (Default <see cref="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.None"/>)</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.MakeArrow(System.Single,System.Int32,System.Single,System.Int32,System.Int32,UndyneFight_Ex.Fight.Functions.ArrowAttribute)">
            <summary>
            Creates an arrow type but DOES NOT create it to the current game
            </summary>
            <param name="shootShieldTime">Time taken to reach the shield</param>
            <param name="way">Direction of arrow, 0-> Right, 1-> Down, 2-> Left, 3-> Up</param>
            <param name="speed">Speed of arrow</param>
            <param name="color">Color of arrow, 0-> Blue, 1-> Red</param>
            <param name="rotatingType">Rotation Type, 0-> None, 1-> Reverse, 2-> Diagonal</param>
            <param name="attribute">Arrow attributes (Default <see cref="F:UndyneFight_Ex.Fight.Functions.ArrowAttribute.None"/>)</param>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.DirectionAllocate">
            <summary>
            The allocated direction for arrows, use 'A' to access
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.MakeArrow(System.Single,System.String,System.Single,System.Int32,System.Int32,UndyneFight_Ex.Fight.Functions.ArrowAttribute)">
            <summary>
            Creates an arrow with a string as it's tag
            </summary>
            <param name="shootShieldTime">Time taken to reach the shield</param>
            <param name="wayTag">String tag of the way of the arrow</param>
            <param name="speed">Moving speed of the arrow</param>
            <param name="color">The color of the arrow, 0: Blue, 1: Red, 2: Green, 3: Purple</param>
            <param name="rotatingType">Rotation mode, 0: Normal, 1: Reverse, 2: Diagonal</param>
            <param name="arrowattribute">The arrow attribute of the arrow (Default none), use <see cref="T:UndyneFight_Ex.Fight.Functions.ArrowAttribute"/>, to combine multiple, use 'attr1 | attr2'</param>
            <returns>The created <see cref="T:UndyneFight_Ex.Entities.Arrow"/></returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreateArrow(System.Single,System.String,System.Single,System.Int32,System.Int32,UndyneFight_Ex.Fight.Functions.ArrowAttribute)">
            <summary>
            Creates an arrow with a string as it's tag
            </summary>
            <param name="shootShieldTime">Time taken to reach the shield</param>
            <param name="wayTag">String tag of the way of the arrow</param>
            <param name="speed">Moving speed of the arrow</param>
            <param name="color">The color of the arrow, 0: Blue, 1: Red, 2: Green, 3: Purple</param>
            <param name="rotatingType">Rotation mode, 0: Normal, 1: Reverse, 2: Diagonal</param>
            <param name="attribute">The arrow attribute of the arrow (Default none), use <see cref="T:UndyneFight_Ex.Fight.Functions.ArrowAttribute"/>, to combine multiple, use 'attr1 | attr2'</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreateSpear(UndyneFight_Ex.Entities.Spear)">
            <summary>
            Create a spear
            </summary>
            <param name="spear">The spear to create</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreateBone(UndyneFight_Ex.Entities.Bone)">
            <summary>
            Create a bone
            </summary>
            <param name="bone">The bone to create</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreateGB(UndyneFight_Ex.Entities.GasterBlaster)">
            <summary>
            Create a blaster
            </summary>
            <param name="gb">The blaster to create</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreatePlatform(UndyneFight_Ex.Entities.Platform)">
            <summary>
            Create a platform
            </summary>
            <param name="plt">The platform to create</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreateEntity(UndyneFight_Ex.Entity)">
            <summary>
            Create an <see cref="T:UndyneFight_Ex.Entity"/>
            </summary>
            <param name="et">The entity to create</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreateEntity(UndyneFight_Ex.Entity[])">
            <summary>
            Create multiple <see cref="T:UndyneFight_Ex.Entity"/>
            </summary>
            <param name="et">The entities to create</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.AddInstance(UndyneFight_Ex.GameObject)">
            <summary>
            Create an instance of <see cref="T:UndyneFight_Ex.GameObject"/>
            </summary>
            <param name="go">The object to create</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.AddInstances(UndyneFight_Ex.GameObject[])">
            <summary>
            Create instances of <see cref="T:UndyneFight_Ex.GameObject"/>
            </summary>
            <param name="go">The objects to create</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ArrowApply(System.String,System.Action{UndyneFight_Ex.Entities.Arrow})">
            <summary>
            Applies behavior to all arrows marked with the tag with the given <see cref="T:System.Action"/>
            </summary>
            <param name="tag">The tag of the arrows to apply to</param>
            <param name="action">The action applied to the arrows</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetBox(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Lerps the position of the box to the given location
            </summary>
            <param name="x1">x-coordinate of the left side of the box</param>
            <param name="x2">x-coordinate of the right side of the box</param>
            <param name="y1">y-coordinate of the top side of the box</param>
            <param name="y2">y-coordinate of the bottom side of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetBox(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Lerps the position of the box to the given location
            </summary>
            <param name="centre">The centre of the box to move to</param>
            <param name="width">The width of the box</param>
            <param name="height">The height of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetBox(System.Single,System.Single,System.Single)">
            <summary>
            Lerps the position of the box to the given location (X is forced to be 320)
            </summary>
            <param name="YCentre">The y-coordinate of the box to move to</param>
            <param name="width">The width of the box</param>
            <param name="height">The height of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.InstantSetBox(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Sets the position of the box instantly
            </summary>
            <param name="centre">The centre of the box to move to</param>
            <param name="width">The width of the box</param>
            <param name="height">The height of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.InstantSetBox(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the position of the box instantly
            </summary>
            <param name="x1">x-coordinate of the left side of the box</param>
            <param name="x2">x-coordinate of the right side of the box</param>
            <param name="y1">y-coordinate of the top side of the box</param>
            <param name="y2">y-coordinate of the bottom side of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.InstantSetBox(System.Single,System.Single,System.Single)">
            <summary>
            Sets the position of the box instantly
            </summary>
            <param name="YCentre">The y-coordinate of the box to move to</param>
            <param name="width">The width of the box</param>
            <param name="height">The height of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.SetGreenBox">
            <summary>
            Lerps the box to the position and size for green soul
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.InstantSetGreenBox">
            <summary>
            Sets the box to the position and size for green soul instantly
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Fortimes(System.Int32,System.Action)">
            <summary>
            Carry an action with the given times
            </summary>
            <param name="times">Times to invoke the action with</param>
            <param name="action">The <see cref="T:System.Action"/> to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Fortimes(System.Int32,System.Action{System.Int32})">
            <summary>
            Carry an action with the given times
            </summary>
            <param name="times">Times to invoke the action with</param>
            <param name="action">The <see cref="T:System.Action"/> to invoke, with an integer parameter</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Rand(System.Int32,System.Int32)">
            <summary>
            Creates a random integer
            </summary>
            <param name="s">The lower bound of the integer</param>
            <param name="e">The upper bound of the integer</param>
            <returns>The random integer</returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Rand(System.Single,System.Single)">
            <summary>
            Creates a random <see cref="T:System.Single"/>
            </summary>
            <param name="s">The lower bound of the float</param>
            <param name="e">The upper bound of the float</param>
            <returns>The random float</returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.RandSignal">
            <summary>
            Gets a random sign
            </summary>
            <returns>1 or -1</returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.RandBool">
            <summary>
            Returns a random boolean
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Tan(System.Single)">
            <summary>
            Returns the tangent of the specified angle in degrees
            </summary>
            <param name="rot">The angle (In degrees)</param>
            <returns>The tangent value</returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Cos(System.Single)">
            <summary>
            Returns the cosine of the specified angles in degrees
            </summary>
            <param name="rot">The angle (In degrees)</param>
            <returns>The cosine value, range: [-1, 1] and <see cref="F:System.Single.NaN"/></returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Sin(System.Single)">
            <summary>
            Returns the sine value of the angle in degrees
            </summary>
            <param name="rot">The angle in degrees</param>
            <returns>The sin value, range: [-1, 1] and <see cref="F:System.Single.NaN"/></returns>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.LastRand">
            <summary>
            The last random integer generated
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.LastRandFloat">
            <summary>
            The last random float generated
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,System.Single)">
            <summary>
            Play a sound effect, you should play multiple sounds for volume that is larger than 1
            </summary>
            <param name="effect">The sfx to play</param>
            <param name="soundVolume">The volume of the sound, range: [0, 1]</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect[])">
            <summary>
            Play multiple sound effects
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.BlackScreen(System.Single)">
            <summary>
            Creates a black screen
            </summary>
            <param name="time">The duration of the black screen</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ResetBarrage">
            <summary>
            Kills all barrages on screen (Does not invoke their .Dispose() event)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.EndSong">
            <summary>
            End the current song
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreateHeart(UndyneFight_Ex.CollideRect)">
            <summary>
            Creates a heart with the new box in the given position
            </summary>
            <param name="startingBoxPos">The position of the box of the new heart to create</param>
            <returns>The created heart</returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.CreateHeart(System.Single,System.Single,System.Single)">
            <summary>
            Creates a heart with the new box in the given position
            </summary>
            <param name="yCentre">THe y-coordinate of the box to create</param>
            <param name="width">The width of the box to create</param>
            <param name="height">The height of the box to create</param>
            <returns>The created heart</returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.Reset">
            <summary>
            Resets charting data
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing">
            <summary>
            Functions related to drawing
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CustomSurface">
            <summary>
            A class for creating custom surfaces
            </summary>
            <param name="surf">The surface to draw</param>
            <param name="depth">The depth of the surface</param>
            <param name="blendState">The blend state of the surface (Default <see cref="F:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlend"/>)</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CustomSurface.#ctor(UndyneFight_Ex.Surface,System.Single,Microsoft.Xna.Framework.Graphics.BlendState)">
            <summary>
            A class for creating custom surfaces
            </summary>
            <param name="surf">The surface to draw</param>
            <param name="depth">The depth of the surface</param>
            <param name="blendState">The blend state of the surface (Default <see cref="F:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlend"/>)</param>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CustomSurface.Position">
            <summary>
            The position of the surface
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CustomSurface.Blend">
            <summary>
            The blend of the surface
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CustomSurface.Surface">
            <summary>
            The surface of the custom surface rendering
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CustomSurface.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CustomSurface.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CreateCustomSurface(UndyneFight_Ex.Surface)">
            <summary>
            A method for creating custom surfaces
            </summary>
            <param name="surf">The surface to draw</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.RemoveCustomSurface(UndyneFight_Ex.Surface)">
            <summary>
            A method for removing custom surfaces
            </summary>
            <param name="surf">The surface to draw</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings">
            <summary>
            Variables related to UI
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings.NameShowerPos">
            <summary>
            Position of the Name display (Default (20, 457))
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings.HPShowerPos">
            <summary>
            Position of the HP display (Default (320, 443))
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings.UISurfaceDrawing">
            <summary>
            The render production for drawing the UI surface
            </summary>
            <param name="uiSurf">The UI surface</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings.UISurfaceDrawing.#ctor(UndyneFight_Ex.Surface)">
            <summary>
            The render production for drawing the UI surface
            </summary>
            <param name="uiSurf">The UI surface</param>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings.UISurfaceDrawing.UISurface">
            <summary>
            The UI surface
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings.UISurfaceDrawing.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings.CreateUISurface">
            <summary>
            Creates a separate surface for the UI, making the UI not affected by the screen effects
            </summary>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings.RemoveUISurface">
            <summary>
            Removes the surface created in <see cref="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UISettings.CreateUISurface"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.HPBar">
            <summary>
            Variables related to the HP Bar
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.HPBar.HPExistColor">
            <summary>
            The color of existing HP
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.HPBar.KRExistColor">
            <summary>
            The color of existing KR
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.HPBar.HPLoseColor">
            <summary>
            THe color of the HP Bar
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.HPBar.AreaOccupied">
            <summary>
            The rectangular area occupied by the HP bar
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.HPBar.Vertical">
            <summary>
            Sets whether the HP Bar is displayed vertically
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CameraEffect">
            <summary>
            Camera effect methods
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CameraEffect.Rotate180(System.Single)">
            <summary>
            Rotates the screen by 180 degrees in the given time
            </summary>
            <param name="time">The duration of the rotation</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CameraEffect.Rotate(System.Single,System.Single)">
            <summary>
            Rotate the camera by the given amount of degrees
            </summary>
            <param name="rotation">The angle to rotate for</param>
            <param name="time">The duration of the rotation</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Duration is less than 0</exception>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CameraEffect.RotateTo(System.Single,System.Single)">
            <summary>
            Rotates the screen angle to the given angle
            </summary>
            <param name="rotation">The angle to rotate to</param>
            <param name="time">The duration of the rotation</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CameraEffect.Convulse(System.Boolean)">
            <summary>
            Convulses the screen angle (16 degrees in 8 frames)
            </summary>  
            <param name="direction">Direction of convulsion, true means right and false means left</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CameraEffect.Convulse(System.Single,System.Boolean)">
            <summary>
            Convulses the screen angle (25 degrees)
            </summary> 
            <param name="time">The duration of the convulsion</param>
            <param name="direction">Direction of convulsion, true means right and false means left</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CameraEffect.Convulse(System.Single,System.Single,System.Boolean)">
            <summary>
            Convulses the screen angle
            </summary>
            <param name="intensity">Intensity of the convulsion</param>
            <param name="time">The duration of the convulsion</param>
            <param name="direction">Direction of convulsion, true means right and false means left</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CameraEffect.SizeExpand(System.Single,System.Single)">
            <summary>
            Expands the screen by the given size and then retracts to the original size
            </summary>
            <param name="intensity">The amount to expand</param>
            <param name="time">The duration of the expansion</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CameraEffect.SizeShrink(System.Single,System.Single)">
            <summary>
            Retracts the screen by the given size and then expands to the original size
            </summary>
            <param name="intensity">The amount to retract</param>
            <param name="time">The duration of the retraction</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.SceneOut(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Fades out with the given color
            </summary>
            <param name="col">The color to fade out</param>
            <param name="time">The duration of the fading</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.WhiteOut(System.Single)">
            <summary>
            Fades out in white
            </summary>
            <param name="time">The duration of the fading</param>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UIColor">
            <summary>
            The color of the UI
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.BoundColor">
            <summary>
            The color of the side bounds
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ThemeColor">
            <summary>
            The theme color of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.BoxBackColor">
            <summary>
            The background color of the box
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.MakeFlicker(Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a flicker of the screen
            </summary>
            <param name="color">The color of the flicker</param>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.DownBoundDistance">
            <summary>
            The distance of the lower bound
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.LeftBoundDistance">
            <summary>
            The distance of the leftward bound
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UpBoundDistance">
            <summary>
            The distance of the upper bound
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.RightBoundDistance">
            <summary>
            The distance of the rightward bound
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.BackGroundColor">
            <summary>
            The background color of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ScreenAngle">
            <summary>
            The rotation of the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ScreenPositionDelta">
            <summary>
            The displacement of the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ScreenScale">
            <summary>
            The scale of the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.SceneOutScale">
            <summary>
            The default fading speed of the color fading
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.MasterAlpha">
            <summary>
            The overall Alpha value of the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.SceneRendering">
            <summary>
            The main scene rendering manager
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.BackGroundRendering">
            <summary>
            The background scene rendering manager
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ScreenExtending">
            <summary>
            The distances of the screen bounds
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.UpExtending">
            <summary>
            The distance of the upwards bound
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.DownExtending">
            <summary>
            The distance of the downwards bound
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.SpriteBatch">
            <summary>
            The sprite batch to draw sprites
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ActivateShader(UndyneFight_Ex.Shader,System.Single)">
            <summary>
            Activates a shader effect on the foreground
            </summary>
            <param name="shader">The shader to activate</param>
            <param name="depth">The depth of the shader</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ActivateShaderBack(UndyneFight_Ex.Shader,System.Single)">
            <summary>
            Activates a shader effect in the background
            </summary>
            <param name="shader">The shader to activate</param>
            <param name="depth">The depth of the shader</param>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders">
            <summary>
            List of shaders that are built in to the engine, you will need to manually dispose them
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting">
            <summary>
            A bloom effect
            </summary>
            <param name="depth">The depth of the bloom effect</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.#ctor(System.Single)">
            <summary>
            A bloom effect
            </summary>
            <param name="depth">The depth of the bloom effect</param>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.LightMode">
            <summary>
            Available modes for blooming, see <see href="https://en.wikipedia.org/wiki/Blend_modes"/> for more information
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.LightMode.Limit">
            <summary>
            Liminal bloom
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.LightMode.Additive">
            <summary>
            Additive bloom
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.LightMode.ShaderMul">
            <summary>
            Blend multiplication bloom
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.LightingMode">
            <summary>
            The mode of the bloom
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.AmbientColor">
            <summary>
            The ambient color of the bloom
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.Light">
            <summary>
            The class for the bloom
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.Light.position">
            <summary>
            The position of the light
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.Light.scale">
            <summary>
            The scale of the light
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.Light.color">
            <summary>
            The color of the light
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.Light.size">
            <summary>
            The size of the bloom (will be multiplied to <see cref="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.Light.scale"/>)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Lighting.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting">
            <summary>
            A RGB splitting effect
            </summary>
            <param name="dep">The depth of the RGB splitting effect (Default 0.5f)</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.#ctor(System.Single)">
            <summary>
            A RGB splitting effect
            </summary>
            <param name="dep">The depth of the RGB splitting effect (Default 0.5f)</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.WindowSizeChanged(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.Intensity">
            <summary>
            The intensity of the effect
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.RandomDisturb">
            <summary>
            The range of the random disturbance of the RGB channel<br/>
            Make sure <see cref="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.Disturbance"/> is set to true
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.Disturbance">
            <summary>
            Whether to enable the disturbance or not
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.DisturbShader">
            <summary>
            The shader used for the disturbance effect (Default <see cref="P:UndyneFight_Ex.FightResources.Shaders.Sinwave"/>)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.SplitColor1">
            <summary>
            The first color of the color splitting (Default <see cref="P:Microsoft.Xna.Framework.Color.Red"/>)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.SplitColor2">
            <summary>
            The second color of the color splitting (Default <see cref="P:Microsoft.Xna.Framework.Color.Blue"/>)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.MainColor">
            <summary>
            The color drawn without the shader disturbance (Default <see cref="P:Microsoft.Xna.Framework.Color.Lime"/>)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.RGBSplitting.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Glitching">
            <summary>
            A glitching effect (Similar to BktGlitch in Game Maker, if you had used it)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Glitching.Intensity">
            <summary>
            The intensity of the glitching
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Glitching.AverageInterval">
            <summary>
            The average interval between each glitch in frames
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Glitching.AverageDelta">
            <summary>
            The average delta of the glitches
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Glitching.RGBSplitIntensity">
            <summary>
            The intensity of the RGB splitting when glitching
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Glitching.BlockScale">
            <summary>
            The scale of the glitched blocks
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Glitching.#ctor(System.Single)">
            <summary>
            Create the glitching effect
            </summary>
            <param name="dep">The depth of the effect</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Glitching.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Glitching.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Filter">
            <summary>
            Creates a filter for the <paramref name="shader"/>, commonly associated with <see cref="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ActivateShader(UndyneFight_Ex.Shader,System.Single)"/> and <see cref="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ActivateShaderBack(UndyneFight_Ex.Shader,System.Single)"/><br/>
            The filter effects uses the 3rd helper channel in the render pipeline
            </summary>
            <param name="shader">The shader to apply</param>
            <param name="dep">The depth of the effect</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Filter.#ctor(UndyneFight_Ex.Shader,System.Single)">
            <summary>
            Creates a filter for the <paramref name="shader"/>, commonly associated with <see cref="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ActivateShader(UndyneFight_Ex.Shader,System.Single)"/> and <see cref="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ActivateShaderBack(UndyneFight_Ex.Shader,System.Single)"/><br/>
            The filter effects uses the 3rd helper channel in the render pipeline
            </summary>
            <param name="shader">The shader to apply</param>
            <param name="dep">The depth of the effect</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Filter.WindowSizeChanged(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Filter.CurrentShader">
            <summary>
            The shader used in the filter
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Filter.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur">
            <summary>
            Creates a Gaussian Blur or Kawase Blur, depending on the user's Drawing Quality and <see cref="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.KawaseMode"/>
            </summary>
            <param name="dep">The depth of the blur</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.#ctor(System.Single)">
            <summary>
            Creates a Gaussian Blur or Kawase Blur, depending on the user's Drawing Quality and <see cref="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.KawaseMode"/>
            </summary>
            <param name="dep">The depth of the blur</param>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.WindowSizeChanged(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.BlurShader">
            <summary>
            The blur shader to use, default (<see cref="P:UndyneFight_Ex.FightResources.Shaders.Blur"/>)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.Sigma">
            <summary>
            The intensity of the blur
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.Glittering">
            <summary>
            Whether bloom will be enabled for the blurring
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.GlitterScale">
            <summary>
            The scale of the blooming
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.KawaseMode">
            <summary>
            Whether the blur will be a Kawase Blur, regardless of the user's drawing quality
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.Shaders.Blur.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Fight.Functions.ScreenDrawing.CreateParticles(Microsoft.Xna.Framework.Color,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Int32,System.Single)">
            <summary>
            Creates particles that explodes from the given location
            </summary>
            <param name="color">The color of the particles</param>
            <param name="speed">The average speed of the particles</param>
            <param name="size">The average size of the particles</param>
            <param name="centre">The centre of the particles to explode from</param>
            <param name="count">The amount of particles</param>
            <param name="darkingSpeed">The fading speed of the particles</param>
        </member>
        <member name="T:UndyneFight_Ex.Challenge">
            <summary>
            A list of charts that makes up a challenge
            </summary>
            <param name="iconPath">The path to the icon of the challenge</param>
            <param name="title">The title of the challenge</param>
            <param name="desc">The description of the challenge</param>
            <param name="routes">The list of charts of the challenge, with <see cref="T:System.Tuple`2"/> of [Chart class, Difficulty]</param>
        </member>
        <member name="M:UndyneFight_Ex.Challenge.#ctor(System.String,System.String,System.String,System.Tuple{System.Type,UndyneFight_Ex.SongSystem.Difficulty}[])">
            <summary>
            A list of charts that makes up a challenge
            </summary>
            <param name="iconPath">The path to the icon of the challenge</param>
            <param name="title">The title of the challenge</param>
            <param name="desc">The description of the challenge</param>
            <param name="routes">The list of charts of the challenge, with <see cref="T:System.Tuple`2"/> of [Chart class, Difficulty]</param>
        </member>
        <member name="F:UndyneFight_Ex.Challenge.IconPath">
            <summary>
            The string path to the icon of the challenge
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Challenge.Title">
            <summary>
            The title of the challenge
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Challenge.Desc">
            <summary>
            The description of the challenge
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Challenge.Routes">
            <summary>
            The <see cref="T:System.Tuple"/> list of charts of the challenge
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Challenge.ResultBuffer">
            <summary>
            The list of <see cref="T:UndyneFight_Ex.SongSystem.SongResult"/> of the charts
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Challenge.Reset">
            <summary>
            Resets the <see cref="P:UndyneFight_Ex.Challenge.ResultBuffer"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Audio">
            <summary>
            An audio
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Audio.IAudioSource.Start">
            <summary>
            Plays the audio
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Audio.IAudioSource.Stop">
            <summary>
            Stops the audio
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Audio.IAudioSource.GetDuration">
            <summary>
            Gets the duration of the audio
            </summary>
            <returns>The duration of the audio</returns>
        </member>
        <member name="P:UndyneFight_Ex.Audio.IAudioSource.IsEnd">
            <summary>
            Whether the audio has ended
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Audio.IAudioSource.OnPlay">
            <summary>
            Whether the audio is playing
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Audio.IAudioSource.Volume">
            <summary>
            The volume of the audio
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Audio.IAudioSource.Resume">
            <summary>
            Resume playing the audio
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Audio.IAudioSource.Pause">
            <summary>
            Pauses the playing audio
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Audio.Volume">
            <summary>
            The volume of the audio
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Audio.#ctor(System.String,Microsoft.Xna.Framework.Content.ContentManager,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Loads an audio to memory
            </summary>
            <param name="path">The path to the audio file directory</param>
            <param name="loader">The loader to use</param>
            <param name="startPos">The initial position to load (in milliseconds)</param>
            <param name="endPos">The ending position to load (in milliseconds)</param>
        </member>
        <member name="P:UndyneFight_Ex.Audio.OnPlay">
            <summary>
            Whether the audio had just started to play
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Audio.PlayPosition">
            <summary>
            The position to start the audio in
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Audio.SongDuration">
            <summary>
            The duration of the audio
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Audio.Play">
            <summary>
            Plays the audio
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Audio.Stop">
            <summary>
            Stops the audio
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Audio.IsEnd">
            <summary>
            Whether the audio had ended
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Audio.TrySetPosition(System.Single)">
            <summary>
            Sets the position of the audio to the specified position<br/>
            Only works for <see cref="T:UndyneFight_Ex.Audio.DynamicSongPlayer"/>
            </summary>
            <param name="position">The position to set to</param>
            <returns>Whether the audio was successfully set to the specified position</returns>
        </member>
        <member name="M:UndyneFight_Ex.Audio.TryGetPosition(System.Boolean@)">
            <summary>
            Gets the position of the audio<br/>
            Only works for <see cref="T:UndyneFight_Ex.Audio.SongPlayer"/> and <see cref="T:UndyneFight_Ex.Audio.DynamicSongPlayer"/>
            </summary>
            <param name="result">Whether the audio position was successfully get</param>
            <returns>The current position of the audio</returns>
        </member>
        <member name="P:UndyneFight_Ex.DynamicSongInstance.Volume">
            <summary>
            The volume of the song
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.DynamicSongInstance.Pitch">
            <summary>
            The pitch of the song
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.DynamicSongInstance.Length">
            <summary>
            Duration of the song
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.BoxUtil">
            <summary>
            Utilities for box functions
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.BoxUtil.VertexBoxInstance">
            <summary>
            The current fight box as a <see cref="T:UndyneFight_Ex.Entities.VertexBox"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.BoxUtil.Vertexify(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Converts the current <see cref="T:UndyneFight_Ex.Entities.FightBox"/> into a <see cref="T:UndyneFight_Ex.Entities.VertexBox"/>
            </summary>
            <param name="heart">The heart to assign to (Default current)</param>
        </member>
        <member name="M:UndyneFight_Ex.BoxUtil.DeVertexify(UndyneFight_Ex.CollideRect)">
            <summary>
            Converts a <see cref="T:UndyneFight_Ex.Entities.VertexBox"/> back to a normal <see cref="T:UndyneFight_Ex.Entities.RectangleBox"/>
            </summary>
            <param name="area">The area the box takes</param>
        </member>
        <member name="T:UndyneFight_Ex.Protected`1">
            <summary>
            Protected data
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:UndyneFight_Ex.Protected`1.Hacked">
            <summary>
            Whether the data was hacked
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Protected`1.Value">
            <summary>
            The value of the protected data
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Protected`1.op_Implicit(UndyneFight_Ex.Protected{`0})~`0">
            <summary>
            Converts the value of the data to the desired type
            </summary>
            <param name="val">The value to convert</param>
        </member>
        <member name="T:UndyneFight_Ex.DrawingLab">
            <summary>
            Drawing Utilities
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.GetIndices(Microsoft.Xna.Framework.Graphics.VertexPositionColor[])">
            <summary>
            Enter a point sequence clockwise to obtain a set of triangulations of the point sequence.
            </summary>
            <param name="pointList"></param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.GetIndices(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture[])">
            <summary>
            Enter a point sequence clockwise to obtain a set of triangulations of the point sequence.
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.GetIndices(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Enter a point sequence clockwise to obtain a set of triangulations of the point sequence.
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.GetIndices(System.Tuple{System.Int32,Microsoft.Xna.Framework.Vector2}[])">
            <summary>
            Enter a point sequence clockwise to obtain a set of triangulations of the point sequence.
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.DrawingLab.HSV">
            <summary>
            HSV value of a Color
            </summary>
            <param name="h">The Hue of the color</param>
            <param name="s">The Saturation of the color</param>
            <param name="v">The Value of the color</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.HSV.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            HSV value of a Color
            </summary>
            <param name="h">The Hue of the color</param>
            <param name="s">The Saturation of the color</param>
            <param name="v">The Value of the color</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.HsvToRgb(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Converts a HSV color to RGB
            </summary>
            <param name="hue">The hue of the color</param>
            <param name="saturation">The saturation of the color</param>
            <param name="value">The value of the color</param>
            <param name="input_a">The alpha of the color</param>
            <returns>The color in RGBA form</returns>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.UVPosition(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2)">
            <summary>
            
            </summary>
            <param name="triangle">Three vertex information, first is (0, 0), second is (1, 0), third is (0, 1)</param>
            <param name="cur"></param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawLine(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draws a line with the given width, color and depth in the given position
            </summary>
            <param name="P1">The first <see cref="T:Microsoft.Xna.Framework.Vector2"/> point fo the line</param>
            <param name="P2">The second <see cref="T:Microsoft.Xna.Framework.Vector2"/> point of the line</param>
            <param name="width">The width of the line</param>
            <param name="cl">The <see cref="T:Microsoft.Xna.Framework.Color"/> of the line</param>
            <param name="depth">The depth of the line</param>
            <param name="texture">The drawing texture of the line (Default <see cref="F:UndyneFight_Ex.FightResources.Sprites.pixUnit"/>)</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawVector(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Draws a vector arrow
            </summary>
            <param name="centre">The centre of the vector</param>
            <param name="rotation">The rotation of the vector</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawLine(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draws a line
            </summary>
            <param name="Centre">The center of the line</param>
            <param name="angle">The rotation of the line(In radians)</param>
            <param name="length">The length of the line</param>
            <param name="width">The width of the line</param>
            <param name="cl">The <see cref="T:Microsoft.Xna.Framework.Color"/> of the line</param>
            <param name="depth">The depth of the line</param>
            <param name="texture">The texture of the line</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawRectangle(UndyneFight_Ex.CollideRect,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws an outline of a rectangle
            </summary>
            <param name="rect">The perimeter of the rectangle</param>
            <param name="color">The color of the rectangle</param>
            <param name="width">The width of the outline of the rectangle</param>
            <param name="depth">The depth of the rectangle</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawCircle(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a circle outline
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="vertexnum">The amount of vertices used to draw the circle (Higher value would result in higher precision and more lag, range: [3, inf))</param>
            <param name="thickness">The thickness of the circle outline</param>
            <param name="col">The <see cref="T:Microsoft.Xna.Framework.Color"/> of the circle</param>
            <param name="depth">The depth of the circle</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawCircleSections(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Single,Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single)">
            <summary>
            Draws a section of a circle outline
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="vertexnum">The amount of vertices used to draw the circle (Higher value would result in higher precision and more lag, range: [3, inf))</param>
            <param name="thickness">The thickness of the circle outline</param>
            <param name="col">The <see cref="T:Microsoft.Xna.Framework.Color"/> of the circle</param>
            <param name="depth">The depth of the circle</param>
            <param name="startang">The starting angle to draw from</param>
            <param name="endang">The ending angle to draw to</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawCircleFilled(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a filled circle
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="vertexnum">The amount of vertices used to draw the circle (Higher value would result in higher precision and more lag, range: [3, inf))</param>
            <param name="col">The <see cref="T:Microsoft.Xna.Framework.Color"/> of the circle</param>
            <param name="depth">The depth of the circle</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawCircleFilledSections(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single)">
            <summary>
            Draws a section of a filled circle
            </summary>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="vertexnum">The amount of vertices used to draw the circle (Higher value would result in higher precision and more lag, range: [3, inf))</param>
            <param name="col">The <see cref="T:Microsoft.Xna.Framework.Color"/> of the circle</param>
            <param name="depth">The depth of the circle</param>
            <param name="startang">The starting angle to draw from</param>
            <param name="endang">The ending angle to draw to</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawTriangle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color[],System.Single)">
            <summary>
            Draws a triangle with given colors
            </summary>
            <param name="p1">The coordinate of the first vertex</param>
            <param name="p2">The coordinate of the second vertex</param>
            <param name="p3">The coordinate of the third vertex</param>
            <param name="colors">The colors for each vertex</param>
            <param name="depth">The depth of the triangle</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawTriangle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a triangle with given color
            </summary>
            <param name="p1">The coordinate of the first vertex</param>
            <param name="p2">The coordinate of the second vertex</param>
            <param name="p3">The coordinate of the third vertex</param>
            <param name="color">The color of the triangle</param>
            <param name="depth">The depth of the triangle</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawLineColors(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color[],System.Single,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draws a line with different colors in each corner
            </summary>
            <param name="Centre">The center of the line</param>
            <param name="angle">The angle of the line</param>
            <param name="length">The length of the line</param>
            <param name="width">The width of the line</param>
            <param name="cl">The colors of the line (Top Left, Top Right, Bottom Right, Bottom Left)</param>
            <param name="depth">The depth of the line</param>
            <param name="texture">The drawing texture of the line (Default <see cref="F:UndyneFight_Ex.FightResources.Sprites.pixUnit"/>)</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawLineColors(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draws a line with different colors in each corner
            </summary>
            <param name="Centre">The center of the line</param>
            <param name="angle">The angle of the line</param>
            <param name="length">The length of the line</param>
            <param name="width">The width of the line</param>
            <param name="cl">The colors of the line (Top Left, Top Right, Bottom Right, Bottom Left)</param>
            <param name="depth">The depth of the line</param>
            <param name="texture">The texture of the line (Default none)</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawRoundedRectangle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a rectangle with rounded corners
            </summary>
            <param name="centre">The center of the rectangle</param>
            <param name="size">The size of the rectangle</param>
            <param name="radius">The radius of the rounded corners</param>
            <param name="color">The color of the rounded rectangle</param>
            <param name="depth">The depth of the rounded rectangle</param>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.LoadContent``1(System.String,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads a file (Cross-platform)
            </summary>
            <typeparam name="T">Content type</typeparam>
            <param name="path">Path to file</param>
            <param name="cm">Content manager to use</param>
            <returns>The loaded content</returns>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.LoadImage(System.String)">
            <summary>
            Loads an image
            </summary>
            <param name="path">Path of the image</param>
            <returns>The loaded texture</returns>
        </member>
        <member name="M:UndyneFight_Ex.DrawingLab.DrawText(UndyneFight_Ex.GLFont,System.String,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},UndyneFight_Ex.SpriteBatchEX)">
            <summary>
            Draws a text
            </summary>
            <param name="font">The font to draw in</param>
            <param name="text">The text to draw</param>
            <param name="position">The position of the text</param>
            <param name="color">The color of the text (Default white)</param>
            <param name="scale">The scale of the text (Default 1)</param>
            <param name="rotation">The rotation of the text (Default 0)</param>
            <param name="rotateCenter">The rotation origin of the text (Default top left)</param>
            <param name="depth">The depth of the text (Default 1)</param>
            <param name="spriteBatch">The sprite batch to draw (Default <see cref="P:UndyneFight_Ex.GameMain.MissionSpriteBatch"/>)</param>
        </member>
        <member name="T:UndyneFight_Ex.Shader">
            <summary>
            The shader class
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Shader.#ctor">
            <summary>
            The shader class
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Shader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Creates a shader using an existing <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:UndyneFight_Ex.Shader.#ctor(System.String)">
            <summary>
            Loads a shader in the given path
            </summary>
            <param name="path">The path of the shader</param>
        </member>
        <member name="P:UndyneFight_Ex.Shader.EffectName">
            <summary>
            The name of the effect used within the shader
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Shader.Parameters">
            <summary>
            The parameters of the shader
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Shader.StableEvents">
            <summary>
            The event to execute within the shader
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Shader.RegisterTexture(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <summary>
            Applies the given texture to the shader
            </summary>
            <param name="tex">The texture to import to the shader</param>
            <param name="index">The index of the texture to import (Range should be [1, inf))</param>
        </member>
        <member name="M:UndyneFight_Ex.Shader.SetParameters(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Sets multiple parameters to the shader
            </summary>
            <param name="vals">A KeyValuePair of the name of the parameter and the value</param>
        </member>
        <member name="M:UndyneFight_Ex.Shader.SetParameter(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Sets a parameter of the shader
            </summary>
            <param name="val">The name and value to set</param>
        </member>
        <member name="M:UndyneFight_Ex.Shader.Update">
            <summary>
            Updates the shader
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Shader.op_Implicit(UndyneFight_Ex.Shader)~Microsoft.Xna.Framework.Graphics.Effect">
            <summary>
            Converts the shader into its effect
            </summary>
            <param name="shader">The shader to convert form</param>
        </member>
        <member name="T:UndyneFight_Ex.GLFont">
            <summary>
            Graphics Library Font class
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GLFont.SFX">
            <summary>
            The sprite font data
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.#ctor(System.String,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Creates a new GLFont
            </summary>
            <param name="path">Path to font</param>
            <param name="cm">Loader to load the font</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.Draw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,UndyneFight_Ex.SpriteBatchEX)">
            <summary>
            Draws text
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the top left corner of the text</param>
            <param name="color">The color of the text</param>
            <param name="sb">The <see cref="T:UndyneFight_Ex.SpriteBatchEX"/> used to render the text (Default default renderer)</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.Draw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws text
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the top left corner of the text</param>
            <param name="color">The color of the text</param>
            <param name="scale">The scale of the text</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.Draw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Draws text
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the top left corner of the text</param>
            <param name="color">The color of the text</param>
            <param name="scale">The scale of the text</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.Draw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Draws text
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the top left corner of the text</param>
            <param name="color">The color of the text</param>
            <param name="rotation">The rotation of the text</param>
            <param name="scale">The scale of the text</param>
            <param name="anchor">The anchor of rotation</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.Draw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single)">
            <summary>
            Draws text
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the top left corner of the text</param>
            <param name="color">The color of the text</param>
            <param name="rotation">The rotation of the text</param>
            <param name="scale">The scale of the text</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.Draw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Draws text
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the top left corner of the text</param>
            <param name="color">The color of the text</param>
            <param name="rotation">The rotation of the text</param>
            <param name="scale">The scale of the text</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.CentreDraw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,UndyneFight_Ex.SpriteBatchEX)">
            <summary>
            Draws text that is aligned to the center
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the center of the text</param>
            <param name="color">The color of the text</param>
            <param name="sb">The <see cref="T:UndyneFight_Ex.SpriteBatchEX"/> used to render the text (Default default renderer)</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.CentreDraw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Draws text that is aligned to the center
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the center of the text</param>
            <param name="color">The color of the text</param>
            <param name="scale">The scale of the text</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.CentreDraw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Draws text that is aligned to the center
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the center of the text</param>
            <param name="color">The color of the text</param>
            <param name="scale">The scale of the text</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.CentreDraw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single)">
            <summary>
            Draws text that is aligned to the center
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the center of the text</param>
            <param name="color">The color of the text</param>
            <param name="scale">The scale of the text</param>
            <param name="rotation">The rotation of the text</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.CentreDraw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Draws text that is aligned to the center
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The location of the center of the text</param>
            <param name="color">The color of the text</param>
            <param name="scale">The scale of the text</param>
            <param name="rotation">The rotation of the text</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.LimitDraw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a piece of text that will break to a new line when the given limit is reached
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The top left corner to draw the text with</param>
            <param name="color">The color of the text</param>
            <param name="lineLength">The maximum width of a line in pixels</param>
            <param name="lineDistance">The vertical distance between lines</param>
            <param name="scale">The scale of the text</param>
            <param name="depth">The depth of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.LimitDraw(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws a piece of text that will break to a new line when the given limit is reached
            </summary>
            <param name="texts">The text to draw</param>
            <param name="location">The top left corner to draw the text with</param>
            <param name="color">The color of the text</param>
            <param name="size">The area to restrict the text in</param>
            <param name="lineDistance">The vertical distance between lines</param>
            <param name="scale">The scale of the text (Note that the size may shrink because <paramref name="size"/> is too small</param>
            <param name="depth">The depth of the text</param>
            <param name="by_word">Whether the line break will consider the spaces</param>
        </member>
        <member name="M:UndyneFight_Ex.GLFont.MeasureChar(System.Char)">
            <summary>
            Gets the size of a specified <see cref="T:System.Char"/>
            </summary>
            <param name="ch">The character to measure the size of</param>
            <returns>The size of the given character</returns>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SimplifiedEasing">
            <summary>
            Simplified easing functions<br/>
            NOTE THAT EaseIn*, EaseInOut*, EaseOutIn* functions may return inaccurate results,<br></br>
            TK is currently investigating this issue<br></br>
            It's September 2025 and it's still not fixed 😡
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SimplifiedEasing.VirtualEasingObject">
            <summary>
            A virtual easing object that simulates the values extracted from <see cref="P:UndyneFight_Ex.Entities.SimplifiedEasing.VirtualEasingObject.CentrePosition"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.RunEase(System.Action{Microsoft.Xna.Framework.Vector2},System.Boolean,UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2}[])">
            <summary>
            Runs an action with a <see cref="T:Microsoft.Xna.Framework.Vector2"/> as it's variable with the given easing functions
            </summary>
            <param name="action">The action to apply the easing to</param>
            <param name="isAdjust">Whether the value will automatically start from the previous easing result</param>
            <param name="funcs">The easing functions</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.RunEase(System.Action{Microsoft.Xna.Framework.Vector2},UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2}[])">
            <summary>
            Runs an action with a <see cref="T:Microsoft.Xna.Framework.Vector2"/> as it's variable with the given easing functions
            </summary>
            <param name="action">The action to apply the easing to</param>
            <param name="funcs">The easing functions</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.RunEase(System.Action{System.Single},System.Boolean,UndyneFight_Ex.Entities.EaseUnit{System.Single}[])">
            <summary>
            Runs an action with a <see cref="T:System.Single"/> as it's variable with the given easing functions
            </summary>
            <param name="action">The action to apply the easing to</param>
            <param name="isAdjust">Whether the value will automatically start from the previous easing result</param>
            <param name="funcs">The easing functions</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.RunEase(System.Action{System.Single},UndyneFight_Ex.Entities.EaseUnit{System.Single}[])">
            <summary>
            Runs an action with a <see cref="T:System.Single"/> as it's variable with the given easing functions
            </summary>
            <param name="action">The action to apply the easing to</param>
            <param name="funcs">The easing functions</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.LinkEase(System.Boolean,UndyneFight_Ex.Entities.EaseUnit{System.Single}[])">
            <summary>
            Links multiple easing functions into an <see cref="T:UndyneFight_Ex.Entities.EaseUnit`1"/> where T is float
            </summary>
            <param name="isAdjust">Whether the value will automatically start from the previous easing result</param>
            <param name="funcs">The easing functions to link</param>
            <returns>The linked easing functions</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.LinkEase(UndyneFight_Ex.Entities.EaseUnit{System.Single}[])">
            <summary>
            Links multiple easing functions into an <see cref="T:UndyneFight_Ex.Entities.EaseUnit`1"/> where T is float
            </summary>
            <param name="funcs">The easing functions to link</param>
            <returns>The linked easing functions</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.LinkEase(System.Boolean,UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2}[])">
            <summary>
            Links multiple easing functions into an <see cref="T:UndyneFight_Ex.Entities.EaseUnit`1"/>
            </summary>
            <param name="isAdjust">Whether the value will automatically start from the previous easing result</param>
            <param name="funcs">The easing functions to link</param>
            <returns>The linked easing functions</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.LinkEase(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2}[])">
            <summary>
            Links multiple easing functions into an <see cref="T:UndyneFight_Ex.Entities.EaseUnit`1"/>
            </summary>
            <param name="funcs">The easing functions to link</param>
            <returns>The linked easing functions</returns>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SimplifiedEasing.EaseState">
            <summary>
            Modes of easing to apply on easing functions, see <see href="https://easings.net/"/> for more information
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SimplifiedEasing.EaseState.Linear">
            <summary>
            Linear easing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SimplifiedEasing.EaseState.Quad">
            <summary>
            Quadratic easing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SimplifiedEasing.EaseState.Cubic">
            <summary>
            Cubic easing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SimplifiedEasing.EaseState.Quart">
            <summary>
            Quartic easing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SimplifiedEasing.EaseState.Quint">
            <summary>
            Quintic easing
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.InfLinear(System.Single,System.Single)">
            <summary>
            Returns an infinite linear movement
            </summary>
            <param name="start">The initial value</param>
            <param name="speed">The speed of the increment of the value</param>
            <returns>The easing result</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.InfLinear(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns an infinite linear movement
            </summary>
            <param name="start">The initial position</param>
            <param name="speed">The speed of the movement</param>
            <returns>The easing result</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.InfLinear(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns an infinite linear movement (Default position (0, 0))
            </summary>
            <param name="speed">The speed of the movement</param>
            <returns>The easing result</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Linear(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a linear motion
            </summary>
            <param name="time">The duration of the linear movement</param>
            <param name="start">The initial position of the movement</param>
            <param name="end">The target position of the movement</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Linear(System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a linear motion <br/>
            Note that this will increment <paramref name="end"/> based on the previous easing
            </summary>
            <param name="time">The duration of the linear movement</param>
            <param name="end">The target position of the movement</param>
            <returns>The easing result</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Linear(System.Single,System.Single,System.Single)">
            <summary>
            Returns a linear easing
            </summary>
            <param name="time">The duration of the linear easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Linear(System.Single,System.Single)">
            <summary>
            Returns a linear easing <br/>
            Note that this will increment <paramref name="end"/> based on the previous easing
            </summary>
            <param name="time">The duration of the linear easing</param>
            <param name="end">The target value of the easing</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseIn(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts slow and ends fast
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseOut(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts fast and ends slow
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseIn(System.Single,Microsoft.Xna.Framework.Vector2,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts slow and ends fast <br/>
            Note that this will increment <paramref name="end"/> based on the previous easing
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseOut(System.Single,Microsoft.Xna.Framework.Vector2,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts fast and ends slow <br/>
            Note that this will increment <paramref name="end"/> based on the previous easing
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseInOut(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState,System.Nullable{UndyneFight_Ex.Entities.SimplifiedEasing.EaseState})">
            <summary>
            Returns an easing function that starts slow, increases in speed, then becomes slow again
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="amount">The proportion of the distance between the starting point and the midpoint<br/>For example: 0.4f means that the starting point easing distance accounts for 40% and the midpoint easing distance accounts for 60%<br/>But the easing time ratio is still 1:1</param>
            <param name="Astate">Initial easing type</param>
            <param name="Bstate">Ending easing type (Default <paramref name="Astate"/>)</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseOutIn(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState,System.Nullable{UndyneFight_Ex.Entities.SimplifiedEasing.EaseState})">
            <summary>
            Returns an easing function that starts fast, decreases in speed, then becomes fast again
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="amount">The proportion of the distance between the starting point and the midpoint<br/>For example: 0.4f means that the starting point easing distance accounts for 40% and the midpoint easing distance accounts for 60%<br/>But the easing time ratio is still 1:1</param>
            <param name="Astate">Initial easing type</param>
            <param name="Bstate">Ending easing type (Default <paramref name="Astate"/>)</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseInOut(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts slow, increases in speed, then becomes slow again
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used in the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseOutIn(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts fast, decreases in speed, then becomes fast again
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used in the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseIn(System.Single,System.Single,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts slow and ends fast
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseOut(System.Single,System.Single,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts fast and ends slow
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseIn(System.Single,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts slow and ends fast <br/>
            Note that this will increment <paramref name="end"/> based on the previous easing
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseOut(System.Single,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts fast and ends slow <br/>
            Note that this will increment <paramref name="end"/> based on the previous easing
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseInOut(System.Single,System.Single,System.Single,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState,System.Nullable{UndyneFight_Ex.Entities.SimplifiedEasing.EaseState})">
            <summary>
            Returns an easing function that starts slow, increases in speed, then becomes slow again
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="amount">The proportion of the distance between the starting point and the midpoint<br/>For example: 0.4f means that the starting point easing distance accounts for 40% and the midpoint easing distance accounts for 60%<br/>But the easing time ratio is still 1:1</param>
            <param name="Astate">Initial easing type</param>
            <param name="Bstate">Ending easing type (Default <paramref name="Astate"/>)</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseOutIn(System.Single,System.Single,System.Single,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState,System.Nullable{UndyneFight_Ex.Entities.SimplifiedEasing.EaseState})">
            <summary>
            Returns an easing function that starts fast, decreases in speed, then becomes fast again
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="amount">The proportion of the distance between the starting point and the midpoint<br/>For example: 0.4f means that the starting point easing distance accounts for 40% and the midpoint easing distance accounts for 60%<br/>But the easing time ratio is still 1:1</param>
            <param name="Astate">Initial easing type</param>
            <param name="Bstate">Ending easing type (Default <paramref name="Astate"/>)</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseInOut(System.Single,System.Single,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts slow, increases in speed, then becomes slow again
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.EaseOutIn(System.Single,System.Single,System.Single,UndyneFight_Ex.Entities.SimplifiedEasing.EaseState)">
            <summary>
            Returns an easing function that starts fast, decreases in speed, then becomes fast again
            </summary>
            <param name="time">The duration of the easing</param>
            <param name="start">The initial value of the easing</param>
            <param name="end">The target value of the easing</param>
            <param name="state">The type of easing used for the easing function</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Stable(System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a stable value for the specified amount of time
            </summary>
            <param name="time">The duration of the stability of the value (Use 0 for instantly setting the value)</param>
            <param name="value">The value to set to</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Stable(System.Single,System.Single,System.Single)">
            <summary>
            Returns a stable value for the specified amount of time, essentially the same with <see cref="M:UndyneFight_Ex.Entities.SimplifiedEasing.Stable(System.Single,Microsoft.Xna.Framework.Vector2)"/>
            </summary>
            <param name="time">The duration of the stability of the value (Use 0 for instantly setting the value)</param>
            <param name="xvalue">The first value to set to</param>
            <param name="yvalue">The second value to set to</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Stable(System.Single,System.Single)">
            <summary>
            Returns a stable value for the specified amount of time
            </summary>
            <param name="time">The duration of the stability of the value (Use 0 for instantly setting the value)</param>
            <param name="value">The value to set to</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Stable(System.Single)">
            <summary>
            Returns a stable value for the specified amount of time <br/>
            If there is no previous easing, the value will be zero, or else it will be the result fo the previous easing
            </summary>
            <param name="time">The duration of the stability of the value (Use 0 for instantly setting the value)</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Copy(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},System.Int32)">
            <summary>
            Returns a copy of the specified easing for the given amount of times
            </summary>
            <param name="ease">The easing function to copy</param>
            <param name="times">The amount of times needed to copy</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Copy(UndyneFight_Ex.Entities.EaseUnit{System.Single},System.Int32)">
            <summary>
            Returns a copy of the specified easing for the given amount of times
            </summary>
            <param name="ease">The easing function to copy</param>
            <param name="times">The amount of times needed to copy</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Alternate(System.Single,UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2}[])">
            <summary>
            Alternates between the given easing functions
            </summary>
            <param name="interval">The interval between each easing function</param>
            <param name="main">The main easing function</param>
            <param name="addons">The additional easing functions to alternate</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Alternate(System.Single,UndyneFight_Ex.Entities.EaseUnit{System.Single},UndyneFight_Ex.Entities.EaseUnit{System.Single}[])">
            <summary>
            Alternates between the given easing functions
            </summary>
            <param name="interval">The interval between each easing function</param>
            <param name="main">The main easing function</param>
            <param name="addons">The additional easing functions to alternate</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Add(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Returns the result of two <see cref="T:Microsoft.Xna.Framework.Vector2"/> easing functions
            </summary>
            <param name="main">The original easing function</param>
            <param name="addon">The easing function to add</param>
            <returns>The sum of the two easing functions</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Add(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the result of a <see cref="T:Microsoft.Xna.Framework.Vector2"/> easing function and a <see cref="T:Microsoft.Xna.Framework.Vector2"/>
            </summary>
            <param name="main">The original easing function</param>
            <param name="addon">The displacement to add</param>
            <returns>The sum of the easing function and vector</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Scale(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},UndyneFight_Ex.Entities.EaseUnit{System.Single})">
            <summary>
            Scales the <see cref="T:Microsoft.Xna.Framework.Vector2"/> easing by a <see cref="T:System.Single"/> easing function
            </summary>
            <param name="origin">The vector easing to scale to</param>
            <param name="scalar">The float easing to scale</param>
            <returns>The result of the easing functions</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Scale(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},System.Single)">
            <summary>
            Scales the <see cref="T:Microsoft.Xna.Framework.Vector2"/> easing by a sclar float value
            </summary>
            <param name="origin">The vector easing to scale to</param>
            <param name="scalar">The float to scale</param>
            <returns>The result of the scaled easing function</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Scale(UndyneFight_Ex.Entities.EaseUnit{System.Single},UndyneFight_Ex.Entities.EaseUnit{System.Single})">
            <summary>
            Scales the <see cref="T:System.Single"/> easing by a <see cref="T:System.Single"/> easing function
            </summary>
            <param name="origin">The float easing to scale to</param>
            <param name="scalar">The float easing to scale</param>
            <returns>The result of the easing functions</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Scale(UndyneFight_Ex.Entities.EaseUnit{System.Single},System.Single)">
            <summary>
            Scales the <see cref="T:System.Single"/> easing by a scalar float value
            </summary>
            <param name="origin">The float easing to scale to</param>
            <param name="scalar">The float to scale</param>
            <returns>The result of the scaled easing function</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Polar(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},UndyneFight_Ex.Entities.EaseUnit{System.Single})">
            <summary>
            Returns a easing of a rotating <see cref="T:Microsoft.Xna.Framework.Vector2"/> easing
            </summary>
            <param name="main">The vector easing to rotate</param>
            <param name="rotate">The easing of the rotation</param>
            <returns>The result of the easing function</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Polar(UndyneFight_Ex.Entities.EaseUnit{System.Single},UndyneFight_Ex.Entities.EaseUnit{System.Single})">
            <summary>
            Returns a easing of a rotating <see cref="T:System.Single"/> easing
            </summary>
            <param name="main">The float easing to rotate</param>
            <param name="rotate">The easing of the rotation</param>
            <returns>The result of the easing function</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Polar(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},System.Single)">
            <summary>
            Returns a easing of a rotating <see cref="T:Microsoft.Xna.Framework.Vector2"/> easing
            </summary>
            <param name="main">The vector easing to rotate</param>
            <param name="rotate">The rotation to set to</param>
            <returns>The result of the easing function</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Add(UndyneFight_Ex.Entities.EaseUnit{System.Single},UndyneFight_Ex.Entities.EaseUnit{System.Single})">
            <summary>
            Returns the result of two <see cref="T:System.Single"/> easing functions
            </summary>
            <param name="main">The original easing function</param>
            <param name="addon">The easing function to add</param>
            <returns>The sum of the two easing functions</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Add(UndyneFight_Ex.Entities.EaseUnit{System.Single},System.Single)">
            <summary>
            Returns the result of a <see cref="T:System.Single"/> easing function and a float value
            </summary>
            <param name="main">The original easing function</param>
            <param name="addon">The float value to add</param>
            <returns>The sum of the easing function and the float value</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Combine(UndyneFight_Ex.Entities.EaseUnit{System.Single},UndyneFight_Ex.Entities.EaseUnit{System.Single})">
            <summary>
            Returns a <see cref="T:Microsoft.Xna.Framework.Vector2"/> easing with the given <paramref name="xEase"/> and <paramref name="yEase"/> as the x and y components of the <see cref="T:Microsoft.Xna.Framework.Vector2"/> easing function
            </summary>
            <param name="xEase">The easing of the x value (Use <see cref="M:UndyneFight_Ex.Entities.SimplifiedEasing.Stable(System.Single,System.Single)"/> for stable value</param>
            <param name="yEase">The easing of the y value (Use <see cref="M:UndyneFight_Ex.Entities.SimplifiedEasing.Stable(System.Single,System.Single)"/> for stable value</param>
            <returns>The combined easing function</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.SineWave(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Returns a sine wave easing
            </summary>
            <param name="start">The minimal value of the wave</param>
            <param name="end">The maximum value of the wave</param>
            <param name="T">The period of the wave</param>
            <param name="waveCount">The amount of times the wave will run (Default 99999)</param>
            <param name="phase">The initial position (Default 0)</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.SineWave(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Returns a sine wave easing
            </summary>
            <param name="impact">The magnitude of the wave</param>
            <param name="T">The period of the wave</param>
            <param name="waveCount">The amount of times the wave will run (Default 99999)</param>
            <param name="phase">The initial position (Default 0)</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.SineWave(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a sine wave easing
            </summary>
            <param name="amplitude">The amplitude of the wave</param>
            <param name="T">The period of the wave</param>
            <param name="waveCount">The amount of times the wave will run (Default 99999)</param>
            <param name="phase">The initial position (Default 0)</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Accelerating(System.Single,System.Single,System.Single)">
            <summary>
            An accelerating easing
            </summary>
            <param name="time">The time of the acceleration</param>
            <param name="speed">The speed of the value change</param>
            <param name="acceleration">The acceleration of the speed</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Accelerating(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            An accelerating easing
            </summary>
            <param name="time">The time of the acceleration</param>
            <param name="start">The initial value</param>
            <param name="speed">The speed of the value change</param>
            <param name="acceleration">The acceleration of the speed</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Accelerating(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            An accelerating easing
            </summary>
            <param name="time">The time of the acceleration</param>
            <param name="speed">The speed of the value change</param>
            <param name="acceleration">The acceleration of the speed</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SimplifiedEasing.Accelerating(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            An accelerating easing
            </summary>
            <param name="time">The time of the acceleration</param>
            <param name="start">The initial value</param>
            <param name="speed">The speed of the value change</param>
            <param name="acceleration">The acceleration of the speed</param>
            <returns>The result of the easing</returns>
        </member>
        <member name="T:UndyneFight_Ex.Entities.EasingUtil">
            <summary>
            Easing utilities that support <see cref="T:UndyneFight_Ex.Entities.SimplifiedEasing"/>, however it is better to use <see cref="T:UndyneFight_Ex.Entities.SimplifiedEasing"/> for better readability
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.EasingUtil.CentreEasing">
            <summary>
            Easing library, note that they run at 125fps<br/>
            The functions are not documented as they are replaced by <see cref="T:UndyneFight_Ex.Entities.SimplifiedEasing"/> functions, or are not useful except for a few occasions
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.EasingUtil.CentreEasing.SinWave(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构建一个摆动的正弦波的缓动
            </summary>
            <param name="intensity">振幅</param>
            <param name="cycleTime">每个波占的时间，即周期</param>
            <param name="startPhase">初始位置在第一个半波里面的比例位置。例如写0.5即从第一个半波的一半位置开始。</param>
            <param name="rotation">摆动方向</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.EasingUtil.CentreEasing.XSinWave(System.Single,System.Single,System.Single)">
            <summary>
            构建一个上下摆动的正弦波的缓动
            </summary>
            <param name="intensity">振幅</param>
            <param name="cycleTime">每个波占的时间，即周期</param>
            <param name="startPhase">初始位置在第一个半波里面的比例位置。例如写0.5即从第一个半波的一半位置开始。</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.EasingUtil.CentreEasing.YSinWave(System.Single,System.Single,System.Single)">
            <summary>
            构建一个左右摆动的正弦波的缓动
            </summary>
            <param name="intensity">振幅</param>
            <param name="cycleTime">每个波占的时间，即周期</param>
            <param name="startPhase">初始位置在第一个半波里面的比例位置。例如写0.5即从第一个半波的一半位置开始。</param>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.Entities.EasingUtil.CentreEasing.VirtualEasingObject">
            <summary>
            模拟缓动物件，模拟值从CentrePosition提取
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.EasingUtil.ValueEasing">
            <summary>
            Easing library, note that they run at 125fps<br/>
            The functions are not documented as they are replaced by <see cref="T:UndyneFight_Ex.Entities.SimplifiedEasing"/> functions, or are not useful except for a few occasions
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.EasingUtil.ValueEasing.SinWave(System.Single,System.Single,System.Single)">
            <summary>
            构建一个正弦波的缓动
            </summary>
            <param name="intensity">振幅</param>
            <param name="cycleTime">每个波占的时间，即周期</param>
            <param name="startPhase">初始位置在第一个半波里面的比例位置。例如写0.5即从第一个半波的一半位置开始。</param>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.Entities.EasingUtil.ValueEasing.VirtualEasingObject">
            <summary>
            模拟缓动物件，模拟值从Rotation提取
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Arrow">
            <summary>
            An arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.RotateType">
            <summary>
            The rotating type of the arrow (None, Reverse, Diagonal)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.VoidMode">
            <summary>
            Whether the sprite of the arrow is a void arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.VolumeFactor">
            <summary>
            The volume of the arrow when blocked
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.NoScore">
            <summary>
            Whether the score of the arrow won't be marked
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.#ctor(UndyneFight_Ex.Entities.Player.Heart,System.Single,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates an arrow
            </summary>
            <param name="mission">The heart to aim the arrow with</param>
            <param name="shootShieldTime">Time taken to reach the shield</param>
            <param name="way">Direction of arrow, 0-> Right, 1-> Down, 2-> Left, 3-> Right</param>
            <param name="speed">Speed of arrow</param>
            <param name="color">The color of the arrow, 0-> Blue, 1-> Red, 2-> Green, 3-> Purple</param>
            <param name="rotatingType">Rotation mode, 0-> None, 1-> Reverse, 2-> Diagonal</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.Mission">
            <summary>
            The target heart of the arrow
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.Start">
            <inheritdoc/>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Arrow.distance">
            <summary>
            距离玩家灵魂的距离
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.ArrowColor">
            <summary>
            The color type of the arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.Way">
            <summary>
            The direction of the arrow (Right, Down, Left, Up)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.CentreRotationOffset">
            <summary>
            The rotation with respect to the target
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.SelfRotationOffset">
            <summary>
            The rotation of the arrow itself
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.Speed">
            <summary>
            The speed of the arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.Alpha">
            <summary>
            The alpha of the arrow
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ResetColor(System.Int32)">
            <summary>
            Sets the color of the arrow
            </summary>
            <param name="color">The color to set to</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.AppearTime">
            <summary>
            The frames elapsed after creation
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Arrow.ArrowPiece">
            <summary>
            A broken shard of an arrow
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ArrowPiece.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ArrowPiece.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ArrowPiece.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.Texture2D,System.Single)">
            <summary>
            Creates a broken shard of an arrow
            </summary>
            <param name="speed">The speed of the shard</param>
            <param name="pos">The position of the shard</param>
            <param name="rotation">The rotation of the shard</param>
            <param name="image">The sprite of the shard</param>
            <param name="scale">The size of the shard</param>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Arrow.JudgementType">
            <summary>
            The possible judgement types of the arrow
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Arrow.JudgementType.Default">
            <summary>
            Normal arrow
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Arrow.JudgementType.Tap">
            <summary>
            The hideous tap arrow
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Arrow.JudgementType.Hold">
            <summary>
            The useless hold arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.JudgeType">
            <summary>
            The judgement type of the arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.BlockTime">
            <summary>
            The time when the arrow should be blocked
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.Delay(System.Single)">
            <summary>
            Delay the arrow by the given amount of time
            </summary>
            <param name="delay">The time to delay</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.Stop(System.Single)">
            <summary>
            Stops the arrow for the given amount of time
            </summary>
            <param name="delay">The time to stop the arrow for</param>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Arrow.ArrowEasing">
            <summary>
            The base for arrow easing functions
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.ArrowEasing.RotateOffset">
            <summary>
            Whether the arrow will have a rotation offset with respect to the center
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ArrowEasing.#ctor">
            <summary>
            Creates the arrow easing object
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ArrowEasing.TagApply(System.String)">
            <summary>
            Applies the easing functions to the arrows with the given tag
            </summary>
            <param name="tagName">The tag of the arrows to apply to</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ArrowEasing.ApplyArrowEasing(UndyneFight_Ex.Entities.Arrow)">
            <summary>
            Applies the easing for the arrows
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ArrowEasing.Update">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.ArrowEasing.Intensity">
            <summary>
            The intensity of the easing (Default 1)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.EnsembleEasing.DeltaEase(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2}[])">
            <summary>
            Eases the coordinate displacement of the arrow
            </summary>
            <param name="deltaEases">The easing function of the coordinate</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.EnsembleEasing.RevolutionEase(UndyneFight_Ex.Entities.EaseUnit{System.Single}[])">
            <summary>
            Eases the angle of the arrow from its target
            </summary>
            <param name="rotationEases">The easing function of the angle</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.EnsembleEasing.SelfRotationEase(UndyneFight_Ex.Entities.EaseUnit{System.Single}[])">
            <summary>
            Eases the arrow's own angle
            </summary>
            <param name="rotationEases">The easing function of the angle</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.EnsembleEasing.DistanceEase(UndyneFight_Ex.Entities.EaseUnit{System.Single}[])">
            <summary>
            Eases the arrow's distance
            </summary>
            <param name="distanceEases">The easing function of the distance of the arrow</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.EnsembleEasing.ApplyArrowEasing(UndyneFight_Ex.Entities.Arrow)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.UnitEasing.Start">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.ApplyTime">
            <summary>
            The total time of the easing
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.PositionEase">
            <summary>
            The easing of the position of the arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.RotationEase">
            <summary>
            The easing of the rotation of the arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.DistanceEase">
            <summary>
            The easing of the distance of the arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.AlphaEase">
            <summary>
            The easing of the alpha of the arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.PositionRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.RotationRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.RotationRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.PositionRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.AppearTime">
            <summary>
            Time elapsed after spawning
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.Rotation">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.Distance">
            <summary>
            The distance between the arrow and the target
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.CentrePosition">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.SelfRotation">
            <summary>
            The rotation of the arrow itself
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.UnitEasing.AutoDispose">
            <summary>
            Whether the unit easing object will be disposed when no child arrows are present
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.UnitEasing.ApplyArrowEasing(UndyneFight_Ex.Entities.Arrow)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ClassicApplier.ApplyDelay(System.Single)">
            <summary>
            Applies an arrow delay effect
            </summary>
            <param name="delay">The amount to delay</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ClassicApplier.ApplyStop(System.Single)">
            <summary>
            Applies an arrow stop effect
            </summary>
            <param name="stopTime">The duration of time to stop</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ClassicApplier.ApplyArrowEasing(UndyneFight_Ex.Entities.Arrow)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Arrow.ClassicApplier.Update">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.PositionRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.RotationRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.RotationRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.PositionRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.MissionCentre">
            <summary>
            The target position of the arrow (Default the heart)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.CentrePosition">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.LateWaitingScale">
            <summary>
            The speed scale of the arrow when it goes near the soul (Default 0.5f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.Offset">
            <summary>
            The position offset of the arrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Arrow.RotateOffset">
            <summary>
            Whether <see cref="P:UndyneFight_Ex.Entities.Arrow.CentreRotationOffset"/> is enabled
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.ICollideAble">
            <summary>
            The interface for a player collidable instance
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ICollideAble.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            The function to check collision with the player
            </summary>
            <param name="player">The player to check</param>
        </member>
        <member name="T:UndyneFight_Ex.Entities.LineCollisionBarrage">
            <summary>
            A barrage with a line collision
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.LineCollisionBarrage.#ctor">
            <summary>
            A barrage with a line collision
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.LineCollisionBarrage.Thickness">
            <summary>
            The thickness of the line
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.LineCollisionBarrage.Points">
            <summary>
            The points of the line
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.LineCollisionBarrage.DistanceThreshold">
            <summary>
            The distance threshold for okay and nice
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.LineCollisionBarrage.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.CircleCollisionBarrage">
            <summary>
            A barrage with circle collision
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CircleCollisionBarrage.#ctor(System.Single)">
            <summary>
            A barrage with circle collision
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.CircleCollisionBarrage.DistanceThreshold">
            <summary>
            The distance threshold for okay and nice
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CircleCollisionBarrage.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.PerfectCollisionBarrage">
            <summary>
            A barrage with pixel perfect collision
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.PerfectCollisionBarrage.#ctor">
            <summary>
            A barrage with pixel perfect collision
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.PerfectCollisionBarrage.AlphaThreshold">
            <summary>
            The minimum alpha of the barrage for the collision to occur
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.PerfectCollisionBarrage.ColorBits">
            <summary>
            The color bits for precise collision
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.PerfectCollisionBarrage.Mask">
            <summary>
            The collision mask of the barrage
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.PerfectCollisionBarrage.BoundingBox">
            <summary>
            The bounding box of the barrage
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.PerfectCollisionBarrage.BaseRect">
            <summary>
            The base rectangle of the mask
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.PerfectCollisionBarrage.Transform">
            <summary>
            Local matrix based on position and rotation
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.PerfectCollisionBarrage.UpdateMask(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Updates the collision mask of the barrage (Typically when changing the <see cref="P:UndyneFight_Ex.Entity.Image"/> of the barrage)
            </summary>
            <param name="NewMask">The new texture for the mask (Default the current <see cref="P:UndyneFight_Ex.Entity.Image"/>)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.PerfectCollisionBarrage.IsColliding(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Whether the current mask is colliding with another mask
            </summary>
            <param name="SourceTransform">The transform matrix of the current barrage</param>
            <param name="DestTransform">The transform matrix of the target</param>
            <param name="DestMask">The mask texture of the target</param>
            <returns>Whether the two masks are colliding</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.PerfectCollisionBarrage.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Barrage">
            <summary>
            <para>A parent class for barrage making, contains commonly used variables and functions</para>
            This class is not the parent class for <see cref="T:UndyneFight_Ex.Entities.Arrow"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.MarkScore">
            <summary>
            Whether the barrage count towards the score
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.ColorType">
            <summary>
            The color type of the barrage
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.ShieldColorTypes">
            <summary>
            <br>The colors for each green soul shield</br>
            <br>0-> Blue, 1 -> Red etc</br>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.BarrageColorTypes">
            <summary>
            The colors for normal barrages
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.AutoDispose">
            <summary>
            Whether the barrage will automatically dispose itself when it goes offscreen after entering the screen
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Barrage.screen">
            <summary>
            Screen bounds
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.Hidden">
            <summary>
            Whether the barrage will only be displayed inside the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.JudgeState">
            <summary>
            The current <see cref="T:UndyneFight_Ex.SongSystem.JudgementState"/> of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.PositionRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.RotationRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.RotationRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.PositionRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.AppearTime">
            <inheritdoc/>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Barrage.Alpha">
            <summary>
            The opacity of the barrage
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Barrage.CentrePosition">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Barrage.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Barrage.NiceCollision">
            <summary>
            Change bullet score to nice
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Barrage.OkayCollision">
            <summary>
            Change bullet score to okay
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Barrage.MissCollision(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Change bullet score to miss and damage the player
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Barrage.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Barrage.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Barrage.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Barrage.CreateShinyEffect">
            <summary>
            Creates an expanding fade effect of the barrage
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Advanced.BarrageExtend">
            <summary>
            Advanced barrage classes
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.BarrageExtend.CreateShinyEffect(UndyneFight_Ex.Entities.Platform)">
            <summary>
            Creates a platform fade out effect
            </summary>
            <param name="pt">The platform to create the effect of</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.BarrageExtend.Split(UndyneFight_Ex.Entities.Bone)">
            <summary>
            Splits the bone
            </summary>
            <param name="bone">The bone to split</param>
            <returns>The split bones</returns>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Advanced.FightAlphaManager">
            <summary>
            自动控制 ClassicFight.InterActive.UIAlpha的工具。
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.FightAlphaManager.SetMission(System.Single)">
            <summary>
            期望的Alpha值。alpha值朝着期望丝滑过渡。
            </summary>
            <param name="mission"></param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.FightAlphaManager.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Advanced.ScreenShaker">
            <summary>
            Shakes the screen
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.ScreenShaker.#ctor(System.Int32,System.Single,System.Single,System.Nullable{System.Single},System.Nullable{System.Single},System.Single)">
            <summary>
            Creates a screen shaker
            </summary>
            <param name="shakeCount">The amount of times to shake</param>
            <param name="shakeIntensity">The intensity (in pixels) of the shaking</param>
            <param name="shakeDelay">The delay between each shake</param>
            <param name="startAngle">The initial angle of the shaking (Default random)</param>
            <param name="angleDelta">The angle difference between each shake (Default randomized between 120 and 240)</param>
            <param name="shakeFriction">The percentage decrease of the intensity of each shake (Default 85%)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.ScreenShaker.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.ScreenShaker.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Advanced.VertexHull">
            <summary>
            3D processing logic, used in Dream Battle and Maware Setsugekka
            </summary>
            <param name="vectors">The location of the 8 vertices in (x, y, z) with respect to the centre</param>
            <param name="rotateSpeed">The rotation speed of (x, y, z)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.VertexHull.#ctor(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector3)">
            <summary>
            3D processing logic, used in Dream Battle and Maware Setsugekka
            </summary>
            <param name="vectors">The location of the 8 vertices in (x, y, z) with respect to the centre</param>
            <param name="rotateSpeed">The rotation speed of (x, y, z)</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Advanced.VertexHull.Axes">
            <summary>
            The X, Y and XZ axes
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Advanced.VertexHull.Rotation">
            <summary>
            The rotation of the object
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.VertexHull.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Advanced.ZaWarudo">
            <summary>
            The effect used in the OST Undyne remake
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.ZaWarudo.#ctor(System.Int32,System.Single,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            The effect used in the OST Undyne remake
            </summary>
            <param name="time">The duration of the effect</param>
            <param name="scale">The scale of the effect</param>
            <param name="frozenColor">The color of the bound</param>
            <param name="backColor">The background color</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.ZaWarudo.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Advanced.ZaWarudo.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Platform">
            <summary>
            A platform
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Platform.autoDispose">
            <summary>
            Whether the platform will be automatically disposed when length is 0 or is outside the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Platform.PositionRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Platform.LengthRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Platform.RotationRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Platform.CentrePosition">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Platform.PositionRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Platform.LengthRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Platform.RotationRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Platform.AppearTime">
            <summary>
            The time elapsed after the platform was created
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Platform.isMasked">
            <summary>
            Whether the platform is masked inside the box
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Platform.createWithScaling">
            <summary>
            Whether the platform will have a scaling animation when created
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Platform.scale">
            <summary>
            The default scale of the platform
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Platform.#ctor(System.Int32,Microsoft.Xna.Framework.Vector2,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Single,System.Single)">
            <summary>
            Creates a platform with fixed size
            </summary>
            <param name="platformType">The type of platform, 0-> Green, 1-> Purple</param>
            <param name="startPos">The initial position of the platform</param>
            <param name="positionRoute">The position route of the platform (Delta positioning, therefore the position of the platform will be the sum of <paramref name="startPos"/> and <paramref name="positionRoute"/></param>
            <param name="rotation">The rotation of the platform</param>
            <param name="length">The length of the platform</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Platform.#ctor(System.Int32,Microsoft.Xna.Framework.Vector2,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Single,System.Single,System.Single)">
            <summary>
            Creates a platform with fixed size that lasts for a given duration before folding itself
            </summary>
            <param name="platformType">The type of platform, 0-> Green, 1-> Purple</param>
            <param name="startPos">The initial position of the platform</param>
            <param name="positionRoute">The position route of the platform (Delta positioning, therefore the position of the platform will be the sum of <paramref name="startPos"/> and <paramref name="positionRoute"/></param>
            <param name="rotation">The angle of the platform</param>
            <param name="length">The length of the platform</param>
            <param name="duration">The duration of the platform</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Platform.#ctor(System.Int32,Microsoft.Xna.Framework.Vector2,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Func{UndyneFight_Ex.Entities.ICustomLength,System.Single},System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single})">
            <summary>
            Creates a platform
            </summary>
            <param name="platformType">The type of platform, 0-> Green, 1-> Purple</param>
            <param name="startPos">The initial position of the platform</param>
            <param name="positionRoute">The position route of the platform (Delta positioning, therefore the position of the platform will be the sum of <paramref name="startPos"/> and <paramref name="positionRoute"/></param>
            <param name="lengthRoute">The easing of the size of the platform</param>
            <param name="rotationRoute">The easing of the rotation of the platform</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Platform.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Platform.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Platform.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Platform.ChangeType">
            <summary>
            Changes the type of the platform (Purple becomes Green and Green becomes Purple)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Platform.ResetTime">
            <summary>
            Resets the <see cref="P:UndyneFight_Ex.Entities.Platform.AppearTime"/> to 0
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Bone">
            <summary>
            The base class for a bone, you should not call this
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Bone.ControllingBox">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Bone.Length">
            <summary>
            The length of the bone
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Bone.IsMasked">
            <summary>
            Whether the bone is masked inside of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Bone.ColorType">
            <summary>
            The color of the bone, 0-> White, 1-> Blue, 2-> Orange
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bone.ResetColor(Microsoft.Xna.Framework.Color)">
            <summary>
            Sets the drawing color of the bone
            </summary>
            <param name="color"></param>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Bone.AutoDepth">
            <summary>
            Whether the depth will be automatically sorted by their color type (Will override the original depth)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Bone.boneHead">
            <summary>
            The sprite of the bone's head
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Bone.boneTail">
            <summary>
            The sprite of the bone's tail
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Bone.boneWidth">
            <summary>
            The width of the bone
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bone.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bone.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bone.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bone.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bone.#ctor">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SideBone">
            <summary>
            The base class of a side bone, being <see cref="T:UndyneFight_Ex.Entities.UpBone"/>, <see cref="T:UndyneFight_Ex.Entities.DownBone"/>, <see cref="T:UndyneFight_Ex.Entities.LeftBone"/>, <see cref="T:UndyneFight_Ex.Entities.RightBone"/>
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SideBone.Speed">
            <summary>
            The speed of the bone
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SideBone.MissionLength">
            <summary>
            The target length of the bone
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SideBone.LengthLerpScale">
            <summary>
            The scale of the lerp animation of the length of the bone (Default 0.1f)
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.DownBone">
            <summary>
            A bone that sticks at the bottom of the box
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.DownBone.#ctor(System.Boolean,System.Single,System.Single)">
            <summary>
            Creates a bone at the bottom of the box
            </summary>
            <param name="way">Whether to spawn on the left or right side, true-> right, false-> left</param>
            <param name="length">The length of the bone</param>
            <param name="speed">The speed of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.DownBone.#ctor(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Creates a bone at the bottom of the box with a specified x coordinate
            </summary>
            <param name="way">Whether to spawn on the left or right side, true-> right, false-> left</param>
            <param name="position">The initial x coordinate of the bone</param>
            <param name="length">The length of the bone</param>
            <param name="speed">The speed of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.DownBone.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.UpBone">
            <summary>
            A bone that sticks to the top of the box
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.UpBone.#ctor(System.Boolean,System.Single,System.Single)">
            <summary>
            Creates a bone at the top of the box
            </summary>
            <param name="way">Whether to spawn on the left or right side, true-> right, false-> left</param>
            <param name="length">The length of the bone</param>
            <param name="speed">The speed of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.UpBone.#ctor(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Creates a bone at the top of the box with a specified x coordinate
            </summary>
            <param name="way">Whether to spawn on the left or right side, true-> right, false-> left</param>
            <param name="position">The initial x coordinate of the bone</param>
            <param name="length">The length of the bone</param>
            <param name="speed">The speed of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.UpBone.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.LeftBone">
            <summary>
            A bone that sticks to the left side of the box
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.LeftBone.#ctor(System.Boolean,System.Single,System.Single)">
            <summary>
            Creates a bone at the left side of the box
            </summary>
            <param name="way">Whether to spawn on the upper or lower side, true-> lower, false-> upper</param>
            <param name="length">The length of the bone</param>
            <param name="speed">The speed of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.LeftBone.#ctor(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Creates a bone at the left side of the box with a specified y coordinate
            </summary>
            <param name="way">Whether to spawn on the upper or lower side, true-> lower, false-> upper</param>
            <param name="position">The initial y coordinate of the bone</param>
            <param name="length">The length of the bone</param>
            <param name="speed">The speed of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.LeftBone.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.RightBone">
            <summary>
            A bone that sticks to the right side of the box
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.RightBone.#ctor(System.Boolean,System.Single,System.Single)">
            <summary>
            Creates a bone at the right side of the box
            </summary>
            <param name="way">Whether to spawn on the upper or lower side, true-> lower, false-> upper</param>
            <param name="length">The length of the bone</param>
            <param name="speed">The speed of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.RightBone.#ctor(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Creates a bone at the right side of the box
            </summary>
            <param name="way">Whether to spawn on the upper or lower side, true-> lower, false-> upper</param>
            <param name="position">The initial y coordinate of the bone</param>
            <param name="length">The length of the bone</param>
            <param name="speed">The speed of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.RightBone.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.CentreCircleBone">
            <summary>
            A rotating bone at the center of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.CentreCircleBone.RotateSpeed">
            <summary>
            The rotation speed of the bone
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.CentreCircleBone.MissionLength">
            <summary>
            The target length of the bone
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CentreCircleBone.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotating bone at the center of the box
            </summary>
            <param name="startRotation">The initial angle of the bone</param>
            <param name="rotateSpeed">The rotation speed of the bone</param>
            <param name="length">The length of the bone</param>
            <param name="duration">The duration of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CentreCircleBone.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SideCircleBone">
            <summary>
            A rotating bone at the side of the box (The box must be a square)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SideCircleBone.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotating bone at the side of the box (The box must be a square)
            </summary>
            <param name="startRotation">The initial angle of the bone</param>
            <param name="rotateSpeed">The angular speed of the bone</param>
            <param name="length">The length of the bone</param>
            <param name="duration">The duration of the bone</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SideCircleBone.RotateSpeed">
            <summary>
            The angular speed of the bone
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SideCircleBone.MissionLength">
            <summary>
            The target length of the bone
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SideCircleBone.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SwarmBone">
            <summary>
            A bone that cycles inside the box
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SwarmBone.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a bone that cycles inside the box
            </summary>
            <param name="length">The length of the bone</param>
            <param name="roundTime">The duration of one cycle</param>
            <param name="startTime">The initial time in the cycle</param>
            <param name="duration">The duration of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SwarmBone.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.CustomBone">
            <summary>
            A bone with custom parameters
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.CustomBone.AlphaIncrease">
            <summary>
            Whether the bone will have a fade in animation
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.CustomBone.screenC">
            <summary>
            The range the bone can exist in (The bone will be disposed when it leaves this rectangle)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.CustomBone.LengthRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.CustomBone.CentrePosition">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.CustomBone.LengthRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.CustomBone.AlphaRoute">
            <summary>
            The alpha easing function of the bone
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.CustomBone.AppearTime">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.CustomBone.RotationDelta">
            <summary>
            The extra rotation angle of the bone
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomBone.#ctor(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},UndyneFight_Ex.Entities.EaseUnit{System.Single},System.Single)">
            <summary>
            Creates a custom bone with position easing, rotation easing, and fixed length
            </summary>
            <param name="positionRoute">The easing of the position of the bone</param>
            <param name="rotationRoute">The easing of the rotation of the bone</param>
            <param name="length">The length of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomBone.#ctor(Microsoft.Xna.Framework.Vector2,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},UndyneFight_Ex.Entities.EaseUnit{System.Single},System.Single,System.Single)">
            <summary>
            Creates a custom bone with a custom position route, rotation easing, fixed length, and specified duration
            </summary>
            <param name="startPos">The initial position of the bone</param>
            <param name="positionRoute">The route of the position of the bone (Delta positioning, therefore the position of the bone will be the sum of <paramref name="startPos"/> and <paramref name="positionRoute"/></param>
            <param name="rotationRoute">The easing of the rotation of the bone</param>
            <param name="length">The length of the bone</param>
            <param name="duration">The duration of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomBone.#ctor(Microsoft.Xna.Framework.Vector2,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Single,System.Single,System.Single)">
            <summary>
            Creates a custom bone with a custom position route, fixed rotation, fixed length, and specified duration
            </summary>
            <param name="startPos">The initial position of the bone</param>
            <param name="positionRoute">The route of the position of the bone (Delta positioning, therefore the position of the bone will be the sum of <paramref name="startPos"/> and <paramref name="positionRoute"/></param>
            <param name="rotation">The rotation of the bone</param>
            <param name="length">The length of the bone</param>
            <param name="duration">The duration of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomBone.#ctor(Microsoft.Xna.Framework.Vector2,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Single,System.Single)">
            <summary>
            Creates a custom bone with a custom position route, fixed rotation, and fixed length
            </summary>
            <param name="startPos">The initial position of the bone</param>
            <param name="positionRoute">The route of the position of the bone (Delta positioning, therefore the position of the bone will be the sum of <paramref name="startPos"/> and <paramref name="positionRoute"/></param>
            <param name="rotation">The rotation of the bone</param>
            <param name="length">The length of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomBone.#ctor(Microsoft.Xna.Framework.Vector2,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Func{UndyneFight_Ex.Entities.ICustomLength,System.Single},System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single})">
            <summary>
            Creates a custom bone with custom position route, custom length route, and custom position route
            </summary>
            <param name="startPos">The initial position of the bone</param>
            <param name="positionRoute">The route of the position of the bone (Delta positioning, therefore the position of the bone will be the sum of <paramref name="startPos"/> and <paramref name="positionRoute"/></param>
            <param name="rotationRoute">The route of the position of the bone (Delta positioning, therefore the position of the bone will be the sum of <see cref="P:UndyneFight_Ex.Entities.CustomBone.RotationDelta"/> and <paramref name="rotationRoute"/></param>
            <param name="lengthRoute">The route of the length of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomBone.#ctor(Microsoft.Xna.Framework.Vector2,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single},System.Single)">
            <summary>
            Creates a custom bone with custom position route, custom position route, and a fixed length
            </summary>
            <param name="startPos">The initial position of the bone</param>
            <param name="positionRoute">The route of the position of the bone (Delta positioning, therefore the position of the bone will be the sum of <paramref name="startPos"/> and <paramref name="positionRoute"/></param>
            <param name="rotationRoute">The route of the position of the bone (Delta positioning, therefore the position of the bone will be the sum of <see cref="P:UndyneFight_Ex.Entities.CustomBone.RotationDelta"/> and <paramref name="rotationRoute"/></param>
            <param name="length">The length of the bone</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomBone.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Boneslab">
            <summary>
            A boneslab (The bones on the side of the box)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Boneslab.BoneProtruded">
            <summary>
            The <see cref="T:System.Action"/> to execute when the boneslab is created (When the warning ends)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Boneslab.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Boneslab.ColorType">
            <summary>
            The color of the boneslab, 0-> White, 1-> Blue (Aqua), 2-> Orange
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Boneslab.AppearTime">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Boneslab.ControllingBox">
            <summary>
            The box assigned to the boneslab
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Boneslab.LengthRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Boneslab.LengthRouteParam">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Boneslab.#ctor(System.Single,System.Int32,System.Int32,System.Func{UndyneFight_Ex.Entities.ICustomLength,System.Single},System.Single[])">
            <summary>
            Creates a boneslab
            </summary>
            <param name="rotation">The rotation of the wall (Must be a multiple of 90)</param>
            <param name="appearDelay">The duration of the warning before spawning</param>
            <param name="totalTime">The duration of the boneslab</param>
            <param name="lengthRoute">The route of the height of the boneslab</param>
            <param name="lengthRouteParam">The parameters of the route</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Boneslab.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a boneslab
            </summary>
            <param name="rotation">The rotation of the wall (Must be a multiple of 90)</param>
            <param name="height">The height of the boneslab</param>
            <param name="appearDelay">The duration of the warning before spawning</param>
            <param name="totalTime">The duration of the boneslab</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Boneslab.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Boneslab.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Boneslab.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.FireBall">
            <summary>
            A fireball
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.FireBall.#ctor(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Creates a fireball with the given position easing
            </summary>
            <param name="_positionRoute">The easing of the position of the fireball</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.FireBall.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.FireBall.Draw">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.GasterBlaster">
            <summary>
            The base class for a Gaster Blaster, you should not call this
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.GasterBlaster.AppearVolume">
            <summary>
            The volume of the blaster spawning (Default 0.85f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.GasterBlaster.ShootVolume">
            <summary>
            The volume of the blaster shooting (Default 0.8f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.GasterBlaster.IsGBMute">
            <summary>
            Whether will the blaster have no sound played
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.GasterBlaster.IsShake">
            <summary>
            Whether the blaster shakes the screen when fired
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.GasterBlaster.ColorIsTheme">
            <summary>
            Whether the color of the blaster is the theme color
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.GasterBlaster.OverrideRotation">
            <summary>
            Overrides the default rotating behavior
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GasterBlaster.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GasterBlaster.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GasterBlaster.Delay(System.Single)">
            <summary>
            Delays the blaster by the given frames
            </summary>
            <param name="delay">The frames to delay</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GasterBlaster.Stop(System.Single)">
            <summary>
            Stops the blaster for the given frames
            </summary>
            <param name="delay">The frames to stop</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GasterBlaster.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.GreenSoulGB">
            <summary>
            A Green Soul Blaster
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.GreenSoulGB.Way">
            <summary>
            The direction of the blaster
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GreenSoulGB.#ctor(System.Single,System.String,System.Int32,System.Single)">
            <summary>
            Creates a green soul blaster
            </summary>
            <param name="shootShieldTime">The time for the blaster to fire</param>
            <param name="way">The string direction of the blaster</param>
            <param name="color">The color type of the blaster</param>
            <param name="duration">The duration of the blaster</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GreenSoulGB.#ctor(System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a green soul blaster
            </summary>
            <param name="shootShieldTime">The time for the blaster to fire</param>
            <param name="way">The direction of the blaster</param>
            <param name="color">The color type of the blaster</param>
            <param name="duration">The duration of the blaster</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.GreenSoulGB.DrawingColor">
            <summary>
            The drawing color type of the blaster
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GreenSoulGB.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GreenSoulGB.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GreenSoulGB.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GreenSoulGB.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.NormalGB">
            <summary>
            A normal gaster blaster
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.NormalGB.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates a blaster that automatically aims towards the player
            </summary>
            <param name="missionPlace">Target position</param>
            <param name="spawnPlace">Initial position</param>
            <param name="size">Size of the blaster(Width, Height), a small blaster is (1, 0.5f) and a big blaster is (1, 1)</param>
            <param name="waitingTime">Time required to pass before firing</param>
            <param name="duration">Duration of the blast</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.NormalGB.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Creates a blaster that aims to the given angle
            </summary>
            <param name="missionPlace">Target position</param>
            <param name="spawnPlace">Initial position</param>
            <param name="size">Size of the blaster(Width, Height), a small blaster is (1, 0.55f) and a big blaster is (1, 1)</param>
            <param name="rotation">The target rotation of the blaster</param>
            <param name="waitingTime">Time required to pass before firing</param>
            <param name="duration">Duration of the blast</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.NormalGB.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.NormalGB.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Whether the enable the bug fix for reverse collision
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.NormalGB.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.GunBullet">
            <summary>
            A (Sudden Changes) bullet
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GunBullet.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates a (Sudden Changes) bullet
            </summary>
            <param name="targetCentre">The position of the target</param>
            <param name="delayTime">The time delay of the bullet to fire</param>
            <param name="rotation">The angle of the bullet with respect to the target</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GunBullet.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single[])">
            <summary>
            Creates multiple (Sudden Changes) bullets
            </summary>
            <param name="targetCentre">The position of the target</param>
            <param name="delayTime">The time delay of the bullets to fire</param>
            <param name="rotations">The angles of the bullets with respect to the target</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GunBullet.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.GunBullet.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Knife">
            <summary>
            A knife beam
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Knife.#ctor(System.Single,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single})">
            <summary>
            Creates a knife beam
            </summary>
            <param name="delay">The duration of the warning</param>
            <param name="vecease">The easing for the position</param>
            <param name="rotease">The easing for the rotation</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Knife.#ctor(System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a knife beam
            </summary>
            <param name="delay">The duration of the warning</param>
            <param name="centre">The centre of the beam</param>
            <param name="rot">The rotation of the beam</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Knife.AppearTime">
            <summary>
            The appear time of the knife beam
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Knife.DrawColor">
            <summary>
            The color of the beam
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Knife.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Knife.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Knife.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Knife.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Spider">
            <summary>
            A spider
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Spider.#ctor(UndyneFight_Ex.Entities.EaseUnit{System.Single},UndyneFight_Ex.Entities.EaseUnit{System.Single})">
            <summary>
            Creates a spider with the given x and y easing
            </summary>
            <param name="x">The easing of the x coordinate of the spider</param>
            <param name="y">The easing of the y coordinate of the spider</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Spider.#ctor(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single})">
            <summary>
            Creates a spider with the given position easing and rotation
            </summary>
            <param name="_positionRoute">The easing of the position of the spider</param>
            <param name="Rotation">The rotation of the spider (Default the direction of the easing)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Spider.#ctor(System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single})">
            <summary>
            Creates a spider with the given position easing and rotation easing
            </summary>
            <param name="_positionRoute">The easing of the position of the spider</param>
            <param name="_rotationRoute">The easing of the rotation of the spider</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Spider.#ctor">
            <summary>
            Creates a spider with no attributes
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.LineSpider">
            <summary>
            A spider on a line
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.LineSpider.Speed">
            <summary>
            The speed of the spider
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.LineSpider.#ctor(System.Int32,System.Boolean,System.Single)">
            <summary>
            Creates a spider on a line
            </summary>
            <param name="CountLine">The line to create on</param>
            <param name="IsLeftOrRight">True for coming from the left, False for coming from the right</param>
            <param name="Speed">The speed of the spider</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.LineSpider.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.VerticalSpider">
            <summary>
            A spider that moves vertically
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.VerticalSpider.Speed">
            <summary>
            The speed of the spider
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.VerticalSpider.#ctor(System.Single,System.Boolean,System.Single)">
            <summary>
            Creates a vertical spider
            </summary>
            <param name="X">The x coordinate of the spider</param>
            <param name="IsUpOrDown">True for coming from up, False for coming from down</param>
            <param name="Speed">The speed of the spider</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.VerticalSpider.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Spear">
            <summary>
            Base class of a spear (You should not create this)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Spear.IsHidden">
            <summary>
            Whether the spear will be drawn exclusively inside the box or not
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Spear.ForceDispose">
            <summary>
            Forces the spear to dispose when offscreen
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Spear.DrawingColor">
            <summary>
            The drawing color of the spear
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Spear.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Spear.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Spear.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Spear.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Spear.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.NormalSpear">
            <summary>
            A normal spear
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.NormalSpear.Speed">
            <summary>
            The speed of the spear (Default 1.7f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.NormalSpear.Acceleration">
            <summary>
            The acceleration of the spear (Default 0.12f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.NormalSpear.IsMute">
            <summary>
            Whether the spear won't play the sound effects
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.NormalSpear.DelayTargeting">
            <summary>
            Whether will it aim at the soul or not
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.NormalSpear.WaitingTime">
            <summary>
            The time to wait before launch (Default 59 frames, a little less than 1 second (62.5f))
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.NormalSpear.Rebound">
            <summary>
            Whether the spear will bounce when reaching the <see cref="P:UndyneFight_Ex.Entities.NormalSpear.ReboundVertices"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.NormalSpear.ReboundCount">
            <summary>
            The amount of times to bounce before stopping to bounce
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.NormalSpear.ReboundVertices">
            <summary>
            The list of vertices to bounce off from
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.NormalSpear.Duration">
            <summary>
            The duration of the spear (Default 200 frames)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.NormalSpear.#ctor(Microsoft.Xna.Framework.Vector2,System.Nullable{System.Single},System.Single)">
            <summary>
            Creates a normal spear
            </summary>
            <param name="centre">The position to create the spear</param>
            <param name="rotation">The angle of the spear (Default aiming towards the player)</param>
            <param name="speed">The speed of the spear (Default 1.7f)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.NormalSpear.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Pike">
            <summary>
            A spear with alpha fade in animation
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Pike.Speed">
            <summary>
            The speed of the spear (Default 9.7f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Pike.Acceleration">
            <summary>
            The acceleration of the spear (Default 0.41f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Pike.IsSpawnMute">
            <summary>
            Whether the spawn sound is muted
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Pike.IsShootMute">
            <summary>
            Whether the shooting sound is muted
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Pike.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates a spear with alpha fade in animation
            </summary>
            <param name="centre">The position to create the spear</param>
            <param name="rotation">The angle of the spear</param>
            <param name="waitingTime">The delay before the spear shoots</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Pike.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Creates a spear with alpha fade in animation
            </summary>
            <param name="centre">The position to create the spear</param>
            <param name="rotation">The angle of the spear</param>
            <param name="speed">The speed of the spear</param>
            <param name="waitingTime">The delay before the spear shoots</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Pike.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SwarmSpear">
            <summary>
            Creates a spear that aims towards a center
            </summary>
            <param name="rotateCentre">The center of the circle</param>
            <param name="linearSpeed">The speed of the spear</param>
            <param name="distance">The initial distance between the spear and the target</param>
            <param name="rotation">The angle of the spear with respect to the center</param>
            <param name="waitingTime">The time delay before the spear shoots</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SwarmSpear.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a spear that aims towards a center
            </summary>
            <param name="rotateCentre">The center of the circle</param>
            <param name="linearSpeed">The speed of the spear</param>
            <param name="distance">The initial distance between the spear and the target</param>
            <param name="rotation">The angle of the spear with respect to the center</param>
            <param name="waitingTime">The time delay before the spear shoots</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SwarmSpear.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.CircleSpear">
            <summary>
            Creates a spear that moves around the target with a circular motion
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CircleSpear.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a spear that moves around the target with a circular motion
            </summary>
            <param name="rotateCentre">The center of the circle</param>
            <param name="rotateSpeed">The angular speed of the spear</param>
            <param name="linearSpeed">The speed of the spear after shooting</param>
            <param name="distance">The initial distance between the spear and the target</param>
            <param name="rotation">The angle of the spear with respect to the center</param>
            <param name="rotateFriction">The friction of the angular rotation (Default 0.01f)</param>
            <param name="rotate_extra">The extra angle of the spear (Default 0)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CircleSpear.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CircleSpear.Draw">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.CustomSpear">
            <summary>
            A spear with custom motion (Initial alpha is 0, be aware)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.CustomSpear.CentrePosition">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomSpear.#ctor(System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomSpear.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomSpear.AlphaIncrease(System.Single,System.Single)">
            <summary>
            Increases the alpha of the spear
            </summary>
            <param name="time">The duration of the alpha increase</param>
            <param name="val">The amount of alpha to increase (Default 1)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.CustomSpear.AlphaDecrease(System.Single,System.Nullable{System.Single},System.Nullable{System.Boolean})">
            <summary>
            Decreases the alpha of the spear
            </summary>
            <param name="time">The duration of the alpha decrease</param>
            <param name="val">The amount of alpha to decrease (Default entirely)</param>
            <param name="willDispose">Whether the spear will be disposed if the alpha reaches 0 (Default true)</param>
        </member>
        <member name="T:UndyneFight_Ex.Entities.ShootableBlock">
            <summary>
            A block that will be destroyed upon being shot at
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ShootableBlock.#ctor(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Creates a shootable block
            </summary>
            <param name="centreEasing">The easing of the position</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ShootableBlock.OnShot(UndyneFight_Ex.Entities.SoulBullet)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.ToughBlock">
            <summary>
            A block that cannot be destroyed upon being shot at
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ToughBlock.#ctor(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Creates a tough block
            </summary>
            <param name="centreEasing">The easing of the position</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ToughBlock.OnShot(UndyneFight_Ex.Entities.SoulBullet)">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Bomb">
            <summary>
            A shootable bomb
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bomb.#ctor(System.Single,System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2})">
            <summary>
            Creates a shootable bomb
            </summary>
            <param name="explodeDelay">The delay before exploding when shot</param>
            <param name="ease">The eassing of the position</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bomb.OnShot(UndyneFight_Ex.Entities.SoulBullet)">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Bomb.AbleLink">
            <summary>
            Whether the bomb can be triggered by other explosions
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Bomb.Destructive">
            <summary>
            Whether the bomb can destroy other <see cref="T:UndyneFight_Ex.Entities.BulletShootable"/> objects
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bomb.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Bomb.Explode">
            <summary>
            Explode the bomb
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SoulBullet">
            <summary>
            A yellow soul bullet
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SoulBullet.#ctor(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Creates a yellow soul bullet
            </summary>
            <param name="heart">The heart to create the bullet from</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SoulBullet.PositionRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SoulBullet.RotationRoute">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SoulBullet.RotationRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SoulBullet.PositionRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SoulBullet.AppearTime">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SoulBullet.CentrePosition">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SoulBullet.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.BulletShootable.OnShot(UndyneFight_Ex.Entities.SoulBullet)">
            <summary>
            Event to occur when the barrage is shot
            </summary>
            <param name="bullet">The soul bullet that shot it</param>
        </member>
        <member name="T:UndyneFight_Ex.Entities.ParasolMett">
            <summary>
            A mettaton robot with parasol
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ParasolMett.WaveTime">
            <summary>
            The rotation easing duration
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ParasolMett.BulletDepth">
            <summary>
            The depth of the thrown bullet
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ParasolMett.#ctor(UndyneFight_Ex.Entities.EaseUnit{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Creates a mettaton with parasol
            </summary>
            <param name="centreEasing">The easing of the position</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ParasolMett.InsertShot(System.Int32,System.Single)">
            <summary>
            Adds the amount of heart fired with the given delay
            </summary>
            <param name="val">The amount of hearts to throw</param>
            <param name="time">The delay between each throw</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ParasolMett.OnShot(UndyneFight_Ex.Entities.SoulBullet)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ParasolMett.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Shattered">
            <summary>
            A shattered box
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Shattered.#ctor(UndyneFight_Ex.Entity)">
            <summary>
            Creates a shattered box
            </summary>
            <param name="origin">The origin entity</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Shattered.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Shattered.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.ICustomMotion">
            <summary>
            Interface for entities that has motion control
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomMotion.PositionRoute">
            <summary>
            The position function of the entity, use <see cref="T:UndyneFight_Ex.Entities.Motions.PositionRoute"/> or <see cref="T:UndyneFight_Ex.Entities.SimplifiedEasing"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomMotion.RotationRoute">
            <summary>
            The rotation function of the entity, use <see cref="T:UndyneFight_Ex.Entities.Motions.RotationRoute"/> or <see cref="T:UndyneFight_Ex.Entities.SimplifiedEasing"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomMotion.RotationRouteParam">
            <summary>
            The parameters for the rotation route
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomMotion.PositionRouteParam">
            <summary>
            The parameters for the position route
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomMotion.AppearTime">
            <summary>
            The frames elapsed after being created
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomMotion.Rotation">
            <summary>
            The rotation of the entity
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomMotion.CentrePosition">
            <summary>
            The centre position of the entity
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.ICustomLength">
            <summary>
            Interface for entities that has length control (Bones)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomLength.AppearTime">
            <summary>
            The frames elapsed after being created
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomLength.LengthRoute">
            <summary>
            The length easing function of the entity, use <see cref="T:UndyneFight_Ex.Entities.Motions.LengthRoute"/> or <see cref="T:UndyneFight_Ex.Entities.SimplifiedEasing"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.ICustomLength.LengthRouteParam">
            <summary>
            The parameters for the length route
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Motions">
            <summary>
            Set motions for entities
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Motions.RotationRoute">
            <summary>
            Rotation route for entities
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.RotationRoute.sin">
            <summary>
            Sinusoidal rotation motion, [Intensity, Wavelength, Initial Time, Constant]<br></br>
            The formula is: Intensity * Sin((AppearTime + Initial Time) / Wavelength * PI * 2) + Constant
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.RotationRoute.linear">
            <summary>
            Linear rotation, [Rotation speed, Initial Angle]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.RotationRoute.stableValue">
            <summary>
            Stable value, [Value]
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Motions.LengthRoute">
            <summary>
            Length route for entities
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.LengthRoute.autoFold">
            <summary>
            Will automatically fold when duration has been reached, [Length, Duration]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.LengthRoute.sin3">
            <summary>
            Cubic Sinusoidal motion, [Intensity, Wavelength, Initial Time, Constant]
            The formula is: Intensity * Sin((AppearTime + Initial Time) / Wavelength * PI * 2) ^ 3 + Constant
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.LengthRoute.stableValue">
            <summary>
            Stable value, [Value]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.LengthRoute.sin">
            <summary>
            Sinusoidal motion, [Intensity, Wavelength, Initial Time, Constant]
            /// The formula is: Intensity * Sin((AppearTime + Initial Time) / Wavelength * PI * 2) + Constant
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Motions.PositionRoute">
            <summary>
            Position route for entities
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.stableValue">
            <summary>
            Static position
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.cameFromUp">
            <summary>
            Begins at the top, extends to the lower side
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.cameFromDown">
            <summary>
            Begins at the bottom, extends to the upper side
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.cameFromLeft">
            <summary>
            Begins at the left, extends to the right side
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.cameFromRight">
            <summary>
            Begins at the right, extends to the left side
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.linear">
            <summary>
            Linear motion, [x speed, y speed]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.XAxisSin">
            <summary>
            Linear Horizontal movement + Sinusoidal Vertical Movement, [X speed, Intensity, Wavelength, Initial Time]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.YAxisSin">
            <summary>
            Linear Vertical movement + Sinusoidal Horizontal Movement, [Y speed, Intensity, Wavelength, Initial Time]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.circle">
            <summary>
            Linear Circular motion, [Distance, Angular Speed, Initial Angle]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.XAccAxisSin">
            <summary>
            Linear Horizontal Accelerative movement + Sinusoidal Vertical Movement, [X speed, X acceleration, Intensity, Wavelength, Initial Time]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.XAccYLinear">
            <summary>
            Linear Horizontal Accelerative movement + Linear Vertical movement, [X speed, X acceleration, Y speed]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Motions.PositionRoute.XYAxisSin">
            <summary>
            Sinusoidal Vertical Movement + Sinusoidal Horizontal Movement, [Y Intensity, Y Wavelength, Y Initial Time, X Intensity, X Wavelength, X Initial Time]
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.InstantEvent">
            <summary>
            Invokes an action after a given delay
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.InstantEvent.#ctor(System.Single,System.Action)">
            <summary>
            Invoke an action after the given delay
            </summary>
            <param name="timeDelay">The delay to invoke the action</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.InstantEvent.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.TimeRangedEvent">
            <summary>
            Invoke an action that lasts for a duration after a delay
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.TimeRangedEvent.#ctor(System.Single,System.Single,System.Action)">
            <summary>
            Invoke an action that lasts for the given duration after the given delay
            </summary>
            <param name="timeDelay">The delay to invoke the action</param>
            <param name="duration">The duration of the action to invoke</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.TimeRangedEvent.#ctor(System.Single,System.Action)">
            <summary>
            Invoke an action that lasts for the given duration
            </summary>
            <param name="duration">The duration of the action to invoke</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.TimeRangedEvent.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.BackGround">
            <summary>
            Background for legacy engine
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.BoxVertex">
            <summary>
            A custom box vertex
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.BoxVertex.CurrentPosition">
            <summary>
            The current position of the vertex
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.BoxVertex.MissionPosition">
            <summary>
            The target position of the vertex
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.BoxVertex.ToMissionDistance">
            <summary>
            Distance towards the target position
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.BoxVertex.ID">
            <summary>
            The ID of the vertex
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.BoxVertex.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a box vertex with a given position
            </summary>
            <param name="pos">The position of the vertex</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.BoxVertex.#ctor">
            <summary>
            Creates a box vertex
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.BoxVertex.Previous">
            <summary>
            The previous box vertex
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.BoxVertex.Move(System.Single)">
            <summary>
            Moves the box position by 1 frame in the given lerp scale
            </summary>
            <param name="scale">The lerp scale to move</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.BoxVertex.InstantMove(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the box vertex to it's <see cref="P:UndyneFight_Ex.Entities.BoxVertex.MissionPosition"/>
            </summary>
            <param name="position">The <see cref="P:UndyneFight_Ex.Entities.BoxVertex.MissionPosition"/> of the vertex</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.BoxVertex.op_Implicit(UndyneFight_Ex.Entities.BoxVertex)~Microsoft.Xna.Framework.Vector2">
            <summary>
            Converts the box vertex into a Vector2
            </summary>
            <param name="v">The box vertex to convert</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.BoxVertex.op_Implicit(Microsoft.Xna.Framework.Vector2)~UndyneFight_Ex.Entities.BoxVertex">
            <summary>
            Converts a Vector2 to box vertex
            </summary>
            <param name="v">The Vector2 to convert</param>
        </member>
        <member name="T:UndyneFight_Ex.Entities.FightBox">
            <summary>
            The box during fight
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.FightBox.Vertices">
            <summary>
            The list of vertices of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.FightBox.instance">
            <summary>
            The <see cref="T:UndyneFight_Ex.Entities.FightBox"/> instance
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.FightBox.boxes">
            <summary>
            The list of Fight Boxes
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.FightBox.MoveTo(System.Object)">
            <summary>
            Moves the box to the given position
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.FightBox.InstanceMove(System.Object)">
            <summary>
            Immediately moves the box to the given position
            </summary>
            <param name="v"></param>
        </member>
        <member name="F:UndyneFight_Ex.Entities.FightBox.detect">
            <summary>
            The heart assigned to the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.FightBox.Detect">
            <summary>
            The heart assigned to the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.FightBox.MovingScale">
            <summary>
            The lerp value of the box (Default 0.15f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.FightBox.GreenSoulAlpha">
            <summary>
            The alpha of the box in green soul mode
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.FightBox.InstantSetAlpha(System.Single)">
            <summary>
            Instantly sets the alpha of the box
            </summary>
            <param name="alpha">The alpha of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.FightBox.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.FightBox.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.FightBox.#ctor(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Creates a box
            </summary>
            <param name="heart">The heart to assign to the box</param>
        </member>
        <member name="T:UndyneFight_Ex.Entities.VertexBox">
            <summary>
            A box with user defined vertices
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.VertexBox.#ctor(UndyneFight_Ex.Entities.Player.Heart,UndyneFight_Ex.Entities.RectangleBox)">
            <summary>
            Creates a vertex box
            </summary>
            <param name="heart">The heart to assign the box to</param>
            <param name="rectangleBox">The original rectangle box</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.VertexBox.InstanceMove(System.Object)">
            <summary>
            Instantly move all the vertices to the given coordinates
            </summary>
            <param name="v">The list of coordinates</param>
            <exception cref="T:System.ArgumentException">If the argument is not a Vector2[]</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the length of the array is not equal to the number of vertices</exception>
        </member>
        <member name="M:UndyneFight_Ex.Entities.VertexBox.MoveTo(System.Object)">
            <summary>
            Lerps all the vertices to the given coordinates
            </summary>
            <param name="v">The list of coordinates</param>
            <exception cref="T:System.ArgumentException">If the argument is not a Vector2[]</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the length of the array is not equal to the number of vertices</exception>
        </member>
        <member name="M:UndyneFight_Ex.Entities.VertexBox.Split(System.Int32,System.Single)">
            <summary>
            Creates a new vertex from the given vertex
            </summary>
            <param name="originID">The ID of the vertex</param>
            <param name="scale">The lerp scale between the given vertex and the next one</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:UndyneFight_Ex.Entities.VertexBox.SetPosition(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the target position of the given vertex
            </summary>
            <param name="originID">The ID of the vertex</param>
            <param name="position">The target position</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.VertexBox.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.RectangleBox">
            <summary>
            A rectangle box
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.RectangleBox.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.RectangleBox.#ctor(UndyneFight_Ex.CollideRect)">
            <summary>
            Creates a rectangle box using the given <see cref="T:UndyneFight_Ex.CollideRect"/>
            </summary>
            <param name="Area">The area of the rectangle</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.RectangleBox.#ctor(UndyneFight_Ex.Entities.Player.Heart,System.Nullable{UndyneFight_Ex.CollideRect})">
            <summary>
            Creates a rectangle box with a heart assigned to it
            </summary>
            <param name="heart">The heart to assign the box to</param>
            <param name="area">The size of the box</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.RectangleBox.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.RectangleBox.MoveTo(System.Object)">
            <summary>
            Lerps the box to the target position
            </summary>
            <param name="cl">The <see cref="T:UndyneFight_Ex.CollideRect"/> to move to</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.RectangleBox.InstanceMove(System.Object)">
            <summary>
            Instantly moves the box to the target position
            </summary>
            <param name="cl">The <see cref="T:UndyneFight_Ex.CollideRect"/> to move to</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.RectangleBox.Left">
            <summary>
            The x coordinate of the left side of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.RectangleBox.Up">
            <summary>
            The y coordinate of the top side of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.RectangleBox.Right">
            <summary>
            The x coordinate of the right side of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.RectangleBox.Down">
            <summary>
            The Y coordinate of the down side of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.RectangleBox.Width">
            <summary>
            The width of the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.RectangleBox.Height">
            <summary>
            The height of the box
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Line">
            <summary>
            The class for a line effect
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.Alpha">
            <summary>
            The alpha of the line
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.Width">
            <summary>
            The width of the line (Default 3 pixels)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.DrawingColor">
            <summary>
            The color of the line
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.MultiColor">
            <summary>
            Whether the line contains multiple colors
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.DrawingColors">
            <summary>
            The colors of the line (When <see cref="P:UndyneFight_Ex.Entities.Line.MultiColor"/> is true)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.VerticalMirror">
            <summary>
            Whether the line will be reflected vertically
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.TransverseMirror">
            <summary>
            Whether the line will be reflected horizontally
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.ObliqueMirror">
            <summary>
            Whether the line will be reflected diagonally
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.VerticalLine">
            <summary>
            Whether the line is a vertical line
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.PreMultiplyAlpha">
            <summary>
            Whether the line will have pre-multiplied alpha
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a line
            </summary>
            <param name="vec1">The position of the first end of the line</param>
            <param name="vec2">The position of the second end of the line</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a line
            </summary>
            <param name="centre">The center of the line</param>
            <param name="rotation">The rotation of the line</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.#ctor(System.Single,System.Single)">
            <summary>
            Creates a line with the y coordinate being 240
            </summary>
            <param name="Xcentre">The x coordinate of the line</param>
            <param name="rotation">The rotation of the line</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.#ctor(System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2})">
            <summary>
            Creates a line
            </summary>
            <param name="easing1">The easing of the first vertex</param>
            <param name="easing2">The easing of the second vertex</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.#ctor(Microsoft.Xna.Framework.Vector2,System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single})">
            <summary>
            Creates a line
            </summary>
            <param name="centre">The center of the line</param>
            <param name="rotationEasing">The easing of the rotation of the line</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.#ctor(System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single})">
            <summary>
            Creates a line
            </summary>
            <param name="centreEasing">The easing of the center of the line</param>
            <param name="rotationEasing">The easing of the rotation of the line</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.#ctor(System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single},System.Func{UndyneFight_Ex.Entities.ICustomMotion,System.Single})">
            <summary>
            Creates a line
            </summary>
            <param name="centreEasing">The easing of the center of the line</param>
            <param name="rotationEasing">The easing of the rotation of the line</param>
            <param name="lengthEasing">The easing of the length of the line from its center</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.Draw">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.AppearTime">
            <summary>
            The frames elapsed after the line was created
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.Centre">
            <summary>
            The centre position of the line
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Line.Rotation">
            <summary>
            The rotation of the line
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.AlphaDecrease(System.Single,System.Nullable{System.Single},System.Nullable{System.Boolean})">
            <summary>
            Fades out the line for the given duration
            </summary>
            <param name="time">The time taken for the line to fade out</param>
            <param name="val">The amount of alpha to decrease (Default entirely)</param>
            <param name="willDispose">Whether the line will automatically dispose when the alpha reaches 0 (Default true)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.DelayAlphaDecrease(System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Fades out the line by the given amount for the given duration after the given delay
            </summary>
            <param name="delay">The delay before the line to fade</param>
            <param name="time">The time taken for the line to fade</param>
            <param name="val">The amount to fade out (Default entirely)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.AlphaIncrease(System.Single,System.Single)">
            <summary>
            Fades in the line by the given duration by the given value
            </summary>
            <param name="time">The time taken for the line to fade in</param>
            <param name="val">The amount to fade in (Default 1)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.DelayAlphaIncrease(System.Single,System.Single,System.Single)">
            <summary>
            Fades in the line by the given amount for the given duration after the given delay
            </summary>
            <param name="delay">The delay before the line to fade</param>
            <param name="time">The time taken for the line to fade</param>
            <param name="val">The amount to fade in (Default 1)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.AlphaDecreaseAndIncrease(System.Single,System.Single)">
            <summary>
            Decreases the alpha (time / 4) of the line and then increases it (time * 3 / 4)
            </summary>
            <param name="time">The time taken to complete the entire animation</param>
            <param name="val">The amount alpha to fade (Default 1)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.AlphaIncreaseAndDecrease(System.Single,System.Single)">
            <summary>
            Increases the alpha (time / 4) of the line and then decreases it (time * 3 / 4)
            </summary>
            <param name="time">The time taken to complete the entire animation</param>
            <param name="val">The amount alpha to fade (Default 1)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.Split(System.Boolean)">
            <summary>
            Creates a clone of the line
            </summary>
            <param name="clear">Whether to return the original line (true) or the splitted line (false)</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.AddShadow(System.Single,System.Single)">
            <summary>
            Inserts a retention effect, the exact same as <see cref="M:UndyneFight_Ex.Entities.Line.InsertRetention(UndyneFight_Ex.Entities.Line.RetentionEffect)"/>
            </summary>
            <param name="timeLag">The delay before the effect spawns</param>
            <param name="alphaFactor">The alpha of the effect</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.AddShadow(UndyneFight_Ex.Entities.Line.RetentionEffect)">
            <summary>
            Inserts a retention effect, the exact same as <see cref="M:UndyneFight_Ex.Entities.Line.InsertRetention(UndyneFight_Ex.Entities.Line.RetentionEffect)"/>
            </summary>
            <param name="r">The retention effect</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.AddShadow(UndyneFight_Ex.Entities.Line.RetentionEffect[])">
            <summary>
            Inserts retention effects, the exact same as <see cref="M:UndyneFight_Ex.Entities.Line.InsertRetention(UndyneFight_Ex.Entities.Line.RetentionEffect)"/>
            </summary>
            <param name="r">The retention effects</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.InsertRetention(UndyneFight_Ex.Entities.Line.RetentionEffect)">
            <summary>
            Inserts a retention effect
            </summary>
            <param name="effect">The retention effect</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.DelayDispose(System.Single)">
            <summary>
            Disposes itself after the given amount of time
            </summary>
            <param name="v">The delay before disposing</param>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Line.RetentionEffect">
            <summary>
            The retention effect of the line
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.RetentionEffect.Start">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.RetentionEffect.#ctor(System.Single,System.Single)">
            <summary>
            Creates a retention effect
            </summary>
            <param name="timeLag">The delay before it spawns</param>
            <param name="alphaFactor">The alpha of the line retention (Default 1)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.RetentionEffect.#ctor(System.Single,System.Func{System.Single,System.Single})">
            <summary>
            Creates a retention effect
            </summary>
            <param name="timeLag">The delay before it spawns</param>
            <param name="alphaGenerator">The easing of the alpha of the line retention effect</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.RetentionEffect.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Line.RetentionEffect.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.ParticleGather">
            <summary>
            Gathers particles
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ParticleGather.#ctor(Microsoft.Xna.Framework.Vector2,System.Int32,System.Single,Microsoft.Xna.Framework.Color,System.Single[],System.Single[])">
            <summary>
            Creates particles that gather to the center
            </summary>
            <param name="centre">The center position for the particles to gather to</param>
            <param name="count">The amount of particles to create</param>
            <param name="duration">The duration of the gathering</param>
            <param name="color">The color of the particles</param>
            <param name="speed_range">The range of the speed of the particles (Default [2, 5]x of the image)</param>
            <param name="size_range">The range of the sizes of the particles (Default [0.4, 0.9]x of the image)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ParticleGather.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ParticleGather.Draw">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Particle">
            <summary>
            A particle entity
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Particle.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates a particle
            </summary>
            <param name="color">The color of the particle</param>
            <param name="speed">The speed of the particle</param>
            <param name="size">The size of the particle (In Pixels) (Multiply by 20)</param>
            <param name="centre">The position to create the particle</param>
            <param name="image">The image of the particle (Default <see cref="F:UndyneFight_Ex.FightResources.Sprites.lightBall"/>)</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Particle.DarkingSpeed">
            <summary>
            The fading speed of the particle, default 3f (3f/255f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Particle.Alpha">
            <summary>
            The alpha of the particle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Particle.RotateSpeed">
            <summary>
            The rotation speed of the particle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Particle.AutoRotate">
            <summary>
            Whether the particle automatically rotates
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Particle.SlowLerp">
            <summary>
            The friction of the particle's motion
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Particle.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Particle.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Player">
            <summary>
            The player class
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Player.Heart">
            <summary>
            The heart class of <see cref="T:UndyneFight_Ex.Entities.Player"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Player.Heart.Shield">
            <summary>
            The shield. Calculation of angle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Shield.CollisionChecker">
            <summary>
            The collision checking instance
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.Heart.Shield.enabled">
            <summary>
            Whether the shield is enabled
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Shield.Way">
            <summary>
            The direction of the shield
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.Heart.Shield.rotateWay">
            <summary>
            旋转方向, true代表顺时针
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Shield.AttachingGB">
            <summary>
            Whether the shield is currently attached to a green soul blaster
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Shield.ColorType">
            <summary>
            The color type of the shield
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Shield.UpdateKeys">
            <summary>
            The keys used for changing the direction of the shield (Right, Down, Left, Up)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Shield.User">
            <summary>
            The <see cref="T:UndyneFight_Ex.Entities.Player.Heart"/> the shield is for
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Shield.ColorTypes">
            <summary>
            <br>The colors for each green soul shield</br>
            <br>0-> Blue, 1 -> Red etc</br>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Shield.#ctor(System.Int32,UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            A shield
            </summary>
            <param name="type">The color type of the shield</param>
            <param name="user">The <see cref="T:UndyneFight_Ex.Entities.Player.Heart"/> to create the shield for</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Shield.Start">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Shield.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Shield.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Shield.ShieldShinyEffect.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Shield.ShieldShinyEffect.Draw">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.CurrentMoveState">
            <summary>
            The current move state of the heart
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Player.Heart.PurpleFiller">
            <summary>
            The purple filling effect of purple soul transition
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.Heart.controllingBox">
            <summary>
            The box the heart is tied to
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.SoulType">
            <summary>
            Soul type, 0-> Red, 1-> Green, 2-> Blue, 3-> Orange, 4-> Purple, 5-> Gray
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.ID">
            <summary>
            The ID of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.LastCentre">
            <summary>
            The last position of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.SoftFalling">
            <summary>
            Whether to allow soft falling for blue soul
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.FixArrow">
            <summary>
            Whether the arrows will follow the rotation of the soul
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Alpha">
            <summary>
            The alpha of the soul
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Speed">
            <summary>
            The speed of the player (Default 2.5f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.JumpTimeLimit">
            <summary>
            The maximum amount of times the player can jump (Default 2)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.JumpSpeed">
            <summary>
            The jumping speed of blue soul (Default 6)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Gravity">
            <summary>
            The gravity of the blue soul (Default 9.8f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.IsMoved">
            <summary>
            Whether the player is moving
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.IsStable">
            <summary>
            Whether the player is not moving
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.UmbrellaSpeed">
            <summary>
            The speed of the slow falling of blue soul (Default 2/3f)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.PurpleLineCount">
            <summary>
            The amount of lines in purple soul mode
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.EnabledRedShield">
            <summary>
            Whether the enable the red shield for non-green soul types
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.IsSoulSplit">
            <summary>
            Whether the soul is split into several souls
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.UmbrellaAvailable">
            <summary>
            Whether the player can use the soft falling
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.Heart.movingKey">
            <summary>
            The moving keys for the soul (Right, Down, Left, Up)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.IsOranged">
            <summary>
            Whether the soul is orange (Forced to move constantly)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.Heart.isForced">
            <summary>
            是否被重力摔了
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.#ctor">
            <summary>
            Creates a new soul
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Start">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Merge(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Merge the current soul with the target soul
            </summary>
            <param name="another">The soul to merge to</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.MergeAll(System.Int32)">
            <summary>
            Merge all souls
            </summary>
            <param name="target">The heart target to merge to (Default 0)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Split">
            <summary>
            Splits the current soul
            </summary>
            <returns>The new soul that was split</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.InstantSplit(UndyneFight_Ex.CollideRect)">
            <summary>
            Instantly splits the soul
            </summary>
            <param name="area">The rectangle of the box of the new soul</param>
            <returns>The new soul that was split</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ChangeColor(System.Int32,System.Boolean)">
            <summary>
            Changes the soul type
            </summary>
            <param name="type">Soul type, see <see cref="P:UndyneFight_Ex.Entities.Player.Heart.SoulType"/> for the types</param>
            <param name="resetGravSpd"> Whether to reset blue soul gravity or not (Default false)</param>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.Heart.rotateWay">
            <summary>
            旋转方向，true则代表顺时针 <br/>
            Rotation direction, true-> clockwise
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.InstantSetRotation(System.Single)">
            <summary>
            Instantly rotates the soul to the given rotation
            </summary>
            <param name="rot">The target angle</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.RotateTo(System.Single)">
            <summary>
            Rotates the soul to the given rotation
            </summary>
            <param name="rot">The target angle</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.GiveForce(System.Single,System.Single)">
            <summary>
            Applies force to the soul and changes the gravity of the soul to that direction
            </summary>
            <param name="rotation">The direction to set the gravity to (Must be a multiple of 90)</param>
            <param name="speed">The magnitude of gravity</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.GiveInstantForce(System.Single,System.Single)">
            <summary>
            Applies force to the soul and changes the gravity of the soul to that direction and instantly rotates the soul to that direction
            </summary>
            <param name="rotation">The direction to set the gravity to (Must be a multiple of 90)</param>
            <param name="speed">The magnitude of gravity</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Teleport(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Lerps the player to the given position
            </summary>
            <param name="mission">The target position</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.InstantTP(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Instantly teleports the player to the given position
            </summary>
            <param name="mission">The target position</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.FollowScreen(System.Single)">
            <summary>
            Sets the angle of the soul as the angle of the screen for the specified duration
            </summary>
            <param name="duration">The duration to set the angle of the soul for</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.CreateCollideEffect2(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Creates a collision effect
            </summary>
            <param name="color">The color of the effect</param>
            <param name="size">The size of the effect</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.BoundingBox">
            <summary>
            The bounding box of the soul
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.BaseRect">
            <summary>
            The base rectangle of the mask
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Transform">
            <summary>
            Local matrix based on position and rotation
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.Shields">
            <summary>
            The shields of the current heart
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Player.Heart.ShieldManager">
            <summary>
            Shield manager, shields are added/removed here
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.shields">
            <summary>
            两个盾牌。0蓝1红
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.#ctor">
            <summary>
            Creates a shield manager
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.RShield">
            <summary>
            Red Shield
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.BShield">
            <summary>
            Blue Shield
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.GShield">
            <summary>
            Green Shield
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.PShield">
            <summary>
            Purple Shield
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.Circle">
            <summary>
            Shield background circle
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.Start">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.AddShield(UndyneFight_Ex.Entities.Player.Heart.Shield)">
            <summary>
            Adds a shield to the current player
            </summary>
            <param name="shield">The shield to add</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.RemoveShield(UndyneFight_Ex.Entities.Player.Heart.Shield)">
            <summary>
            Removes a shield form the current player
            </summary>
            <param name="shield">The shield to remove</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ShieldManager.Draw">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Player.Heart.ShieldCircle">
            <summary>
            The background of the shield
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ShieldCircle.#ctor">
            <summary>
            Creates the background of the shield
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.Heart.ShieldCircle.Consumption">
            <summary>
            Consumption of the red circle
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ShieldCircle.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Heart.ShieldCircle.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Player.MoveState">
            <summary>
            The state of heart movement
            </summary>
            <param name="color">The color of the heart</param>
            <param name="moveFunction">The function of the heart movement</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.MoveState.#ctor(Microsoft.Xna.Framework.Color,System.Action{UndyneFight_Ex.Entities.Player.Heart})">
            <summary>
            The state of heart movement
            </summary>
            <param name="color">The color of the heart</param>
            <param name="moveFunction">The function of the heart movement</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.MoveState.StateColor">
            <summary>
            The color of the heart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.MoveState.MoveFunction">
            <summary>
            The function of the heart movement
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Player.HPControl">
            <summary>
            The HP controller of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.LostSpeed">
            <summary>
            The losing speed of the HP
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.DamageTaken">
            <summary>
            The damage taken per hit
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.HPControl.protectTime">
            <summary>
            The current amount of invincibility frames
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.KR">
            <summary>
            Whether KR is enabled
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.InvincibleToPhysic">
            <summary>
            Whether the soul is invincible to attacks
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.KRDamage">
            <summary>
            The damage KR deals
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.KRHPExist">
            <summary>
            Whether there exists KR hp
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.GiveKR(System.Single)">
            <summary>
            Adds KR hp to the player
            </summary>
            <param name="intensity">The intensity of the KR to apply (<see cref="P:UndyneFight_Ex.Entities.Player.HPControl.KRDamage"/> * <paramref name="intensity"/>)</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.KRHP">
            <summary>
            The amount of KR hp
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.BuffDifficulty">
            <summary>
            The buffed difficulty of the player if buffed mode is enabled (<see cref="P:UndyneFight_Ex.Entities.Player.HPControl.BuffedLevel"/> + <see cref="P:UndyneFight_Ex.Entities.Player.HPControl.BuffDifficulty"/>)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.BuffedLevel">
            <summary>
            The buffed level of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.OverFlowAvailable">
            <summary>
            Whether the HP can exceed <see cref="F:UndyneFight_Ex.Entities.Player.HPControl.maxHP"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.HPControl.ScoreProtected">
            <summary>
            Whether score will not be counted during invincibility frames
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.GiveProtectTime(System.Int32,System.Boolean)">
            <summary>
            Applies the invincibility frames to the heart
            </summary>
            <param name="val">The duration of the invincibility frames</param>
            <param name="ProtectScore">Whether Nice/Okay collision will take place during the inv. frames</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.LoseHP(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Damages the target heart (Apply particle effect to that heart)
            </summary>
            <param name="heart">The heart to damage</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.ResetKR">
            <summary>
            Sets KR to 0
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.ResetHP">
            <summary>
            Sets Max HP to 5
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.ResetHP(System.Int32)">
            <summary>
            Sets the HP value
            </summary>
            <param name="hpCnt">The HP value to set to</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.ResetMaxHP(System.Single)">
            <summary>
            Sets the Max HP value and sets the HP to that value
            </summary>
            <param name="hpCnt">The Max HP to set to</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.Regenerate">
            <summary>
            Full heal
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.Regenerate(System.Int32)">
            <summary>
            Heal for the given value
            </summary>
            <param name="hp_">The amount of HP to recover</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.HPControl.#ctor">
            <summary>
            Creates a new HP controller
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.CreateCollideEffect(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Creates a collision effect
            </summary>
            <param name="color">The color of the effect</param>
            <param name="size">The size of the effect</param>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.heartInstance">
            <summary>
            The heart instance of the player you are controlling
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.Player.hearts">
            <summary>
            The list of hearts
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.#ctor">
            <summary>
            Creates a new player
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Player.Draw">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Player.hpControl">
            <summary>
            The HP controller entity
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.Souls">
            <summary>
            Extra movement modes for souls
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Souls.CyanSoul">
            <summary>
            Cyan soul process logic
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Souls.RedSoul">
            <summary>
            Red soul processing logic
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Souls.SoulMove(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Basic soul moving logic
            </summary>
            <param name="s"></param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Souls.YellowSoul">
            <summary>
            Yellow soul processing logic
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.ISelectAble">
            <summary>
            Interface for selectable menu items (Legacy)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ISelectAble.Selected">
            <summary>
            Set the item to be selected
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ISelectAble.DeSelected">
            <summary>
            Set the item to be de-selected
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ISelectAble.SelectionEvent">
            <summary>
            Event to invoke when being selected
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Selector.ResetSelect">
            <summary>
            将选择设置成0项。
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Selector.AutoDispose">
            <summary>
            是否在选择选项之后自动关闭
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.Selector.IsCancelAvailable">
            <summary>
            Sets whether the player can press X to quit
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.Selector.Back">
            <summary>
            Return to the last selection screen
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.TextSelection">
            <summary>
            A text button you can choose
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.TextSelection.#ctor(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            A text button you can choose
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.TextSelection.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.TextSelection.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.Entities.AccuracyBar">
            <summary>
            The accuracy bar at the bottom of the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.AccuracyBar.EnabledGolden">
            <summary>
            Whether the golden outline of arrows are enabled
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeResult.SingleResult.illustration">
            <summary>
            The illustration of the single chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeResult.SingleResult.ChartSpecial">
            <summary>
            0 -> Normal, 1 -> No Hit, 2 -> AP
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeResult.SingleResult.ScreenSize">
            <summary>
            The size of the screen
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeResult.SingleResult.IllustrationColor">
            <summary>
            The color of the background illustration
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.HPShower.Vertical">
            <summary>
            Whether the HP bar is vertical
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.HPShower.HPExistColor">
            <summary>
            The color of existing HP of the HP bar
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.HPShower.HPLoseColor">
            <summary>
            The color of Max HP of the HP bar
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.HPShower.HPKRColor">
            <summary>
            The color of the KR bar
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.HPShower.CurrentArea">
            <summary>
            The rectangle area of the HP bar
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.NameShower">
            <summary>
            The name display entity
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.NameShower.level">
            <summary>
            The LV of the chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.NameShower.instance">
            <summary>
            The <see cref="T:UndyneFight_Ex.Entities.NameShower"/> instance
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.NameShower.nameAlpha">
            <summary>
            The alpha of the name text
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.NameShower.OverrideName">
            <summary>
            The text to override the name with, set to <see cref="F:System.String.Empty"/> if to not override
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.NameShower.name">
            <summary>
            The name of the player
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.StateShower.PushType(System.Int32)">
            <summary>
            增加一个得分
            </summary>
            <param name="type">得分种类。0:miss 1:okay 2:nice 3:perfect</param>
        </member>
        <member name="F:UndyneFight_Ex.Entities.RatingShowing.skill">
            <summary>
            Player Rating
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.RatingShowing.name">
            <summary>
            Player Name
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.RatingShowing.special">
            <summary>
            Special Color for user (Rating)
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.StartingShower">
            <summary>
            The items to display on startup
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.StartingShower.defaultUI">
            <summary>
            The default UI to show
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.StartingShower.TitleSetUp">
            <summary>
            The title display on the loading screen
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.StartingShower.TitleShower">
            <summary>
            The title display on the menu
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.ChallengeScene">
            <summary>
            Challenge selection
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.ChallengeScene.#ctor(UndyneFight_Ex.Scene,System.Action)">
            <summary>
            Challenge selection
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeScene.ChallengeList">
            <summary>
            The list of challenges
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeScene.CardPosition">
            <summary>
            The position of the challenge card
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeScene.TargetCardPosition">
            <summary>
            The position of the challenge card
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeScene.CardAlpha">
            <summary>
            The alpha of the card
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeScene.CardSize">
            <summary>
            The size of a card
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.ChallengeScene.TargetCardSize">
            <summary>
            The size of a card
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.FightScene.PlayerInstance">
            <summary>
            Current player instance in fight
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.FightScene.HPBar">
            <summary>
            The HP Bar in the fight
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.FightScene.NameShow">
            <summary>
            The name display in fight
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.GameMenuScene">
            <summary>
            The game menu scene
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.RebindKeyScene">
            <summary>
            v0.3.0+ Rebinding scene
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SongFightingScene">
            <summary>
            Chart scene
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SongFightingScene.SetSongPosition(System.Single)">
            <summary>
            Sets the current song to the given position
            </summary>
            <param name="position">The position to set to</param>
        </member>
        <member name="T:UndyneFight_Ex.Entities.SongFightingScene.SceneParams">
            <summary>
            Sets the parameters of the chart
            </summary>
            <param name="waveset">The <see cref="T:UndyneFight_Ex.SongSystem.IWaveSet"/> interface of the chart</param>
            <param name="songIllustration">The illustration of the chart</param>
            <param name="difficulty">The current difficulty of the chart</param>
            <param name="musicPath">The file path to the music of the chart</param>
            <param name="judgeState">The judgement state of the current chart</param>
            <param name="mode">The game mode of the chart (Default <see cref="F:UndyneFight_Ex.SongSystem.GameMode.None"/></param>
            <param name="unload">Unload assets (Default true)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.#ctor(UndyneFight_Ex.SongSystem.IWaveSet,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.String,UndyneFight_Ex.SongSystem.JudgementState,UndyneFight_Ex.SongSystem.GameMode,System.Boolean)">
            <summary>
            Sets the parameters of the chart
            </summary>
            <param name="waveset">The <see cref="T:UndyneFight_Ex.SongSystem.IWaveSet"/> interface of the chart</param>
            <param name="songIllustration">The illustration of the chart</param>
            <param name="difficulty">The current difficulty of the chart</param>
            <param name="musicPath">The file path to the music of the chart</param>
            <param name="judgeState">The judgement state of the current chart</param>
            <param name="mode">The game mode of the chart (Default <see cref="F:UndyneFight_Ex.SongSystem.GameMode.None"/></param>
            <param name="unload">Unload assets (Default true)</param>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.Waveset">
            <summary>
            The <see cref="T:UndyneFight_Ex.SongSystem.IWaveSet"/> of the current chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.difficulty">
            <summary>
            The current difficulty of the chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.mode">
            <summary>
            The current <see cref="T:UndyneFight_Ex.SongSystem.GameMode"/> of the chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.JudgeState">
            <summary>
            The current <see cref="T:UndyneFight_Ex.SongSystem.JudgementState"/> of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.MusicOptimized">
            <summary>
            Is the music an ogg file
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.LoadMusic">
            <summary>
            Loads the music
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.Music">
            <summary>
            The current music of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.MusicLoaded">
            <summary>
            Whether the music is loaded
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.MusicDuration">
            <summary>
            The duration of the music (In frames)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.SongIllustration">
            <summary>
            The illustration of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.SceneParams.IsUnload">
            <summary>
            Whether the assets will be unloaded
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SongFightingScene.#ctor(UndyneFight_Ex.Entities.SongFightingScene.SceneParams,UndyneFight_Ex.Challenge)">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.Accuracy">
            <summary>
            The accuracy bar
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.JudgeState">
            <summary>
            The current <see cref="T:UndyneFight_Ex.SongSystem.JudgementState"/> of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.CurrentDifficulty">
            <summary>
            The current <see cref="T:UndyneFight_Ex.SongSystem.Difficulty"/> of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.Mode">
            <summary>
            The current <see cref="T:UndyneFight_Ex.SongSystem.GameMode"/> of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.PlayOffset">
            <summary>
            The offset of the music of the chart (In frames)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.AutoEnd">
            <summary>
            Whether the chart will automatically end after the song ends
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SongFightingScene.HPReached0">
            <summary>
            Whether the HP had reached 0 in <see cref="F:UndyneFight_Ex.SongSystem.GameMode.Practice"/>
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SongFightingScene.GreenSoulUsed">
            <summary>
            Whether the soul had became green in <see cref="F:UndyneFight_Ex.SongSystem.GameMode.NoGreenSoul"/>
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SongFightingScene.ItemUsed">
            <summary>
            Whether an item was used (that affects result) during the chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SongFightingScene.ScoreMultiplier">
            <summary>
            The score multiplier
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entities.SongFightingScene.SongIllustration">
            <summary>
            The illustration of the chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entities.SongFightingScene.MusicPlayed">
            <summary>
            Whether the chart music has been played (Sanity check for negative <see cref="P:UndyneFight_Ex.Entities.SongFightingScene.PlayOffset"/>)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SongFightingScene.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SongFightingScene.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entities.SongFightingScene.PlayerDied">
            <summary>
            Call player death event
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.MathUtil">
            <summary>
            Utilities for mathematical operations
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MathUtil.PI">
            <summary>
            Pi
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.LineIntersect(System.ValueTuple{Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2},System.ValueTuple{Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2})">
            <summary>
            Checks if two lines intersect each other
            </summary>
            <param name="lineA">The source line</param>
            <param name="lineB">The destination line</param>
            <returns>Whether two lines intersect</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.InTriangle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks whether the point is inside of a triangle
            </summary>
            <param name="v1">First vertex of the triangle</param>
            <param name="v2">Second vertex of the triangle</param>
            <param name="v3">Third vertex of the triangle</param>
            <param name="target">The point to check</param>
            <returns>Whether the point is inside the triangle</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.RectangleInTriangle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if a rectangle is colliding with a triangle
            </summary>
            <param name="sourceRectTL">The coordinate of the top left corner of the source rectangle</param>
            <param name="sourceRectBR">The coordinate of the bottom right corner of the source rectangle</param>
            <param name="destTriV1">The coordinate of the first vertex of the triangle</param>
            <param name="destTriV2">The coordinate of the second vertex of the triangle</param>
            <param name="destTriV3">The coordinate of the third vertex of the triangle</param>
            <returns>0 -> Does not intersect or collide; 1 -> Rectangle is inside of Triangle; 2 -> Rectangle intersects the Triangle</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.RectangleInRectangle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if two rectangles collide or intersect
            </summary>
            <param name="sourceTL">The coordinate of the top left corner of the source rectangle</param>
            <param name="sourceBR">The coordinate of the bottom right corner of the source rectangle</param>
            <param name="destTL">The coordinate of the top left corner of the destination rectangle</param>
            <param name="destBR">The coordinate of the bottom right corner of the destination rectangle</param>
            <returns>0 -> Does not intersect or collide; 1 -> Source rectangle is inside Destination rectangle; 2 -> Source rectangle intersects with Destination rectangle</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.PolygonCollide(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Checks whether two polygons are colliding
            </summary>
            <param name="polygonA">The list of vertices of the first polygon (In clockwise order)</param>
            <param name="polygonB">The list of vertices of the second polygon (In clockwise order)</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.FloatToString(System.Single,System.Int32)">
            <summary>
            Converts a float to a string, regardless of decimal separator
            </summary>
            <param name="val">The value to convert to string</param>
            <param name="digits">The rounding digit of the string</param>
            <returns>The string of the float</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.FloatFromString(System.String)">
            <summary>
            Converts a float from a string, regardless of decimal separator
            </summary>
            <param name="str">The string to convert to a float</param>
            <returns>The float from string</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.DistanceToLine(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the distance of a point to a line
            </summary>
            <param name="Point">The point to evaluate</param>
            <param name="Start">The first end of the line</param>
            <param name="End">The second end of the line</param>
            <returns>The distance of the point to line</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.RotationDist(System.Single,System.Single)">
            <summary>
            Returns the minimal angle difference between two angles
            </summary>
            <param name="rot1">The first angle</param>
            <param name="rot2">The second angle</param>
            <returns>The angle difference, range is [0, 180]</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.ScalarProject(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Projects a vector onto the given vector
            </summary>
            <param name="origin">The vector to project</param>
            <param name="vec">The vector to project to</param>
            <returns>The scalar projection of a vector</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Project(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Projects a vector onto the given vector
            </summary>
            <param name="origin">The vector to project</param>
            <param name="vec">The vector to project to</param>
            <returns>The projected vector</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Rotate(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Rotates the vector by the given angle in degrees
            </summary>
            <param name="origin">The original vector</param>
            <param name="rot">The amount of degrees to rotate</param>
            <returns>The rotated vector</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.RotateRadian(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Rotates the vector by the given angle in radians
            </summary>
            <param name="origin">The original vector</param>
            <param name="rad">The amount of degrees to rotate in radians</param>
            <returns>The rotated vector</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.MinRotate(System.Single,System.Single)">
            <summary>
            Returns the minimal angle difference between two angles
            </summary>
            <param name="rot1">The first angle</param>
            <param name="rot2">The second angle</param>
            <returns>The angle difference, [0, 180]</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.SignedPow(System.Single,System.Single)">
            <summary>
            Returns the value raised to the specific amount of power, maintaining it's original sign
            </summary>
            <param name="val">The value to raise</param>
            <param name="pow">The power to raise to</param>
            <returns>The number raised to the power <paramref name="pow"/> maintaining the sign of <paramref name="val"/>.</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Direction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Get the angle in degrees between the two vectors
            </summary>
            <param name="start">The starting vector</param>
            <param name="end">The ending vector</param>
            <returns>The angle between the two vectors</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Direction(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the direction of the vector with respect to the origin
            </summary>
            <param name="vec">The vector to check</param>
            <returns>The angle of the vector</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Sigmoid01(System.Single)">
            <summary>
            Adjusted <see cref="M:System.MathF.Tanh(System.Single)"/> value, used for smooth transition. range and domain are both [0, 1]
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Cross(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            The determinant/cross product of two 2D vectors
            </summary>
            <param name="vec">The first vector</param>
            <param name="vec2">The second vector</param>
            <returns>The determinant/cross product</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            The cross product of two 3D vectors
            </summary>
            <param name="vec">The first vector</param>
            <param name="vec2">The second vector</param>
            <returns>The cross product</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the value between the two specified values
            </summary>
            <param name="min">The minimum value</param>
            <param name="val">The value to set</param>
            <param name="max">The maximum value</param>
            <returns>The clamped value</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the value between the two specified values
            </summary>
            <param name="min">The minimum value</param>
            <param name="val">The value to set</param>
            <param name="max">The maximum value</param>
            <returns>The clamped value</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.GetRadian(System.Single)">
            <summary>
            Gets the radian equivalent of the angle in degrees
            </summary>
            <param name="angle">The angle to convert to radians</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.GetAngle(System.Single)">
            <summary>
            Gets the degree equivalent of the angle in radians
            </summary>
            <param name="angle">The angle to convert to degrees</param>
            <returns>The angle in degrees</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.GetVector2(System.Single,System.Single)">
            <summary>
            Calculates the <see cref="T:Microsoft.Xna.Framework.Vector2"/> using the given <paramref name="length"/> and <paramref name="angle"/>.
            </summary>
            <param name="length">The specified length of the vector</param>
            <param name="angle">The specified angle (in degrees)</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.GetDistance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the distance between two vectors
            </summary>
            <param name="P1">The first vector</param>
            <param name="P2">The second vector</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.GetRandom(System.Int32,System.Int32)">
            <summary>
            Gets a random value at [<paramref name="x"/>, <paramref name="y"/>]
            </summary>
            <param name="x">The minimum integer</param>
            <param name="y">The maximum integer</param>
            <returns>The random integer</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.GetRandom(System.Single,System.Single)">
            <summary>
            Gets a random value at [<paramref name="x"/>, <paramref name="y"/>]
            </summary>
            <param name="x">The minimum value</param>
            <param name="y">The maximum value</param>
            <returns>The random value</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Sqrt(System.Single)">
            <summary>
            Returns the square root of the specified number
            </summary>
            <param name="v">The value to get the square root of</param>
            <returns>The square root of <paramref name="v"/></returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.RandIn``1(``0[])">
            <summary>
            Gets a random value from the specified values
            </summary>
            <typeparam name="T">Can be any type</typeparam>
            <param name="inputs">The values for getting</param>
            <returns>The random value from the specified values</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Cos(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            The cosine value from vector calculation, see <see href="https://en.wikipedia.org/wiki/Cosine_similarity"/> for more information
            </summary>
            <param name="a">The first vector</param>
            <param name="b">The second vector</param>
            <returns>The cosine value of the angle between the two vectors</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.StringHash(System.String)">
            <summary>
            Hashes the given string
            </summary>
            <param name="s">The string to hash</param>
            <returns>The hashed value</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.GetHashCode(System.String)">
            <summary>
            Gets the hash code of the string
            </summary>
            <param name="s">The string to hash</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.QuickPow(System.UInt64,System.UInt64)">
            <summary>
            Raises <paramref name="a"/> by the power of <paramref name="b"/>.
            </summary>
            <param name="a">The value to raise</param>
            <param name="b">The power to raise to</param>
            <returns><paramref name="a"/> raised to the power of <paramref name="b"/></returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Posmod(System.Int32,System.Int32)">
            <summary>
            Value wrap-around of <paramref name="a"/> between [0, <paramref name="b"/>]
            </summary>
            <param name="a">The value to wrap around</param>
            <param name="b">The max value that can be attained by <paramref name="a"/></param>
            <returns>The wrapped value</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Posmod(System.Single,System.Single)">
            <summary>
            Value wrap-around of <paramref name="a"/> between [0, <paramref name="b"/>]
            </summary>
            <param name="a">The value to wrap around</param>
            <param name="b">The max value that can be attained by <paramref name="a"/></param>
            <returns>The wrapped value</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Encrypt(System.String,System.String)">
            <summary>
            RSA encryption for a string
            </summary>
            <param name="password">The string to encrypt</param>
            <param name="rsaKeyPublic">The key of encryption</param>
            <returns>The encrypted string</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.Decrypt(System.String,System.String)">
            <summary>
            RSA decryption of a string
            </summary>
            <param name="base64Origin">The string to decrypt</param>
            <param name="rsaKeyPrivate">The key of encryption</param>
            <returns>The decrypted string</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.InRange``1(``0,``0,``0)">
            <summary>
            Check whether the value is inside of a range
            </summary>
            <typeparam name="T">Any type that is a <see cref="T:System.IComparable"/></typeparam>
            <param name="value">The value to check</param>
            <param name="min">The minimum range</param>
            <param name="max">The maximum range</param>
            <returns>Whether value is [<paramref name="min"/>,<paramref name="max"/>]</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.ArithmeticSum(System.Single,System.Single,System.Single)">
            <summary>
            Gets the sum of the arithmetic sequence
            </summary>
            <param name="start">The first term of the sequence</param>
            <param name="diff">The difference between each term in the sequence</param>
            <param name="items">The number of items in the sequence</param>
            <returns>The sum of the sequence</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.GeometricSum(System.Single,System.Single,System.Single)">
            <summary>
            Gets the sum of the geometric sequence
            </summary>
            <param name="start">The first term of the sequence</param>
            <param name="ratio">The ratio between each term in the sequence</param>
            <param name="items">The number of items in the sequence</param>
            <returns>The sum of the sequence</returns>
        </member>
        <member name="M:UndyneFight_Ex.MathUtil.CountSubstring(System.String,System.String)">
            <summary>
            Gets the amount of substring inside of a string
            </summary>
            <param name="text">The source text</param>
            <param name="substring">The substring to check</param>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.MiscUtil">
            <summary>
            Miscellaneous Utilities
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.MiscUtil.ShorthandName">
            <summary>
            The shorthand name of the object
            </summary>
            <param name="name">The shorthand name of the object</param>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.ShorthandName.#ctor(System.String)">
            <summary>
            The shorthand name of the object
            </summary>
            <param name="name">The shorthand name of the object</param>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.ShorthandName.Name">
            <summary>
            The shorthand name of the value
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.GetShorthandName(System.Object)">
            <summary>
            Gets the <see cref="T:UndyneFight_Ex.MiscUtil.ShorthandName"/> of the object
            </summary>
            <typeparam name="T">An object</typeparam>
            <param name="thing">The object to pull the shorthand name of</param>
            <returns>The <see cref="T:UndyneFight_Ex.MiscUtil.ShorthandName"/> of the object</returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.KeyToString(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            <br>Converts a key to string</br>
            <br>Warning, this may not cover all the keys, report to the Discord server if you found any missing keys</br>
            </summary>
            <param name="key">The key to convert</param>
            <returns>The string name of the key</returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.StringToKey(System.String)">
            <summary>
            <br>Converts a string to key</br>
            <br>The strings should follow the format of <see cref="M:UndyneFight_Ex.MiscUtil.KeyToString(Microsoft.Xna.Framework.Input.Keys)"/></br>
            <br>Warning, this may not cover all the keys, report to the Discord server if you found any missing keys</br>
            </summary>
            <param name="text">The string to convert</param>
            <returns>The key the string represents</returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.GetInputKeys(UndyneFight_Ex.InputIdentity)">
            <summary>
            Gets the current key binding of the input identity
            </summary>
            <param name="identity">The identity to get</param>
            <returns>The key the identity is binded to</returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.GetAsset(System.String,System.Type)">
            <summary>
            Gets the asset from the name, i.e. FightResources.Sounds.spearAppear -> GetAsset("spearAppear", typeof(FightResources.Sounds)) would return the audio
            </summary>
            <param name="name">The name of the asset</param>
            <param name="type">The type the asset belongs to</param>
            <returns>The asset</returns>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.GlobalDefinedTextures">
            <summary>
            User defined textures for sprite drawing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.GlobalDefinedFonts">
            <summary>
            User defined fonts for sprite drawing
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.MiscUtil.TextBuilder">
            <summary>
            <para>A text builder that allows text formatting on the fly</para>
            <para>Use '[[' for displaying '[' and '\b' for displaying ']'</para>
            </summary>
            <param name="text">The text to display with format commands</param>
            <param name="typer">The text typer class to associate (Can be null)</param>
            <param name="tag_start">The char for tag start, default '['</param>
            <param name="tag_end">The char for tag end, default ']'</param>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.#ctor(System.String,UndyneFight_Ex.MiscUtil.TextTyper,System.Char,System.Char)">
            <summary>
            <para>A text builder that allows text formatting on the fly</para>
            <para>Use '[[' for displaying '[' and '\b' for displaying ']'</para>
            </summary>
            <param name="text">The text to display with format commands</param>
            <param name="typer">The text typer class to associate (Can be null)</param>
            <param name="tag_start">The char for tag start, default '['</param>
            <param name="tag_end">The char for tag end, default ']'</param>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.Typer">
            <summary>
            The text typer to associate with
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextDisplayIndex">
            <summary>
            The index of the text to display
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.CommandTag">
            <summary>
            The open and end command tags, default '[', ']'
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder._doubleCommandTag">
            <summary>
            A double tag for the parser to recognize as a typed out open tag, stored to prevent string concat per parse
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.CommandTagIndexes">
            <summary>
            The list of indexes to display the <see cref="F:UndyneFight_Ex.MiscUtil.TextBuilder.CommandTag"/>
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.ParsedText">
            <summary>
            The parsed text to display
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder._glyphData">
            <summary>
            The list of glyph data of the parsed string
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UndyneFight_Ex.MiscUtil.TextBuilder.TextLineSize" -->
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.forceMaxLineWidth">
            <summary>
            The maximum line width
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.wrapIgnoreSpace">
            <summary>
            Whether the wrapping of the text will ignore spaces
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TotalTextHeight">
            <summary>
            The total height of the parsed text
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.Arguments">
            <summary>
            The list of arguments for each <see cref="F:UndyneFight_Ex.MiscUtil.TextBuilder.Commands"/>, format: List[char index, TextArgument]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.Commands">
            <summary>
            The list of commands to execute, format: List[char index, command text]
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.CommandQueue">
            <summary>
            The command queue to execute
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.CurrentCommandCount">
            <summary>
            The current ID of the command to execute
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.drawingPositions">
            <summary>
            Cache of char positions
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder._parseDrawingPosition">
            <summary>
            The position of the current char during parsing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.defaultTextBuilderData">
            <summary>
            The default text settings
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.currentDrawingData">
            <summary>
            The current text settings during drawing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.DefinedTextures">
            <summary>
            User defined textures for sprite drawing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.DefinedFonts">
            <summary>
            User defined fonts for sprite drawing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.isDrawing">
            <summary>
            Whether it is currently at drawing state
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder._currentDrawingCharIndex">
            <summary>
            The current drawing char index
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder._currentDrawSpriteCount">
            <summary>
            The current amount of sprites drawn (Index displacement due to inserting the null char)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder._curDrawingLine">
            <summary>
            The current line of drawing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.curStackEffCount">
            <summary>
            The current amount of Effects stacked
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.Timer">
            <summary>
            Time elapsed
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.AutoRender">
            <summary>
            Whether the rendering process will be done automatically or requires <see cref="M:UndyneFight_Ex.MiscUtil.TextBuilder.Render"/> to render
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.DoRender">
            <summary>
            Whether to render the text
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.ParseText">
            <summary>
            Parses the text for display
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Draw">
            <inheritdoc/>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextArgument.Command">
            <summary>
            The command of the argument
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextArgument.Arguments">
            <summary>
            The list of arguments
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.MiscUtil.TextBuilder.TextHAlignment">
            <summary>
            The horizontal text alignment
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextHAlignment.Left">
            <summary>
            Aligns the text to the left side
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextHAlignment.Middle">
            <summary>
            Aligns the text horizontally at the center
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextHAlignment.Right">
            <summary>
            Aligns the text to the right side
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.MiscUtil.TextBuilder.TextVAlignment">
            <summary>
            The vertical text alignment
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextVAlignment.Top">
            <summary>
            Aligns the text at the top
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextVAlignment.Center">
            <summary>
            Aligns the text vertically at the center
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextVAlignment.Bottom">
            <summary>
            Aligns the text at the bottom (It is normal to have a small displacement)
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData">
            <summary>
            The settings for the current text parser
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.#ctor">
            <summary>
            The settings for the current text parser
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.Position">
            <summary>
            The position of the text builder
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.Scale">
            <summary>
            The scale of the text
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.Col">
            <summary>
            The color of the text
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.HAlignment">
            <summary>
            The horizontal alignment of the text
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.VAlignment">
            <summary>
            The vertical alignment of the text
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.CurrentFont">
            <summary>
            The current font of drawing of the text
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.Effect">
            <summary>
            The current text effect
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.curEffCount">
            <summary>
            Current effect index
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.TextBuilderData.EffectParam">
            <summary>
            The current text effect parameters
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.MiscUtil.TextBuilder.Effects">
            <summary>
            Available text effects to apply
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.Effects.None">
            <summary>
            No effect
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.Effects.Shake">
            <summary>
            Shaking text
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.Effects.Wave">
            <summary>
            Wave-motion text
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.MiscUtil.TextBuilder.GlyphData">
            <summary>
            The data for each individual character
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.GlyphData.#ctor">
            <summary>
            The data for each individual character
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.GlyphData.Position">
            <summary>
            The position of the character
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.GlyphData.Scale">
            <summary>
            The scale of the character
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.GlyphData.Blend">
            <summary>
            The color of the character
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.GlyphData.Font">
            <summary>
            The font used by the character
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.GlyphData.Sprite">
            <summary>
            The texture to draw (If an in-line sprite is called)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextBuilder.GlyphData._char">
            <summary>
            The character that possess the data (Debug use)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Overwrite(System.String)">
            <summary>
            Overwrites the text in the text builder (Automatically rebuilds, may cause lag spike)
            </summary>
            <param name="text">The new text to draw</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Build">
            <summary>
            Builds the text for text rendering
            </summary>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Position">
            <summary>
            Gets the position of the text
            </summary>
            <returns>The position of the text</returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Position(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the position of the text
            </summary>
            <param name="position">The position of the text to set to</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Position(System.Single,System.Single)">
            <summary>
            Sets the position of the text
            </summary>
            <param name="x">The x coordinate of the position</param>
            <param name="y">The y coordinate of the position</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Align">
            <summary>
            Gets the current text alignment
            </summary>
            <returns>The (Horizontal, Vertical) alignment</returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Align(System.Nullable{UndyneFight_Ex.MiscUtil.TextBuilder.TextHAlignment},System.Nullable{UndyneFight_Ex.MiscUtil.TextBuilder.TextVAlignment})">
            <summary>
            Sets the alignment of the text
            </summary>
            <param name="halignment">The horizontal alignment to set to</param>
            <param name="valignment">The vertical alignment to set to</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Scale">
            <summary>
            Gets the current scale of the text
            </summary>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Scale(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the scale of the text
            </summary>
            <param name="scale">The scale to set to</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Blend">
            <summary>
            Gets the default blend of the text
            </summary>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Blend(Microsoft.Xna.Framework.Color)">
            <summary>
            Sets the default color of the text
            </summary>
            <param name="color">The color to set to</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Blend(Microsoft.Xna.Framework.Color[])">
            <summary>
            Sets the default color blend of the text
            </summary>
            <param name="color">The color blend to set to</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Font(UndyneFight_Ex.GLFont)">
            <summary>
            Sets the default font of the text
            </summary>
            <param name="font">The font to set to</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.DefineTexture(System.String,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Defines a custom texture for this <see cref="T:UndyneFight_Ex.MiscUtil.TextBuilder"/> with the given name
            </summary>
            <param name="key">The name of the texture to draw in-line</param>
            <param name="texture">The texture to draw</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.DefineGlobalTexture(System.String,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Defines a custom texture with the given name
            </summary>
            <param name="key">The name of the texture to draw in-line</param>
            <param name="texture">The texture to draw</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.DefineFont(System.String,UndyneFight_Ex.GLFont)">
            <summary>
            Defines a custom font for this <see cref="T:UndyneFight_Ex.MiscUtil.TextBuilder"/> with the given name
            </summary>
            <param name="key">The name of the font to draw in-line</param>
            <param name="font">The font to draw</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.DefineGlobalFont(System.String,UndyneFight_Ex.GLFont)">
            <summary>
            Defines a custom font with the given name
            </summary>
            <param name="key">The name of the font to draw in-line</param>
            <param name="font">The font to draw</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Wrap(System.Single,System.Boolean)">
            <summary>
            Wraps the text typer
            </summary>
            <param name="lineWidth">Max width the line can be</param>
            <param name="ignoreSpace">Whether spaces are ignored</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.TextTyper">
            <summary>
            Gets the <see cref="T:UndyneFight_Ex.MiscUtil.TextTyper"/> of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.TextTyper(UndyneFight_Ex.MiscUtil.TextTyper)">
            <summary>
            Sets the text typer
            </summary>
            <param name="typer">The typer to set to</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Render">
            <summary>
            Renders the text if <see cref="F:UndyneFight_Ex.MiscUtil.TextBuilder.AutoRender"/> is false
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextBuilder.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.MiscUtil.TextTyper">
            <summary>
            A text typer class associated with <see cref="T:UndyneFight_Ex.MiscUtil.TextBuilder"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextTyper.#ctor">
            <summary>
            A text typer class associated with <see cref="T:UndyneFight_Ex.MiscUtil.TextBuilder"/>
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextTyper.ActionPerChar">
            <summary>
            The action to execute whenever a char is updated to be displayed
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextTyper.SoundPerChar">
            <summary>
            The sound to play when a char is displayed
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextTyper.TypingSpeed">
            <summary>
            The typing speed of the typer
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.MiscUtil.TextTyper.DelayTimer">
            <summary>
            The timer left for delaying the typer
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextTyper.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextTyper.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextTyper.Speed">
            <summary>
            Gets the current typing speed per second
            </summary>
            <returns>The typing speed per second</returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextTyper.Speed(System.Single)">
            <summary>
            Sets the amount of characters to reveal per second
            </summary>
            <param name="speed">The typing speed to set to</param>
            <returns>The typing speed per second</returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextTyper.SetActionPerChar(System.Action)">
            <summary>
            Sets the action per char into the defined action
            </summary>
            <param name="action">The action to invoke</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextTyper.SetSoundPerChar(Microsoft.Xna.Framework.Audio.SoundEffect)">
            <summary>
            Sets the sound per char into the defined audio asset
            </summary>
            <param name="sound">The sound to play</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextTyper.Delay(System.Single)">
            <summary>
            Delays the typer by the given frames (Incremental)
            </summary>
            <param name="time">The frames to delay</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.MiscUtil.TextTyper.SetDelay(System.Single)">
            <summary>
            Delays the typer by the given frames (Set)
            </summary>
            <param name="time">The frames to delay</param>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.TKValueEasing">
            <summary>
            Random thing I made because <see cref="T:UndyneFight_Ex.Entities.EasingUtil"/> returns inaccurate values for certain easing functions (Mostly EaseIn and EaseInOut/OutIn functions)<br/>
            It is not recommended to use these functions without proper knowledge
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.TKValueEasing.EaseInQuad(System.Single,System.Single,System.Single,System.Single)">
            Quadratic Easing
        </member>
        <member name="T:UndyneFight_Ex.SongSet">
            <summary>
            A list of charts
            </summary>
            <param name="songSetName">The name of the song set</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSet.#ctor(System.String)">
            <summary>
            A list of charts
            </summary>
            <param name="songSetName">The name of the song set</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSet.Push(System.Type)">
            <summary>
            Add a chart to the song set
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:UndyneFight_Ex.SongSet.Remove(System.Type)">
            <summary>
            Remove a chart from the song set
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:UndyneFight_Ex.SongSet.Values">
            <summary>
            The list of charts
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSet.Item(System.String)">
            <summary>
            Gets the chart with the given index
            </summary>
            <param name="index">The index of the chart</param>
            <returns></returns>
        </member>
        <member name="P:UndyneFight_Ex.SongSet.SongSetName">
            <summary>
            The name of the song set
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GameEventArgs">
            <summary>
            An event to be broadcasted that can be detected
            </summary>
            <param name="gameObject">The object to broadcast from</param>
            <param name="info">The name of the event</param>
        </member>
        <member name="M:UndyneFight_Ex.GameEventArgs.#ctor(UndyneFight_Ex.GameObject,System.String)">
            <summary>
            An event to be broadcasted that can be detected
            </summary>
            <param name="gameObject">The object to broadcast from</param>
            <param name="info">The name of the event</param>
        </member>
        <member name="P:UndyneFight_Ex.GameEventArgs.ActionName">
            <summary>
            The name of the event
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameEventArgs.Source">
            <summary>
            The object that broadcasted the event
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameEventArgs.Dispose">
            <summary>
            Disposes the event
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.InputIdentity">
            <summary>
            Input verbs
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.None">
            <summary>
            Unassigned key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Confirm">
            <summary>
            Confirm key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Cancel">
            <summary>
            Cancel key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Alternate">
            <summary>
            Alternate key (Default spacebar)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Special">
            <summary>
            Menu key (Default C)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.MainRight">
            <summary>
            Primary Right key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.MainDown">
            <summary>
            Primary Down key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.MainLeft">
            <summary>
            Primary Left key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.MainUp">
            <summary>
            Primary Up key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.SecondRight">
            <summary>
            Secondary Right key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.SecondDown">
            <summary>
            Secondary Down key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.SecondLeft">
            <summary>
            Secondary Left key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.SecondUp">
            <summary>
            Secondary Up key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.ThirdRight">
            <summary>
            Ternary Right key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.ThirdDown">
            <summary>
            Ternary Down key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.ThirdLeft">
            <summary>
            Ternary Left key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.ThirdUp">
            <summary>
            Ternary Up key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.FourthRight">
            <summary>
            Quaternary Right key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.FourthDown">
            <summary>
            Quaternary Down key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.FourthLeft">
            <summary>
            Quaternary Left key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.FourthUp">
            <summary>
            Quaternary Up key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.FullScreen">
            <summary>
            Fullscreen key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.ScreenShot">
            <summary>
            Screenshot key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number1">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number2">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number3">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number4">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number5">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number6">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number7">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number8">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number9">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Number0">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Backspace">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Reset">
            <summary>
            Reset key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Heal">
            <summary>
            Debug healing key
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.Tab">
            <summary>
            Self-explanatory
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.InputIdentity.QuickRestart">
            <summary>
            Quick restart key
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.IdentityChecker">
            <summary>
            Checker for player input of <see cref="T:UndyneFight_Ex.InputIdentity"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Scene">
            <summary>
            Carrier of all entities, the FPS of every scene is 125 fps
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Scene.DrawingSettings">
            <summary>
            The drawing settings
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Scene.DrawingSettings.backGroundColor">
            <summary>
            The color of the background
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Scene.DrawingSettings.themeColor">
            <summary>
            The theme color of the chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Scene.DrawingSettings.UIColor">
            <summary>
            The color of the UI
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Scene.DrawingSettings.defaultWidth">
            <summary>
            The default width of the scene
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Scene.DrawingSettings.#ctor">
            <summary>
            Initializes the drawing settings
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Scene.CurrentDrawingSettings">
            <summary>
            The current drawing settings of this scene
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Scene.BackgroundRendering">
            <summary>
            The rendering manager of the background
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Scene.SceneRendering">
            <summary>
            The rendering manager for the scene
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Scene.Objects">
            <summary>
            The list of <see cref="T:UndyneFight_Ex.GameObject"/>s in the scene
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Scene.Loader">
            <summary>
            The loader of the current scene
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Scene.InstanceCreate(UndyneFight_Ex.GameObject)">
            <summary>
            Creates a game object
            </summary>
            <param name="t">The object to create</param>
        </member>
        <member name="M:UndyneFight_Ex.Scene.Draw">
            <summary>
            The scene's drawing function
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Scene.Broadcast(UndyneFight_Ex.GameEventArgs)">
            <summary>
            Broadcasts an event
            </summary>
            <param name="gameEventArgs">The arguments of the event</param>
        </member>
        <member name="M:UndyneFight_Ex.Scene.DetectEvent(System.String)">
            <summary>
            Detects whether an event is being broadcasted
            </summary>
            <param name="ActionName">The name of the event</param>
            <returns>The arguments of the event</returns>
        </member>
        <member name="M:UndyneFight_Ex.Scene.GlobalObjects">
            <summary>
            Gets the list of global objects (<see cref="P:UndyneFight_Ex.GameObject.CrossScene"/> is true)
            </summary>
            <returns>The list of global objects</returns>
        </member>
        <member name="M:UndyneFight_Ex.Scene.Update">
            <summary>
            The scene's update logic
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Scene.#ctor(UndyneFight_Ex.GameObject)">
            <summary>
            Creates a scene with a starting object
            </summary>
            <param name="startObj">The starting object</param>
        </member>
        <member name="M:UndyneFight_Ex.Scene.#ctor">
            <summary>
            Creates a scene
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Scene.Dispose">
            <summary>
            Disposes the sene
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Scene.DrawAll(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Renders the scene
            </summary>
            <param name="mission">The render target to render to</param>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.SpriteBatchEX">
            <summary>
            Extended sparite batch class
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SpriteBatchEX.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new sprite batch
            </summary>
            <param name="graphicsDevice">The graphics device to use</param>
        </member>
        <member name="M:UndyneFight_Ex.SpriteBatchEX.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            begins the sprite batch rendering
            </summary>
            <param name="sortMode">Sorting method of the sprites</param>
            <param name="blendState">Blending state of the sprites</param>
            <param name="samplerState">The sampler state of the sprites</param>
            <param name="depthStencilState">The stencil buffer of the sprites</param>
            <param name="rasterizerState">The rasterizer state of the sprites</param>
            <param name="effect">The effect to render the sprites with</param>
            <param name="transform">The world matrix of the sprites</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:UndyneFight_Ex.SpriteBatchEX.End">
            <summary>
            Ends the current sprite batch rendering
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:UndyneFight_Ex.SpriteBatchEX.DrawVertex(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single,Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture[])">
            <summary>
            Give the Vertices information of sprite to draw on the current RenderTarget
            </summary>
            <param name="texture">the texture sprite</param>
            <param name="Vertices">The Vertices given. Make them in the order of clockwise! </param>
            <param name="depth">The depth to sort</param>
        </member>
        <member name="M:UndyneFight_Ex.SpriteBatchEX.DrawVertex(System.Single,Microsoft.Xna.Framework.Graphics.VertexPositionColor[])">
            <summary>
            Give the Vertices information of sprite to draw on the current RenderTarget
            </summary>
            <param name="Vertices">The Vertices given. Make them in the order of clockwise! </param>
            <param name="depth">The depth to sort</param>
        </member>
        <member name="M:UndyneFight_Ex.SpriteBatchEX.DrawSortedVertex(System.Single,Microsoft.Xna.Framework.Graphics.VertexPositionColor[])">
            <summary>
            Give the Vertices information of sprite to draw on the current RenderTarget
            </summary>
            <param name="vertices">The Vertices given. Make them in the order of clockwise! </param>
            <param name="depth">The depth to sort</param>
        </member>
        <member name="M:UndyneFight_Ex.SpriteBatchEX.DrawVertex(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single,System.Int32[],Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture[])">
            <summary>
            Give the Vertices information of sprite to draw on the current RenderTarget
            </summary>
            <param name="texture">the texture sprite</param>
            <param name="vertices">The Vertices given. Make them in the order of clockwise! </param>
            <param name="indices">The list of indices of the texture</param>
            <param name="depth">The depth to sort</param>
        </member>
        <member name="M:UndyneFight_Ex.SpriteBatchEX.DrawVertex(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single,Microsoft.Xna.Framework.Graphics.VertexPositionColor[])">
            <summary>
            Give the Vertices information of sprite to draw on the current RenderTarget
            </summary>
            <param name="texture">the texture sprite</param>
            <param name="vertices">The Vertices given. Make them in the order of clockwise! </param>
            <param name="depth">The depth to sort</param>
        </member>
        <member name="M:UndyneFight_Ex.SpriteBatchEX.DrawVertex(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single,System.Int32[],Microsoft.Xna.Framework.Graphics.VertexPositionColor[])">
            <summary>
            Give the Vertices information of sprite to draw on the current RenderTarget
            </summary>
            <param name="texture">the texture sprite</param>
            <param name="vertices">The Vertices given. Make them in the order of clockwise! </param>
            <param name="depth">The depth to sort</param>
            <param name="indices"></param>
        </member>
        <member name="T:UndyneFight_Ex.RenderProduction">
            <summary>
            THe class for most rendering actions, see the documentation for more information
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.AdaptingScale">
            <summary>
            The scale factor of the surface
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.ScreenSize">
            <summary>
            The current size of the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.WindowDevice">
            <summary>
            Graphics device of the manager
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.SpriteBatch">
            <summary>
            A sprite batch
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.Dispose">
            <summary>
            Disposes the render production
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.Update">
            <summary>
            Updating logic for the rendering production
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.AdaptedSize">
            <summary>
            The adapted size of the screen
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.#ctor(UndyneFight_Ex.Shader,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,System.Single)">
            <summary>
            Creates a render production
            </summary>
            <param name="shader">The shader to apply</param>
            <param name="sortMode">The sorting mode of the sprites</param>
            <param name="blendState">The blending method</param>
            <param name="depth">The depth of the render production</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.MissionTarget">
            <summary>
            The target <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> to draw on
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.SpriteSortMode">
            <summary>
            The sorting mode of the <see cref="T:UndyneFight_Ex.RenderProduction"/>, see <see href="https://docs.monogame.net/api/Microsoft.Xna.Framework.Graphics.SpriteSortMode.html"/> for more information
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.BlendState">
            <summary>
            The blending state of the <see cref="T:UndyneFight_Ex.RenderProduction"/>, see <see href="https://docs.monogame.net/api/Microsoft.Xna.Framework.Graphics.BlendState.html"/> for more information
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.Transform">
            <summary>
            World matrix of the current <see cref="T:UndyneFight_Ex.RenderProduction"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.Shader">
            <summary>
            The shader to apply on the <see cref="T:UndyneFight_Ex.RenderProduction"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.SamplerState">
            <summary>
            The sampling state of the rendering, see <see href="https://docs.monogame.net/api/Microsoft.Xna.Framework.Graphics.SamplerState.html"/> for more information
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.CompareTo(UndyneFight_Ex.RenderProduction)">
            <summary>
            Compares to another <see cref="T:UndyneFight_Ex.RenderProduction"/> by their depth
            </summary>
            <param name="r">The other <see cref="T:UndyneFight_Ex.RenderProduction"/> to compare to</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.ResetTargetColor(Microsoft.Xna.Framework.Color)">
            <summary>
            Clears resource buffers and sets the given color in all buffers
            </summary>
            <param name="color">The color to set</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawPrimitives(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture[],Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draws a texture with the given primitives
            </summary>
            <param name="vertexArray"></param>
            <param name="texture"></param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawEntities(UndyneFight_Ex.Entity[])">
            <summary>
            Draws the list of entities
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a texture
            </summary>
            <param name="s">The texture to draw</param>
            <param name="pos">The position to draw the texture in</param>
            <param name="from">The part of the texture to draw</param>
            <param name="color">The color to draw the texture in</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTextures(Microsoft.Xna.Framework.Graphics.Texture2D[],Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color[])">
            <summary>
            Draws multiple textures
            </summary>
            <param name="tex">The textures to draw</param>
            <param name="pos">The position to draw the texture in</param>
            <param name="from">The part of the texture to draw</param>
            <param name="colors">The colors to draw the textures in</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTextures(Microsoft.Xna.Framework.Graphics.Texture2D[],Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
            <summary>
            Draws multiple textures
            </summary>
            <param name="tex">The textures to draw</param>
            <param name="pos">The position to draw the texture in</param>
            <param name="from">The part of the texture to draw</param>
            <param name="color">The color to draw the textures in</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTextures(Microsoft.Xna.Framework.Graphics.Texture2D[],Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Draws multiple textures
            </summary>
            <param name="s">The textures to draw</param>
            <param name="bound">The rectangle to draw the textures in</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a texture
            </summary>
            <param name="s">The texture to draw</param>
            <param name="pos">The position to the texture draw in</param>
            <param name="color">The color to draw the texture in</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a texture
            </summary>
            <param name="s">The texture to draw</param>
            <param name="pos">The position to draw the texture in</param>
            <param name="color">The color to draw the texture in</param>
            <param name="size">The size of the texture to draw in</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a texture
            </summary>
            <param name="s">The texture to draw</param>
            <param name="pos">The position to draw the texture in</param>
            <param name="color">The color to draw the texture in</param>
            <param name="size">The size of the texture to draw in</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Draws a texture
            </summary>
            <param name="s">The texture to draw</param>
            <param name="bound">The rectangle to draw the texture in</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a texture
            </summary>
            <param name="s">The texture to draw</param>
            <param name="bound">The rectangle to draw the texture in</param>
            <param name="color">The color to draw the texture in</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a texture
            </summary>
            <param name="s">The texture to draw</param>
            <param name="pos">The position to draw the texture</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.WindowSizeChanged(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Event to occur when the window size changed
            </summary>
            <param name="vec">The new window size</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.UpdateBase(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Updates the base render targets
            </summary>
            <param name="vec">The new window size</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            How the render production is drawn
            </summary>
            <param name="obj">The rendered texture</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.CopyRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Copies the rendered texture from one <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> to another
            </summary>
            <param name="distin">The target <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> to copy to</param>
            <param name="source">The source texture</param>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.HelperTarget">
            <summary>
            A helper target you can use for copying the currently rendered texture
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.HelperTargets">
            <summary>
            The list of helper targets you can use to copy the rendered texture
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.AddHelperTarget">
            <summary>
            Creates a new helper target
            </summary>
            <returns>The created target</returns>
        </member>
        <member name="M:UndyneFight_Ex.RenderProduction.RemoveHelperTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Removes a helper target from memory
            </summary>
            <param name="target">The render target to remove</param>
        </member>
        <member name="P:UndyneFight_Ex.RenderProduction.Enabled">
            <summary>
            Whether the drawing action is enabled
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Surface">
            <summary>
            A surface
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.drawingAlpha">
            <summary>
            The alpha of the surface
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Surface.RestrictArea">
            <summary>
            The area of the surface to restrict in
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Surface.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a surface (Note that this does not add the surface to the rendering pipeline)
            </summary>
            <param name="name">The name of the surface</param>
            <param name="lockSize">Whether the size is forced at 640x480 or will change dynamically based on the window size</param>
        </member>
        <member name="M:UndyneFight_Ex.Surface.Dispose">
            <summary>
            Disposes the surface
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.RenderPaint">
            <summary>
            The rendered texture of the surface
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.Normal">
            <summary>
            The surface for drawing on screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.Hidden">
            <summary>
            The surface for drawing inside the box
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.BackGroundColor">
            <summary>
            The color of the background
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.DisableExpand">
            <summary>
            Disables <see cref="P:UndyneFight_Ex.Fight.Functions.ScreenDrawing.ScreenExtending"/> in this surface
            </summary>
        </member>
        <member name="E:UndyneFight_Ex.Surface.DoUpdate">
            <summary>
            Custom update logic
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Surface.Update">
            <summary>
            Updates the surface
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Surface.TransferUse">
            <summary>
            Options on how the surfaces handles the local matrix
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Surface.TransferUse.ForceDefault">
            <summary>
            Uses the world matrix
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Surface.TransferUse.ForceNormal">
            <summary>
            Uses the identity matrix
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Surface.TransferUse.Custom">
            <summary>
            Uses a custom defined matrix in <see cref="P:UndyneFight_Ex.Surface.CustomMatrix"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.SizeLock">
            <summary>
            Whether the size of the surface is locked at 640x480
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.Transfer">
            <summary>
            The mode for how the surface handles its matrix
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.NormalTransfer">
            <summary>
            The world matrix
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Surface.CustomMatrix">
            <summary>
            The custom matrix to apply on the surface (Requires <see cref="P:UndyneFight_Ex.Surface.Transfer"/> to be <see cref="F:UndyneFight_Ex.Surface.TransferUse.Custom"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Surface.Draw(UndyneFight_Ex.Entity[],Microsoft.Xna.Framework.Matrix)">
            <summary>
            Draws the surface
            </summary>
            <param name="entities"></param>
            <param name="transfer"></param>
        </member>
        <member name="M:UndyneFight_Ex.Surface.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Buh
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:UndyneFight_Ex.Surface.Name">
            <summary>
            The name of the surface
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.RenderingManager">
            <summary>
            Manages <see cref="T:UndyneFight_Ex.RenderProduction"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.RenderingManager.ExistProduction">
            <summary>
            Whether there exists and <see cref="T:UndyneFight_Ex.RenderProduction"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.RenderingManager.Draw(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Draws all the textures of <see cref="T:UndyneFight_Ex.RenderProduction"/>
            </summary>
            <param name="startTarget"></param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.RenderingManager.WindowSizeChanged(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Updates al surfaces to the new window size
            </summary>
            <param name="vec">The new window size</param>
        </member>
        <member name="M:UndyneFight_Ex.RenderingManager.InsertProduction(UndyneFight_Ex.RenderProduction)">
            <summary>
            Adds a production to the rendering pipeline
            </summary>
            <param name="production"></param>
        </member>
        <member name="M:UndyneFight_Ex.RenderingManager.ResetProduction">
            <summary>
            Resets the production state (Removes all <see cref="T:UndyneFight_Ex.RenderProduction"/>)
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.UserService.AchievementObject">
            <summary>
            A singular achievement
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.AchievementObject.#ctor(UndyneFight_Ex.Achievements.Achievement)">
            <summary>
            A singular achievement
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:UndyneFight_Ex.UserService.AchievementObject.Children">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.AchievementObject.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.AchievementObject.Save">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.UserService.AchievementManager">
            <summary>
            Data for the user's achievements
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.AchievementManager.Children">
            <inheritdoc/>
        </member>
        <member name="F:UndyneFight_Ex.UserService.AchievementManager.AchievementObjects">
            <summary>
            The list of singular achievements
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.AchievementManager.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.AchievementManager.Insert(UndyneFight_Ex.Achievements.Achievement)">
            <summary>
            Adds a new achievement
            </summary>
            <param name="achievement">The achievement to add</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.AchievementManager.Save">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.UserService.SingleChallenge">
            <summary>
            Singular challenge data
            </summary>
            <param name="challenge"></param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SingleChallenge.#ctor(UndyneFight_Ex.Challenge)">
            <summary>
            Singular challenge data
            </summary>
            <param name="challenge"></param>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SingleChallenge.Children">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SingleChallenge.TripleAccuracy">
            <summary>
            The total accuracy
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SingleChallenge.Update(System.Single)">
            <summary>
            Updates the total accuracy
            </summary>
            <param name="tripleAccuracy">The new total accuracy of the challenge</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SingleChallenge.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SingleChallenge.Save">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.UserService.ChallengeData">
            <summary>
            Cumulative challenge data
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ChallengeData.#ctor">
            <summary>
            Cumulative challenge data
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ChallengeData.AllData">
            <summary>
            Data of all challenges
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ChallengeData.Children">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ChallengeData.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ChallengeData.Save">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ChampionshipManager.Children">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ChampionshipManager.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ChampionshipManager.Save">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ChampionshipManager.SignUp(System.String,System.String)">
            <summary>
            Signs the user to a championship
            </summary>
            <param name="title">The title of the championship</param>
            <param name="div">The division the user takes part in</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ChampionshipManager.InChampionship(System.String)">
            <summary>
            Whether the user has participated in a championship
            </summary>
            <param name="championship">The name of the championship</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ChampionshipManager.ChampionshipDivision(System.String)">
            <summary>
            Gets the division the user participated in in the championship
            </summary>
            <param name="championship">The name of the championship</param>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.UserService.ShopData">
            <summary>
            The data of the shop as a whole
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.UserService.ShopData.ShopCash">
            <summary>
            The data of the user's coins
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopData.ShopCash.Coins">
            <summary>
            The amount of coins the user has
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopData.ShopCash.Energy">
            <summary>
            The amount of energy the user has
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopData.ShopCash.Resonance">
            <summary>
            The amount of resonance the user has
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopData.ShopCash.Children">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopData.ShopCash.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopData.ShopCash.Save">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopData.#ctor">
            <summary>
            The data of the shop as a whole
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopData.Children">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopData.CashManager">
            <summary>
            The data of the user's coins
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopData.StoreManager">
            <summary>
            The data of the shop's items
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopData.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopData.Save">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.UserService.ItemRarity">
            <summary>
            The rarity of the item
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.UserService.StoreItem">
            <summary>
            The base class of an item in the store
            </summary>
            <param name="name">The display name of the item</param>
            <param name="fullName">The name of the item in the save file</param>
            <param name="stackable">Whether the item can be stacked</param>
            <param name="description">The description of the item</param>
            <param name="rarity">The rarity of the item</param>
            <param name="inShop">Whether the item is in the shop by default</param>
            <param name="cost">The cost of the item</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.StoreItem.#ctor(System.String,System.String,System.Boolean,System.String,UndyneFight_Ex.UserService.ItemRarity,System.Boolean,System.Int32)">
            <summary>
            The base class of an item in the store
            </summary>
            <param name="name">The display name of the item</param>
            <param name="fullName">The name of the item in the save file</param>
            <param name="stackable">Whether the item can be stacked</param>
            <param name="description">The description of the item</param>
            <param name="rarity">The rarity of the item</param>
            <param name="inShop">Whether the item is in the shop by default</param>
            <param name="cost">The cost of the item</param>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.InShop">
            <summary>
            Whether the item is buyable from the shop (Default true)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.Name">
            <summary>
            The display name of the item
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.FullName">
            <summary>
            THe saved name of the item (Affects save file)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.Contributor">
            <summary>
            The contributor to the item
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.Stackable">
            <summary>
            Whether the item is stackable
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.Description">
            <summary>
            The description of the item in shop
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.DisplayDescription">
            <summary>
            The description displayed at the user UI (Default <see cref="P:UndyneFight_Ex.UserService.StoreItem.Description"/>)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.UnlockRequirement">
            <summary>
            The unlock requirement of the item that will be shown in the shop when locked
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.Rarity">
            <summary>
            The rarity of the item
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.Image">
            <summary>
            The icon of the item
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.Count">
            <summary>
            The count of the item you have if it's stackable (Default 0)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.Cost">
            <summary>
            The cost of the item to buy in shop
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.Activated">
            <summary>
            Whether the item is currently activated
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.Affecting">
            <summary>
            Whether the item is currently being used
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ReducePercentage">
            <summary>
            The percentage of the score to reduce if <see cref="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.ReduceScore"/> is true
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.Disposable">
            <summary>
            Whether the item will automatically be removed from the inventory when chart finishes
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.StoreItem.Vars">
            <summary>
            A dictionary of variables you can use for customization
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ModeText">
            <summary>
            The text of the current mode of the item, only modify this if <see cref="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Cycle"/> is true
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.Attributes">
            <summary>
            The attributes of the item
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.UserService.StoreItem.ItemAttribute">
            <summary>
            Attributes to the item
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.None">
            <summary>
            No attribute
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Decoration">
            <summary>
            The item serves as a decoration only
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Consumable">
            <summary>
            The item can be used during charts
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Memory">
            <summary>
            The item is actually a memory (And should NOT have <see cref="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Consumable"/> set to true)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.VoidScore">
            <summary>
            Whether the score of the chart will be voided when used
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.ReduceScore">
            <summary>
            Whether the score of the chart will be reduced when used
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Initialize">
            <summary>
            Whether the <see cref="M:UndyneFight_Ex.UserService.StoreItem.InitializeItem"/> will run
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Cycle">
            <summary>
            Whether the item has multiple modes and can be cycled in the menu
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.StoreItem.TriggerCondition">
            <summary>
            The trigger condition of the item (Will run constantly through the chart)
            </summary>
            <returns>Whether the item should be triggered</returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.StoreItem.InitializeItem">
            <summary>
            Initializes the item
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.StoreItem.Used">
            <summary>
            The effect of the item when used if <see cref="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Consumable"/> is true
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.StoreItem.Decoration">
            <summary>
            The function for items to execute during charts if <see cref="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Decoration"/> is true
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.StoreItem.Cycling">
            <summary>
            The function to execute when the item is being cycled if <see cref="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.Cycle"/> is true
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.StoreItem.ValidateItem(UndyneFight_Ex.SongSystem.SongPlayData)">
            <summary>
            If <see cref="P:UndyneFight_Ex.UserService.StoreItem.InShop"/> is set to false, this function will be the validation check for whether the item is unlocked
            </summary>
            <param name="data">The chart result data</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.StoreItem.VoidScoreCheck">
            <summary>
            If <see cref="F:UndyneFight_Ex.UserService.StoreItem.ItemAttribute.VoidScore"/> is true, this function will serve as the additional check
            </summary>
            <returns>Whether the score will be voided</returns>
        </member>
        <member name="T:UndyneFight_Ex.UserService.ShopItemData">
            <summary>
            The data of the shop items
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopItemData.AllItems">
            <summary>
            The list of all items available for the user to buy
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopItemData.Children">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ShopItemData.UserItems">
            <summary>
            The list of items the user has unlocked
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopItemData.AddToItemList(UndyneFight_Ex.UserService.StoreItem)">
            <summary>
            Adds an item to the list of items the user can buy
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopItemData.ConsumeItem(System.String,System.Int32)">
            <summary>
            Consumes an item
            </summary>
            <param name="itemName">The name of the item to consume (Use <see cref="P:UndyneFight_Ex.UserService.StoreItem.FullName"/>)</param>
            <param name="count">The amount of the item to consume (Default 1)</param>
            <returns>Whether the item usage was successful</returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopItemData.ConsumeItem(UndyneFight_Ex.UserService.StoreItem,System.Int32)">
            <summary>
            Consumes an item
            </summary>
            <param name="item">The item to consume</param>
            <param name="count">The amount of the item to consume (Default 1)</param>
            <returns>Whether the item usage was successful</returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopItemData.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ShopItemData.Save">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.UserService.SongData">
            <summary>
            Song data of a chart
            </summary>
            <param name="name">The chart to check (Use <see cref="P:UndyneFight_Ex.SongSystem.IWaveSet.FightName"/>)</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongData.#ctor(System.String)">
            <summary>
            Song data of a chart
            </summary>
            <param name="name">The chart to check (Use <see cref="P:UndyneFight_Ex.SongSystem.IWaveSet.FightName"/>)</param>
        </member>
        <member name="T:UndyneFight_Ex.UserService.SongData.SongState">
            <summary>
            The chart results
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongData.SongState.Score">
            <summary>
            The score of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongData.SongState.Mark">
            <summary>
            The skill mark of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongData.SongState.AC">
            <summary>
            Whether the chart was completed in Full Combo
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongData.SongState.AP">
            <summary>
            Whether the chart was completed in All Perfect
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongData.SongState.Accuracy">
            <summary>
            The accuracy of the chart
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongData.SongState.UpdateNew(UndyneFight_Ex.SongSystem.SongResult)">
            <summary>
            Updates the user's song data
            </summary>
            <param name="result">The current result</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongData.SongState.#ctor(UndyneFight_Ex.IO.SaveInfo)">
            <summary>
            Gets a song state based on the save info
            </summary>
            <param name="info">The info to read</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongData.SongState.#ctor(UndyneFight_Ex.SongSystem.Difficulty,UndyneFight_Ex.SongSystem.SongResult)">
            <summary>
            Gets the song state based on the song result
            </summary>
            <param name="dif">The chart difficulty</param>
            <param name="result">The current result</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongData.SongState.ToInfo">
            <summary>
            Converts the song state to save info
            </summary>
            <returns></returns>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongData.SongName">
            <summary>
            The name of the song (<see cref="P:UndyneFight_Ex.SongSystem.IWaveSet.FightName"/>)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongData.Children">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongData.CurrentSongStates">
            <summary>
            The list of <see cref="T:UndyneFight_Ex.UserService.SongData.SongState"/>s for each difficulty
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongData.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongData.Save">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongData.UpdateNew(UndyneFight_Ex.SongSystem.Difficulty,UndyneFight_Ex.SongSystem.SongResult)">
            <summary>
            Updates the song state, if it does not exist, create one
            </summary>
            <param name="dif"></param>
            <param name="result"></param>
        </member>
        <member name="T:UndyneFight_Ex.UserService.SongManager">
            <summary>
            Song data manager
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongManager.Children">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.UserService.SongManager.AllData">
            <summary>
            All song data
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongManager.Acquire(System.String)">
            <summary>
            Gets a specific song data
            </summary>
            <param name="name">The name of the song</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongManager.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.SongManager.Save">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.UserService.RatingCalculator">
            <summary>
            A rating calculator to calculate the rating of a user by their rating
            </summary>
            <param name="songManager"></param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.RatingCalculator.#ctor(UndyneFight_Ex.UserService.SongManager)">
            <summary>
            A rating calculator to calculate the rating of a user by their rating
            </summary>
            <param name="songManager"></param>
        </member>
        <member name="T:UndyneFight_Ex.UserService.RatingCalculator.RatingList">
            <summary>
            A list of rating
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong">
            <summary>
            Data pf a single song
            </summary>
            <param name="name">The name of the song</param>
            <param name="difficulty">The difficulty of the song played</param>
            <param name="accuracy">The accuracy of the user</param>
            <param name="threshold">The complex difficulty of the song</param>
            <param name="transferAccuracy">The adjusted accuracy</param>
            <param name="scoreScale">The rating scale</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong.#ctor(System.String,UndyneFight_Ex.SongSystem.Difficulty,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Data pf a single song
            </summary>
            <param name="name">The name of the song</param>
            <param name="difficulty">The difficulty of the song played</param>
            <param name="accuracy">The accuracy of the user</param>
            <param name="threshold">The complex difficulty of the song</param>
            <param name="transferAccuracy">The adjusted accuracy</param>
            <param name="scoreScale">The rating scale</param>
        </member>
        <member name="F:UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong.difficulty">
            <summary>
            The difficulty of the song
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong.accuracy">
            <summary>
            The accuracy of the song
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong.threshold">
            <summary>
            The complex difficulty of the song
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong.transferAccuracy">
            <summary>
            The adjusted accuracy
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong.scoreResult">
            <summary>
            The final rating of the song
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong.name">
            <summary>
            The name of the song
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.UserService.RatingCalculator.RatingList.StrictDonors">
            <summary>
            The 7 charts of highest score accuracy
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.RatingCalculator.RatingList.CompleteDonor">
            <summary>
            The chart the user has cleared that has the highest clear constant
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.RatingCalculator.RatingList.FCDonor">
            <summary>
            The chart the user has FCd that has the highest AP constant
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.RatingCalculator.RatingList.APDonor">
            <summary>
            The chart the user has APd that has the highest AP constant
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.RatingCalculator.RatingList.Submit(System.Collections.Generic.IEnumerable{UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong},UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong,UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong,UndyneFight_Ex.UserService.RatingCalculator.RatingList.SingleSong)">
            <summary>
            Stores the rating list
            </summary>
            <param name="strictDonors">The list of highest accuracy charts</param>
            <param name="completeDonor">The cleared chart with highest clear constant</param>
            <param name="fcDonor">The FCd chart with highest AP constant</param>
            <param name="apDonor">The APd chart with highest AP constant</param>
        </member>
        <member name="M:UndyneFight_Ex.UserService.RatingCalculator.GenerateList">
            <summary>
            Generates a rating list
            </summary>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.RatingCalculator.CalculateRating">
            <summary>
            Calculates the rating
            </summary>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.UserService.Settings">
            <summary>
            User custom settings
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.Settings.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.Settings.Save">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.UserService.Statistic">
            <summary>
            User's statistic
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.Statistic.DeathCount">
            <summary>
            The death count of the user
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.Statistic.PlayedTime">
            <summary>
            The play time of the user
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.Statistic.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.Statistic.Save">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.UserService.ISaveLoad">
            <summary>
            Interface for savable data
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ISaveLoad.Save">
            <summary>
            Saves the <see cref="T:UndyneFight_Ex.IO.SaveInfo"/> data
            </summary>
            <returns>The data saved in the format of <see cref="T:UndyneFight_Ex.IO.SaveInfo"/></returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.ISaveLoad.Load(UndyneFight_Ex.IO.SaveInfo)">
            <summary>
            Loads the <see cref="T:UndyneFight_Ex.IO.SaveInfo"/> data
            </summary>
            <param name="info">The <see cref="T:UndyneFight_Ex.IO.SaveInfo"/> to save</param>
        </member>
        <member name="P:UndyneFight_Ex.UserService.ISaveLoad.Children">
            <summary>
            Nested save info
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.CreateNew(System.String,System.String)">
            <summary>
            Creates a new user
            </summary>
            <param name="name"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.Children">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.SongManager">
            <summary>
            The song manager for the user
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.VIP">
            <summary>
            Is the player a VIP
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.Password">
            <summary>
            The password of the account
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.PlayerName">
            <summary>
            The name of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.Skill">
            <summary>
            The rating of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.AbsoluteSkill">
            <summary>
            The absolute rating of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.PlayerStatistic">
            <summary>
            The statistics of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.Settings">
            <summary>
            The game settings of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.KeyBinds">
            <summary>
            The key binds of the player
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.ShopData">
            <summary>
            The player's shop data
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.ChampionshipData">
            <summary>
            The user's championship data
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.ChallengeData">
            <summary>
            The user's challenge data
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.UserService.User.Custom">
            <summary>
            Custom save info
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.Load(UndyneFight_Ex.IO.SaveInfo)">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.GenerateList">
            <summary>
            Generates a rating list
            </summary>
            <returns>The rating list</returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.Save">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.InChampionShip(System.String)">
            <summary>
            Whether the user had participated at the championship
            </summary>
            <param name="championship">The name of the championship</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.ChampionShipDiv(System.String)">
            <summary>
            The division the user participated in in the championship
            </summary>
            <param name="championship">The name of the championship</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.SongPlayed(System.String)">
            <summary>
            Whether the user had played this song before
            </summary>
            <param name="curFight">The name of the song</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.GetSongData(System.String)">
            <summary>
            The song data the user has
            </summary>
            <param name="curFight">The name of the song</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.CheckPassword(System.String)">
            <summary>
            Whether the password matches the user's password
            </summary>
            <param name="password">The password the player entered</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.UserService.User.Logout">
            <summary>
            Invokes logout event
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.PlayerManager.CurrentUser">
            <summary>
            The current user that is logged in
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.PlayerManager.currentPlayer">
            <summary>
            The name of the current user
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.PlayerManager.UserLogin">
            <summary>
            Whether is user is logged in
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.PlayerManager.PlayerSkill">
            <summary>
            The rating of the user
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.SongSystem.IWaveSet">
            <summary>
            The interface of the chart
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.IWaveSet.Start">
            <summary>
            The action to invoke when the chart begins, do NOT add the 'override' keyword or else it will override the function
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.IWaveSet.Noob">
            <summary>
            Barrage for Noob difficulty
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.IWaveSet.Easy">
            <summary>
            Barrage for Easy difficulty
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.IWaveSet.Normal">
            <summary>
            Barrage for Normal difficulty
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.IWaveSet.Hard">
            <summary>
            Barrage for Hard difficulty
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.IWaveSet.Extreme">
            <summary>
            Barrage for Extreme difficulty
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.IWaveSet.ExtremePlus">
            <summary>
            Barrage for Extreme+ difficulty
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.IWaveSet.Music">
            <summary>
            File name of the chart song
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.IWaveSet.FightName">
            <summary>
            Display name of the chart (Affects save file)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.IWaveSet.Attributes">
            <summary>
            The <see cref="T:UndyneFight_Ex.SongSystem.SongInformation"/> attributes of the chart
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.SongSystem.IWaveSetS">
            <summary>
            Simplified version of <see cref="T:UndyneFight_Ex.SongSystem.IWaveSet"/>, note that all functions in <see cref="T:UndyneFight_Ex.SongSystem.IWaveSet"/> will be overwritten by <see cref="M:UndyneFight_Ex.SongSystem.IWaveSetS.Chart"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.IWaveSetS.Chart">
            <summary>
            The chart function, contains all difficulties
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.SongSystem.IChampionShip">
            <summary>
            If the chart is a championship chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.IChampionShip.GameContent">
            <summary>
            The <see cref="T:UndyneFight_Ex.SongSystem.IWaveSet"/> content, which is the chart itself
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.IChampionShip.DifficultyPanel">
            <summary>
            The [Name, Difficulty] of the championship chart
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.SongSystem.WaveConstructor">
            <summary>
            Wave data
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.SongSystem.WaveConstructor.loadedContents">
            <summary>
            The list of loaded contents to dispose
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.SongSystem.WaveConstructor.loadedImages">
            <summary>
            The list of loaded images to dispose
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.SongSystem.WaveConstructor._isMultiBPM">
            <summary>
            Whether the chart has multiple BPMs
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.SongSystem.WaveConstructor._MultiBPM">
            <summary>
            The list of bpms and their durations
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.#ctor(System.Single,System.Boolean)">
            <summary>
            Initializes the wave data
            </summary>
            <param name="beatTime">Duration of 1 beat or the BPM</param>
            <param name="isBPM">Whether <paramref name="beatTime"/> is the BPM itself (Default false)</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.#ctor(System.ValueTuple{System.Single,System.Single}[])">
            <summary>
            Initializes the wave data
            </summary>
            <param name="beats">Duration of each beat, [Beat Count, BPM]</param>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.WaveConstructor.SingleBeat">
            <summary>
            Duration of 1 beat
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.BeatTime(System.Single)">
            <summary>
            Duration of the given beat time in frames
            </summary>
            <param name="x">Amount of beats</param>
            <returns>Amount of frames for <paramref name="x"/> beats</returns>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.InBeat(System.Single)">
            <summary>
            Whether the chart is at the given beat
            </summary>
            <param name="beat">The beat to check</param>
            <returns>Whether the chart is currently at the given beat</returns>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.InBeat(System.Single,System.Single)">
            <summary>
            Whether the chart is currently in the range of the given beats
            </summary>
            <param name="leftBeat">Starting beat</param>
            <param name="rightBeat">Ending beat</param>
            <returns>Whether the chart is currently between the given beat</returns>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.At0thBeat(System.Single)">
            <summary>
            Check whether the chart is currently at a multiple of the given beat
            </summary>
            <param name="beatCount">The beat to check</param>
            <returns>Whether the chart is at a multiple of the Xth beat</returns>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.AtKthBeat(System.Single,System.Single)">
            <summary>
            Check whether the chart is currently at a multiple of the given beat plus the frames given
            </summary>
            <param name="beatCount">The beat to check</param>
            <param name="K">The frame remainder to check</param>
            <returns>Whether the chart is at a multiple of the Xth beat plus the frames given</returns>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.DelayBeat(System.Single,System.Action)">
            <summary>
            Invokes an action after the given beats
            </summary>
            <param name="delayBeat">The amount of    to delay</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.Delay(System.Single,System.Action)">
            <summary>
            Invokes an action after the given frames
            </summary>
            <param name="delay">The amount of frames to delay</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.ForBeat(System.Single,System.Action)">
            <summary>
            Invokes an action for the next given beats (Using int calculation, recommended not to use)
            </summary>
            <param name="durationBeat">The duration of the action</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.ForBeat120(System.Single,System.Action)">
            <summary>
            Invokes an action for the next given beats (Using float calculation, recommended to use)
            </summary>
            <param name="durationBeat">The duration of the action</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.ForBeat(System.Single,System.Single,System.Action)">
            <summary>
            Invokes an action for the next given beats after the given beats (Using int calculation, recommended not to use)
            </summary>
            <param name="delayBeat">The amount of beats to delay before invoking the action</param>
            <param name="durationBeat">The duration of the action</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.ForBeat120(System.Single,System.Single,System.Action)">
            <summary>
            Invokes an action for the next given beats after the given beats (Using float calculation, recommended to use)
            </summary>
            <param name="delayBeat">The amount of beats to delay before invoking the action</param>
            <param name="durationBeat">The duration of the action</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.WaveConstructor.ArrowProcesser">
            <summary>
            The process for all arrows that will be executed in <see cref="M:UndyneFight_Ex.SongSystem.WaveConstructor.CreateChart(System.Single,System.Single,System.Single,System.String[])"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.SplitBracket(System.String)">
            <summary>
            Gets the contents of the strings contained within ()
            </summary>
            <param name="origin">The source string</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If amount of ( doesn't equal to )</exception>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.MakeChartObject(System.Single,System.String,System.Single,UndyneFight_Ex.Fight.Functions.ArrowAttribute,System.Boolean)">
            <summary>
            This is the most unmaintainable code as rated in the MSVS Code Metrics, only having 29/100
            </summary>
            <param name="shootShieldTime"></param>
            <param name="origin"></param>
            <param name="speed"></param>
            <param name="arrowAttribute"></param>
            <param name="normalized"></param>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.SongSystem.WaveConstructor.ChartSettings">
            <summary>
            The settings of the charts
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.SongSystem.WaveConstructor.ChartSettings.GBAppearVolume">
            <summary>
            The appearing volume of <see cref="T:UndyneFight_Ex.Entities.GreenSoulGB"/> (Default 0.5f)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.SongSystem.WaveConstructor.ChartSettings.GBShootVolume">
            <summary>
            The shooting volume of <see cref="T:UndyneFight_Ex.Entities.GreenSoulGB"/> (Default 0.5f)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.SongSystem.WaveConstructor.ChartSettings.VoidArrowVolume">
            <summary>
            The volume of collision of <see cref="T:UndyneFight_Ex.Entities.Arrow"/> that has <see cref="P:UndyneFight_Ex.Entities.Arrow.VoidMode"/> set to true (Default 0.5f)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.SongSystem.WaveConstructor.ChartSettings.GreenTap">
            <summary>
            Whether all Tap arrows are displayed as green outlined arrows (Default false)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.WaveConstructor.ChartSettings.GBFollowing">
            <summary>
            Whether the <see cref="T:UndyneFight_Ex.Entities.GreenSoulGB"/> follows the player rotation or not (Default false)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.WaveConstructor.Settings">
            <summary>
            The <see cref="T:UndyneFight_Ex.SongSystem.WaveConstructor.ChartSettings"/> of the chart (Note that the settings persist)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.RegisterFunction(System.String,System.Action)">
            <summary>
            Registers a function for <see cref="M:UndyneFight_Ex.SongSystem.WaveConstructor.CreateChart(System.Single,System.Single,System.Single,System.String[])"/> to execute
            </summary>
            <param name="name">The name of the function</param>
            <param name="action">The action to invoke when executed</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.RegisterFunctionOnce(System.String,System.Action)">
            <summary>
            Registers a one time function for <see cref="M:UndyneFight_Ex.SongSystem.WaveConstructor.CreateChart(System.Single,System.Single,System.Single,System.String[])"/> to execute, function will be unregistered in the next frame
            </summary>
            <param name="name">The name of the function</param>
            <param name="action">The action to invoke when executed</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.ArrowAllocate(System.Int32,System.Int32)">
            <summary>
            Allocates a direction for arrows
            </summary>
            <param name="slot">The slot to allocate in (Range is [0, 9])</param>
            <param name="direction">The direction to allocate</param>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.WaveConstructor.LastArrow">
            <summary>
            The last arrow created from <see cref="M:UndyneFight_Ex.SongSystem.WaveConstructor.CreateChart(System.Single,System.Single,System.Single,System.String[])"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.WaveConstructor.CurrentTime">
            <summary>
            The current time calculated in <see cref="M:UndyneFight_Ex.SongSystem.WaveConstructor.CreateChart(System.Single,System.Single,System.Single,System.String[])"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.WaveConstructor.Temps">
            <summary>
            Temporary variable slot you can use, has a size of 100
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.WaveConstructor.Arguments">
            <summary>
            Arguments supplied to the function in the strings in <seealso cref="M:UndyneFight_Ex.SongSystem.WaveConstructor.CreateChart(System.Single,System.Single,System.Single,System.String[])"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.CreateChart(System.Single,System.Single,System.Single,System.String[])">
            <summary>
            String based chart creator, use an empty string for an empty beat.<br/>
            Optional Args: "!": No Score, "^": Accelerate, "&lt;": RotateL, "&gt;": RotateR, "*": Tap, "~": Void Sprite, "_": Hold<br/>
            Order of parsing: ~*_&lt;&gt;^!<br/>
            Direction Args: "R": Random, "D": Different, "+/-x" Add/Sub x to the last dir. , "$x": Fixed on x direction, "Nx": Not x, "Ax": The xth allocated direction<br/>
            Optional Color Args: 0-> Blue, 1-> Red, 2-> Green, 3-> Purple<br/>
            Optional Rotation Args: 0-> None, 1-> Reverse, 2-> Diagonal<br/>
            GB：#xx#yz, Where "xx" means the duration beat, "y" beats direction, "z" means color, replace '#' with '%' if you don't want arrows<br/>
            Combinations: "(R)(+0)", NOT "R(+0)"<br/>
            Misc: use ' to multiply the speed of the arrow, &lt;&lt; or &gt;&gt; to adjust the current beat (>>0.5 will skip 0.5 beats)<br/>
            Use <see cref="M:UndyneFight_Ex.SongSystem.WaveConstructor.RegisterFunction(System.String,System.Action)"/> or <see cref="M:UndyneFight_Ex.SongSystem.WaveConstructor.RegisterFunctionOnce(System.String,System.Action)"/> to declare functions to execute them inside here<br/>
            For example RegisterFunctionOnce("func", ()=> {});<br/>
            "(func)(R)", will invoke the action in "func" and creates an arrow<br/>
            "!!X/Y", Each item will last 'Beat / 2X' beats (i.e. X = 2 then 1 beat is 4 items instead of the usual 8) for the next Y beats (If Y is undefined then it will last for the rest of the function)<br/>
            You can add arguments in the form of "&lt;Arg1,Arg2...&gt;Action"<br/>
            You may use <see cref="P:UndyneFight_Ex.SongSystem.WaveConstructor.Arguments"/> inside the declared action in RegisterFunction(Once) to access them.<br/>
            Adding '@' at the end would apply a tag to the arrow, i.e. "$0@E" would apply the tag "E" to the arrow
            </summary>
            <param name="Delay">The delay for the events to be executed, generally used for preventing spawning immediately within view</param>
            <param name="Beat">Duration of 8 beats, generally used with <see cref="M:UndyneFight_Ex.SongSystem.WaveConstructor.BeatTime(System.Single)"/></param>
            <param name="arrowspeed">The speed of the arrows</param>
            <param name="Barrage">The array of strings that contains the barrage</param>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.Update">
            <summary>
            Removes one time functions and checks for BPM change
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.LoadContent``1(System.String,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads a file (Cross-platform, will auto dispose)
            </summary>
            <typeparam name="T">Content type</typeparam>
            <param name="path">Path to file</param>
            <param name="cm">Content manager to use</param>
            <returns>The loaded content</returns>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.LoadImage(System.String)">
            <summary>
            Loads an image (.bmp /.gif /.jpg /.png, will auto dispose)
            </summary>
            <param name="path">Path of the image</param>
            <returns>The loaded texture</returns>
        </member>
        <member name="M:UndyneFight_Ex.SongSystem.WaveConstructor.Dispose">
            <summary>
            Unloads assets
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.SongSystem.SongInformation">
            <summary>
            The list of information of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.MusicOptimized">
            <summary>
            Whether the music is an .ogg file
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.DisplayName">
            <summary>
            The display name of the chart (Does not affect save data)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.SongAuthor">
            <summary>
            The composer of the song
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.BarrageAuthor">
            <summary>
            The charter
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.AttributeAuthor">
            <summary>
            The person who made the effects of the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.PaintAuthor">
            <summary>
            The artist of the chart cover
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.Extra">
            <summary>
            Extra text displayed on the loading screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.ExtraPosition">
            <summary>
            The position of the <see cref="P:UndyneFight_Ex.SongSystem.SongInformation.Extra"/> text
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.ExtraColor">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.Color"/> of the <see cref="P:UndyneFight_Ex.SongSystem.SongInformation.Extra"/> text
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.Hidden">
            <summary>
            Whether the chart is hidden or not, you can use a get; set; for setting this
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.MusicPreview">
            <summary>
            The beginning and end of the music preview (In seconds)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.Tags">
            <summary>
            The tags of the chart (Used in chart grouping)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.CompleteDifficulty">
            <summary>
            The difficulty constants for completing the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.ComplexDifficulty">
            <summary>
            The difficulty constant for achieving accuracy in the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.APDifficulty">
            <summary>
            The difficulty constants for All Perfecting the chart
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.SongSystem.SongInformation.UnlockedDifficulties">
            <summary>
            The difficulties that are unlocked, if they are locked, the player cannot play them
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.SongSystem.SkillMark">
             <summary>  
            Impeccable    -> All Perfect <br></br>
            Eminent       -> No Hit + 99% score<br></br>
            Excellent     -> No Hit + 98% score<br></br>
            Respectable   -> 96% score<br></br>
            Acceptable    -> 92% score<br></br>
            Ordinary      -> 75% score<br></br>
             </summary>
        </member>
        <member name="T:UndyneFight_Ex.GravityLine">
            <summary>
            Used for detecting blue soul platforms
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GravityLine.Reload">
            <summary>
            Resets the buffer of the gravity line
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GravityLine.Recover">
            <summary>
            Reduces the buffer
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GravityLine.enabled">
            <summary>
            Whether the gravity line is enabled
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GravityLine.Dispose">
            <summary>
            Removes the current gravity line from the global list
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GravityLine.SetPosition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the vertices of the gravity line
            </summary>
            <param name="v1">The first end of the line</param>
            <param name="v2">The other end of the line</param>
        </member>
        <member name="M:UndyneFight_Ex.GravityLine.SetWidth(System.Single)">
            <summary>
            Sets the width of the line
            </summary>
            <param name="width">The width to set</param>
        </member>
        <member name="M:UndyneFight_Ex.GravityLine.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a gravity line
            </summary>
            <param name="v1">The first end of the line</param>
            <param name="v2">The other end of the line</param>
        </member>
        <member name="P:UndyneFight_Ex.GravityLine.Rotation">
            <summary>
            The rotation of the line
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GravityLine.NormalRotation">
            <summary>
            The rotation of the normal of the line
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GravityLine.sticky">
            <summary>
            Whether the line is carries the soul or not
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GravityLine.IsCollideWith(UndyneFight_Ex.Entities.Player.Heart)">
            <summary>
            Whether the line is colliding with the heart
            </summary>
            <param name="player">The heart to check</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.GravityLine.Draw">
            <summary>
            Draws the line for collision
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.CollideRect">
            <summary>
            A rectangle with collision
            </summary>
            <param name="X">The x coordinate of the top left corner of the rectangle</param>
            <param name="Y">The y coordinate of the top left corner of the rectangle</param>
            <param name="Width">The width of the rectangle</param>
            <param name="Height">The height of the rectangle</param>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A rectangle with collision
            </summary>
            <param name="X">The x coordinate of the top left corner of the rectangle</param>
            <param name="Y">The y coordinate of the top left corner of the rectangle</param>
            <param name="Width">The width of the rectangle</param>
            <param name="Height">The height of the rectangle</param>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.Width">
            <summary>
            The width of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.Height">
            <summary>
            The height of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.X">
            <summary>
            The x coordinate of the top left corner of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.Y">
            <summary>
            The y coordinate of the top left corner of the rectangle
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.GetVertices">
            <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Vector2"/> coordinates of the vertices
            </summary>
            <returns>The array of vertices</returns>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a rectangle with collision with the given position and size
            </summary>
            <param name="pos">The position of the rectangle</param>
            <param name="size">The dimensions of the rectangle</param>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a rectangle with collision from a <see cref="T:Microsoft.Xna.Framework.Rectangle"/>
            </summary>
            <param name="rec">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/> to create from</param>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates a rectangle with collision from a <see cref="T:System.Drawing.RectangleF"/>
            </summary>
            <param name="rec">The <see cref="T:System.Drawing.RectangleF"/> to create from</param>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.Offset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Offsets the position of the rectangle
            </summary>
            <param name="vect">The vector displacement of the rectangle</param>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.GetCentre">
            <summary>
            Gets the centre of the rectangle
            </summary>
            <returns>The centre of the rectangle</returns>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.SetCentre(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the centre of the rectangle
            </summary>
            <param name="Centre">The coordinates of the centre</param>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.SetCentre(System.Single,System.Single)">
            <summary>
            Sets the centre of the rectangle
            </summary>
            <param name="X">The x coordinate of the center of the rectangle</param>
            <param name="Y">The y coordinate of the center of the rectangle</param>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.Intersects(UndyneFight_Ex.CollideRect)">
            <summary>
            Whether the rectangle is colliding with another <see cref="T:UndyneFight_Ex.CollideRect"/>
            </summary>
            <param name="collideRectAno">The other <see cref="T:UndyneFight_Ex.CollideRect"/> to check with</param>
            <returns>Whether there is collision</returns>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.Contain(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks whether does the rectangle contain the given point
            </summary>
            <param name="vect">The point to check</param>
            <returns>Whether the point is inside the rectangle</returns>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.ToRectangle">
            <summary>
            Converts a <see cref="T:UndyneFight_Ex.CollideRect"/> to <see cref="T:Microsoft.Xna.Framework.Rectangle"/> (Without rotation)
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Rectangle"/></returns>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.BottomLeft">
            <summary>
            The bottom left corner of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.BottomRight">
            <summary>
            The bottom right corner of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.TopLeft">
            <summary>
            The top left corner of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.TopRight">
            <summary>
            The top right corner of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.Size">
            <summary>
            The dimensions of the rectangle
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.op_Implicit(UndyneFight_Ex.CollideRect)~Microsoft.Xna.Framework.Rectangle">
            <summary>
            Converts the rectangle collision to a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> (No rotation)
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.op_Implicit(Microsoft.Xna.Framework.Rectangle)~UndyneFight_Ex.CollideRect">
            <summary>
            Converts the rectangle into a CollideRect
            </summary>
            <param name="rect">The rectangle to convert</param>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.op_Implicit(System.Drawing.RectangleF)~UndyneFight_Ex.CollideRect">
            <summary>
            Converts a <see cref="T:System.Drawing.RectangleF"/> into a CollideRect
            </summary>
            <param name="rect">The RectangleF to convert</param>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.Up">
            <summary>
            The y coordinate of the upper side of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.Down">
            <summary>
            The y coordinate of the lower side of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.Right">
            <summary>
            The x coordinate of the right side of the rectangle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.CollideRect.Left">
            <summary>
            The x coordinate of the left side of the rectangle
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.op_Addition(UndyneFight_Ex.CollideRect,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Displaces the rectangle by the given vector
            </summary>
            <param name="left">The rectangle to displace</param>
            <param name="right">The vector to displace it with</param>
            <returns>The displaced rectangle</returns>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.op_Subtraction(UndyneFight_Ex.CollideRect,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Displaces the rectangle by the given vector
            </summary>
            <param name="left">The rectangle to displace</param>
            <param name="right">The vector to displace it with</param>
            <returns>The displaced rectangle</returns>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.op_Addition(Microsoft.Xna.Framework.Vector2,UndyneFight_Ex.CollideRect)">
            <summary>
            Displaces the rectangle by the given vector
            </summary>
            <param name="left">The vector to displace it with</param>
            <param name="right">The rectangle to displace</param>
            <returns>The displaced rectangle</returns>
        </member>
        <member name="M:UndyneFight_Ex.CollideRect.op_Multiply(UndyneFight_Ex.CollideRect,System.Single)">
            <summary>
            Scales the rectangle
            </summary>
            <param name="left">The rectangle to scale</param>
            <param name="right">The scalar to multiply</param>
            <returns>The scaled rectangle</returns>
        </member>
        <member name="T:UndyneFight_Ex.ImageEntity">
            <summary>
            An entity that draws an image
            </summary>
            <param name="image">The image to draw</param>
        </member>
        <member name="M:UndyneFight_Ex.ImageEntity.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            An entity that draws an image
            </summary>
            <param name="image">The image to draw</param>
        </member>
        <member name="M:UndyneFight_Ex.ImageEntity.Update">
            <inheritdoc/>
        </member>
        <member name="E:UndyneFight_Ex.ImageEntity.OnDraw">
            <summary>
            Overrides the draw event
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.ImageEntity.Draw">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.AutoEntity">
            <summary>
            Draws an image with color and alpha
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.AutoEntity.BlendColor">
            <summary>
            The color of the image to draw
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.AutoEntity.Alpha">
            <summary>
            The alpha of the image
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.AutoEntity.PreMultiplyAlpha">
            <summary>
            Whether to enable pre-multiply alpha
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.AutoEntity.Anchor">
            <summary>
            The anchor of the image
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.AutoEntity.Draw">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.TextEntity">
            <summary>
            Draws a piece of static text
            </summary>
            <param name="text">The text to draw</param>
            <param name="centre">The centre of the text</param>
        </member>
        <member name="M:UndyneFight_Ex.TextEntity.#ctor(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a piece of static text
            </summary>
            <param name="text">The text to draw</param>
            <param name="centre">The centre of the text</param>
        </member>
        <member name="P:UndyneFight_Ex.TextEntity.BlendColor">
            <summary>
            The color of the text
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.TextEntity.Alpha">
            <summary>
            The alpha of the text
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.TextEntity.Text">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.TextEntity.Font">
            <summary>
            The font of the text
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.TextEntity.Draw">
            <summary>
            Draws the entity
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.TextEntity.Update">
            <summary>
            The update logic of the entity
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Entity">
            <summary>
            An entity base
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entity.#ctor">
            <summary>
            An entity base
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.Visible">
            <summary>
            Whether the entity is visible
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.AngleMode">
            <summary>
            Whether to use Radians (true) or Degrees (false) for the rotation angle
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entity.controlLayer">
            <summary>
            The controlling surface of the entity (Default <see cref="P:UndyneFight_Ex.Surface.Normal"/>)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.SpriteBatch">
            <summary>
            The sprite batch that is used for drawing
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entity.FormalDraw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws the given texture
            </summary>
            <param name="tex">The texture to draw</param>
            <param name="centre">The position to draw</param>
            <param name="color">The color of the texture</param>
            <param name="rotation">The rotation of the texture</param>
            <param name="rotateCentre">The center of rotation</param>
        </member>
        <member name="M:UndyneFight_Ex.Entity.FormalDraw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws the given texture
            </summary>
            <param name="tex">The texture to draw</param>
            <param name="centre">The position to draw</param>
            <param name="texArea">The rectangle area to draw the texture</param>
            <param name="color">The color of the texture</param>
            <param name="rotation">The rotation of the texture</param>
            <param name="rotateCentre">The center of rotation</param>
        </member>
        <member name="M:UndyneFight_Ex.Entity.FormalDraw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Draws the given texture
            </summary>
            <param name="tex">The texture to draw</param>
            <param name="centre">The position to draw</param>
            <param name="texArea">The rectangle area to draw the texture</param>
            <param name="color">The color of the texture</param>
            <param name="drawingScale">The scale of drawing</param>
            <param name="rotation">The rotation of the texture</param>
            <param name="rotateCentre">The center of rotation</param>
            <param name="spriteEffects">The sprite effect to apply on it</param>
        </member>
        <member name="M:UndyneFight_Ex.Entity.FormalDraw(Microsoft.Xna.Framework.Graphics.Texture2D,UndyneFight_Ex.CollideRect,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the given texture
            </summary>
            <param name="tex">The texture to draw</param>
            <param name="area">The area to draw the texture in</param>
            <param name="color">The color of the texture to draw</param>
        </member>
        <member name="M:UndyneFight_Ex.Entity.FormalDraw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the given texture in a restricted area
            </summary>
            <param name="tex">The texture to draw</param>
            <param name="area">The area of the texture to draw</param>
            <param name="restrict">The area the texture can be drawn in</param>
            <param name="color">The color of the texture to draw</param>
        </member>
        <member name="M:UndyneFight_Ex.Entity.FormalDraw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws the given texture
            </summary>
            <param name="tex">The texture to draw</param>
            <param name="centre">The position to draw the texture</param>
            <param name="color">The color of the texture to draw</param>
            <param name="drawingScale">The scale of the drawn texture</param>
            <param name="rotation">The rotation of the texture</param>
            <param name="rotateCentre">The center of rotation</param>
        </member>
        <member name="M:UndyneFight_Ex.Entity.FormalDraw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws the given texture
            </summary>
            <param name="tex">The texture to draw</param>
            <param name="centre">The position to draw the texture</param>
            <param name="color">The color of the texture to draw</param>
            <param name="drawingScale">The scale of the drawn texture</param>
            <param name="rotation">The rotation of the texture</param>
            <param name="rotateCentre">The center of rotation</param>
        </member>
        <member name="M:UndyneFight_Ex.Entity.GeneralDraw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Vector2},System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{UndyneFight_Ex.CollideRect},System.Nullable{UndyneFight_Ex.CollideRect},System.Nullable{System.Single})">
            <summary>
            A general texture drawing function that integrates all functionalities from all FormalDraw functions
            </summary>
            <param name="texture">The texture to draw</param>
            <param name="position">The position to draw the texture</param>
            <param name="color">The color of the texture to draw (Default white)</param>
            <param name="scale">The scale of the texture to draw (Default 1)</param>
            <param name="rotation">The rotation of the texture to draw in radians (Default 0)</param>
            <param name="spriteOrigin">The origin of the texture to draw (Default center of texture)</param>
            <param name="texArea">The bounds of drawing on the screen (Default null for normal drawing)</param>
            <param name="sourceRect">The region of the texture to render (Default null for full texture)</param>
            <param name="depth">The depth of the texture to draw (Default current depth)</param>
        </member>
        <member name="M:UndyneFight_Ex.Entity.NotInScene(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Check if the texture is inside the current view
            </summary>
            <param name="tex">The texture to check</param>
            <param name="centre">The position of the texture</param>
            <param name="drawingScale">The drawing scale of the texture</param>
            <param name="rotation">The rotation of the texture</param>
            <param name="rotateCentre">The center of rotation</param>
            <returns>Whether the texture is inside the current view</returns>
        </member>
        <member name="P:UndyneFight_Ex.Entity.Depth">
            <summary>
            The depth of the entity (The higher the value is, the less shallow it is)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.ImageCentre">
            <summary>
            The centre of the image
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.Image">
            <summary>
            The image of the entity to draw
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.Entity.collidingBox">
            <summary>
            Do not use this variable
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.Rotation">
            <summary>
            The rotation of the entity
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.Scale">
            <summary>
            The scale of the entity
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.CollidingBox">
            <summary>
            The colliding box of the entity
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.Centre">
            <summary>
            The centre of the entity
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Entity.DrawOptimize">
            <summary>
            Whether the entity will be drawn regardless whether it is inside of the current view (false -> Drawn regardless, true -> Check if inside screen)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entity.Draw">
            <summary>
            The rendering logic of the entity
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Entity.CreateShinyEffect(System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates an expanding fade out effect of this entity
            </summary>
            <param name="color">The color of the effect</param>
            <param name="image">The image of the effect</param>
            <returns>The created effect</returns>
        </member>
        <member name="M:UndyneFight_Ex.Entity.CreateRetentionEffect(System.Single,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Creates a drag effect of this entity
            </summary>
            <param name="time">The duration of the drag</param>
            <param name="color">The color of the effect</param>
        </member>
        <member name="M:UndyneFight_Ex.Entity.ShinyEffect.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entity.ShinyEffect.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entity.RetentionEffect.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.Entity.RetentionEffect.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.GameObject">
            <summary>
            A game object
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.UpdateChildren">
            <summary>
            Whether the <see cref="P:UndyneFight_Ex.GameObject.ChildObjects"/> will be updated as well
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.ChildrenUpdateFirst">
            <summary>
            Whether the <see cref="P:UndyneFight_Ex.GameObject.ChildObjects"/> updates before this object updates
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.CurrentScene">
            <summary>
            The current scene
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.CurrentFightingScene">
            <summary>
            The current <see cref="T:UndyneFight_Ex.Entities.SongFightingScene"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.UpdateIn120">
            <summary>
            Whether the object will be updated every 120 frames or 60 frames (It is better to set this as true)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.BeingUpdated">
            <summary>
            Whether the object is being updated
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.UpdateEnabled">
            <summary>
            Whether the object will be updated
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.CrossScene">
            <summary>
            Whether the object will persist after changing to another scene
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.ContainTag(System.String)">
            <summary>
            Whether the object contains the given tag
            </summary>
            <param name="tagName">The tag to check</param>
            <returns>Whether the object contains the given tag</returns>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.Broadcast(System.String)">
            <summary>
            Broadcasts an event to all objects
            </summary>
            <param name="info">The name of the event</param>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.TryDetect(System.String)">
            <summary>
            Checks whether an event was broadcasted
            </summary>
            <param name="tagName"> The name of the event</param>
            <returns>Whether the event is being broadcasted, if so, return its arguments too</returns>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.Tags">
            <summary>
            The tags of the game object
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.HasTag">
            <summary>
            Whether the game object has any tags
            </summary>
            <returns></returns>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.Extras">
            <summary>
            An extra variable for manipulation
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.ChildObjects">
            <summary>
            The list of child game objects
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.Update">
            <summary>
            The logic to run each frame
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.Start">
            <summary>
            The initialization of the object
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.TreeUpdate">
            <summary>
            Updates the object and its children
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.Disposed">
            <summary>
            Whether the game object is disposed
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.Kill">
            <summary>
            This does not invoke the <see cref="M:UndyneFight_Ex.GameObject.Dispose"/> event
            </summary>
        </member>
        <member name="E:UndyneFight_Ex.GameObject.OnDispose">
            <summary>
            The event to execute when the object is disposed
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameObject.FatherObject">
            <summary>
            The father game object of this child game object (if any)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.AddChild(UndyneFight_Ex.GameObject)">
            <summary>
            Adds a child to the current game object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:UndyneFight_Ex.GameObject.GetDrawableTree">
            <summary>
            Gets the object itself and its children that is of type <see cref="T:UndyneFight_Ex.Entity"/>
            </summary>
            <returns>The list of entities</returns>
        </member>
        <member name="T:UndyneFight_Ex.Tag">
            <summary>
            The Tag class
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:UndyneFight_Ex.Tag.#ctor(System.String)">
            <summary>
            The Tag class
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:UndyneFight_Ex.Tag.tagName">
            <summary>
            The name of the tag
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GravityEntity">
            <summary>
            An entity that has gravitational motion
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GravityEntity.#ctor">
            <summary>
            An entity that has gravitational motion
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GravityEntity.Gravity">
            <summary>
            The gravitational force
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GravityEntity.GravityDirection">
            <summary>
            The direction of the gravity (Default downwards)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GravityEntity.Speed">
            <summary>
            The speed of the entity
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GravityEntity.Update">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.GravityEntity.Draw">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.Achievements.Achievement.AchievementIntroduction">
            <summary>
            The requirements/description of the achievement
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Achievements.Achievement.CheckType">
            <summary>
            The data to check, either the user or song
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Achievements.Achievement.FullProgress">
            <summary>
            The total progress of the achievement
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Achievements.Achievement.Title">
            <summary>
            The title of the achievement
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Achievements.Achievement.CurrentProgress">
            <summary>
            The current progress of the achievement
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Achievements.Achievement.Achieved">
            <summary>
            Whether the achievement had been achieved
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Achievements.Achievement.Hidden">
            <summary>
            Whether it is a hidden achievement or not
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Achievements.Achievement.Locked">
            <summary>
            Whether the achievement is forcefully disabled
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.Achievements.Achievement.ID">
            <summary>
            The ID of the achievement
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Achievements.AchievementManager.PushAchievement(UndyneFight_Ex.Achievements.Achievement)">
            <summary>
            Adds an achievement
            </summary>
            <param name="achievement">The achievement to add</param>
        </member>
        <member name="T:UndyneFight_Ex.Achievements.AchievementUI">
            <summary>
            v0.3.0+ Achievement UI
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.LoadingScene">
            <summary>
            Loading scene
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.LoadingScene.Update">
            <inheritdoc/>
        </member>
        <member name="T:UndyneFight_Ex.SongLoadingScene">
            <summary>
            Loading a song
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.SongLoadingScene.#ctor(UndyneFight_Ex.Entities.SongFightingScene.SceneParams)">
            <summary>
            Creates a loading scene
            </summary>
            <param name="songParams">The parameters of the chart</param>
        </member>
        <member name="M:UndyneFight_Ex.SongLoadingScene.#ctor(UndyneFight_Ex.Challenge,UndyneFight_Ex.Entities.SongFightingScene.SceneParams[])">
            <summary>
            New load challenge method
            </summary>
            <param name="challenge">The challenge to start</param>
            <param name="songParams"></param>
        </member>
        <member name="M:UndyneFight_Ex.SongLoadingScene.Draw">
            <inheritdoc/>
        </member>
        <member name="M:UndyneFight_Ex.SongLoadingScene.Update">
            <inheritdoc/>
        </member>
        <member name="P:UndyneFight_Ex.FightSystem.CurrentSongs">
            <summary>
            Current song set selected
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightSystem.AllSongs">
            <summary>
            List of all charts
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightSystem.MainGameSongs">
            <summary>
            Main charts
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightSystem.CustomSongs">
            <summary>
            Custom charts
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightSystem.MainGameFights">
            <summary>
            Main fights (Essentially unused)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightSystem.ChampionShips">
            <summary>
            List of championships
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightSystem.CurrentChampionShip">
            <summary>
            Current selected championship
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightSystem.Challenges">
            <summary>
            List of challenges
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightSystem.ChallengeDictionary">
            <summary>
            Challenge dictionary, by title -> challenge
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightSystem.ExtraSongSets">
            <summary>
            Other song sets
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.FightSystem.PushSongSet(UndyneFight_Ex.SongSet)">
            <summary>
            Adds a song set
            </summary>
            <param name="songSet">The song set to add</param>
        </member>
        <member name="M:UndyneFight_Ex.FightSystem.RemoveSongSet(UndyneFight_Ex.SongSet)">
            <summary>
            Removes a song set
            </summary>
            <param name="songSet">The song set to remove</param>
        </member>
        <member name="M:UndyneFight_Ex.FightSystem.PushChampionShip(UndyneFight_Ex.ChampionShips.ChampionShip)">
            <summary>
            Adds a championship
            </summary>
            <param name="championShip">The championship to add</param>
        </member>
        <member name="M:UndyneFight_Ex.FightSystem.PushChallenge(UndyneFight_Ex.Challenge)">
            <summary>
            Adds a challenge
            </summary>
            <param name="challenge">The challenge to add</param>
        </member>
        <member name="M:UndyneFight_Ex.FightSystem.PushExtra(UndyneFight_Ex.Fight.IExtraOption)">
            <summary>
            Adds a fight
            </summary>
            <param name="classicFight">The fight to add</param>
        </member>
        <member name="M:UndyneFight_Ex.FightSystem.GetPlayableCharts">
            <summary>
            Gets all the playable charts
            </summary>
            <returns></returns>
        </member>
        <member name="T:UndyneFight_Ex.GameMain">
            <summary>
            This is the main type for your game.
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameMain.Initialize">
            <summary>
            Allows the game to perform any initialization it needs to before starting to run.
            This is where it can query for any required services and load any non-graphic
            related content.  Calling base.Initialize will enumerate through any components
            and initialize them as well.
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameMain.LoadContent">
            <summary>
            LoadContent will be called once per game and is the place to load
            all of your content.
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameMain.UnloadContent">
            <summary>
            UnloadContent will be called once per game and is the place to unload
            game-specific content.
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameMain.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Allows the game to run logic such as updating the world,
            checking for collisions, gathering input, and playing audio.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:UndyneFight_Ex.GameMain.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="P:UndyneFight_Ex.GameMain.RenderMs">
            <summary>
            Milliseconds taken to render
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameMain.RenderTicks">
            <summary>
            Ticks taken to render
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources">
            <summary>
            Resources that are used globally
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.LoadContent``1(System.String,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads a file (Cross-platform, internally calls <see cref="M:UndyneFight_Ex.DrawingLab.LoadContent``1(System.String,Microsoft.Xna.Framework.Content.ContentManager)"/>)
            </summary>
            <typeparam name="T">Content type</typeparam>
            <param name="path">Path to file</param>
            <param name="cm">Content manager to use</param>
            <returns>The loaded content</returns>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.AuroraShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Aurora"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.AuroraShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Aurora"/>
            </summary>
            <param name="eff">The shader itself</param>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.AuroraShader.Time">
            <summary>
            The time of the shader
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.AuroraShader.YCentre">
            <summary>
            NOT the y coordinate of the effect
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.AuroraShader.Slope">
            <summary>
            The slope for the color blending, the higher the value the more dominant the <see cref="P:UndyneFight_Ex.GlobalResources.Effects.AuroraShader.ThemeColorB"/> is
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.AuroraShader.ThemeColorA">
            <summary>
            The color on the left side
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.AuroraShader.ThemeColorB">
            <summary>
            The color on the right side
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.BlurShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Blur"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.BlurShader.Sigma">
            <summary>
            The intensity of the blue
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.BlurKawaseShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.BlurKawase"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.CameraShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Camera"/>, it is best to have knowledge of camera matrix before using this
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.BallShapingShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Cos1Ball"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.BallShapingShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Cos1Ball"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.BallShapingShader.Intensity">
            <summary>
            The intensity of the effect
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.BallShapingShader.ScreenScale">
            <summary>
            The screen scale
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.FireShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Fire"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.FireShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Fire"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.FireShader.Distort">
            <summary>
            The distortion intensity of the fire
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.FireShader.Height">
            <summary>
            The height of the fire
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.FireShader.PieceRate">
            <summary>
            The amount of the ashes
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.FireShader.Blend">
            <summary>
            The inner color of the fire
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.FireShader.Speed">
            <summary>
            The speed of the fire
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.FireShader.BlendEdge">
            <summary>
            The outer color of the fire
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.GrayShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Gray"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.GrayShader.Intensity">
            <summary>
            The intensity of the gray scale, [0, 1]
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.GrayShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Gray"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.LightSweepShader">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.LightSweep"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.LightSweepShader.Intensity">
            <summary>
            The intensity of the light beam
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.LightSweepShader.Width">
            <summary>
            The width of the light beam
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.LightSweepShader.Direction">
            <summary>
            The angle of the beam
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.LightSweepShader.Centre">
            <summary>
            The ventre of the beam
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.LightSweepShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.LightSweep"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.MosaicShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Mosaic"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.MosaicShader.MosiacSize">
            <summary>
            The size of the pixels
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.MosaicShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Mosaic"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.NeonLineShader">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.NeonLine"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.NeonLineShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.NeonLine"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.NeonLineShader.Speed">
            <summary>
            The speed of the lines
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.NeonLineShader.DrawingColor">
            <summary>
            The color of the lines
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.PolarShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Polar"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.PolarShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Polar"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.PolarShader.IType">
            <summary>
            The type of ditortion to apply
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.PolarShader.Intensity">
            <summary>
            The intensity of the distortion
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.RadialWaveShader">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.RadialWave"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.RadialWaveShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.RadialWave"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.RadialWaveShader.Progress">
            <summary>
            The progress of the wave, [0, 1]
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.RadialWaveShader.Radius">
            <summary>
            The radius of the wave
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.RadialWaveShader.Centre">
            <summary>
            The centre of the wave
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.ScaleShader">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.Scale"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.ScaleShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.Scale"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.ScaleShader.Intensity">
            <summary>
            The scale intensity
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.ScaleShader.Centre">
            <summary>
            The centre of the effect
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.ScatterShader">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.Scatter"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.ScatterShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.Scatter"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.ScatterShader.Intensity">
            <summary>
            The intensity of the scattering
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.ScatterShader.Time">
            <summary>
            The time of the shader
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.ScatterShader.Ratio">
            <summary>
            The ratio of the scattering
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.SeismicShader">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.Seismic"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.SeismicShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.Seismic"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.SeismicShader.Progress">
            <summary>
            The progress of the effect, [0, 1]
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.SeismicShader.Radius">
            <summary>
            The radius of the effect
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.SeismicShader.Centre">
            <summary>
            The centre of the effect
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.SpiralShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Spiral"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.SpiralShader.Time">
            <summary>
            The time of the shader
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.SpiralShader.Speed">
            <summary>
            The speed of the spiralling
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.SpiralShader.Intensity">
            <summary>
            The intensity of the spiralling
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.SpiralShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Spiral"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.StepSampleShader">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.StepSample"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.StepSampleShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class of <see cref="P:UndyneFight_Ex.FightResources.Shaders.StepSample"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.StepSampleShader.Intensity">
            <summary>
            The intensity of the sampling
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.StepSampleShader.CentreX">
            <summary>
            The x coordinate of the centre
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.StepSampleShader.CentreY">
            <summary>
            The y coordinate of the centre
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.TyndallShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Tyndall"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.TyndallShader.LightPos">
            <summary>
            The position of the light
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.TyndallShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Tyndall"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.WaveShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Wave"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.WaveShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Wave"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.WaveShader.Time">
            <summary>
            The time of the shader
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.WaveShader.Speed">
            <summary>
            The speed of the waving
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Effects.WaveShader.Intensity">
            <summary>
            The intensity of the shader, the 3 values are just for noise, you can assign only 1
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Effects.WaveShader.Frequency">
            <summary>
            The frequency of the shader, the 3 values are just for noise, you can assign only 1
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Effects.WrongShader">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Wrong"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.WrongShader.Time">
            <summary>
            The time of the shader
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Effects.WrongShader.Intensity">
            <summary>
            The intensity of the effect
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GlobalResources.Effects.WrongShader.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Shader class for <see cref="P:UndyneFight_Ex.FightResources.Shaders.Wrong"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Font">
            <summary>
            A list of built-in fonts
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Font.FightFont">
            <summary>
            Mars Needs Cunnilingus
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Font.NormalFont">
            <summary>
            Determination Mono
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Font.SansFont">
            <summary>
            Sans Undertale
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Font.DamageFont">
            <summary>
            Hachicro
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Font.Japanese">
            <summary>
            ta_pop_M
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Font.UIFont">
            <summary>
            Crypt of Tomorrow
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GlobalResources.Font.Chinese">
            <summary>
            FZXS 12
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GlobalResources.Sprites">
            <summary>
            A list of built-in sprites
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.cursor">
            <summary>
            Cursor sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.login">
            <summary>
            Legacy LOGIN sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.championShip">
            <summary>
            Legacy CHAMPIONSHIP sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.hashtex">
            <summary>
            Hash texture
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.hashtex2">
            <summary>
            Hash texture 2
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.mainGame">
            <summary>
            Legacy MAIN GAME sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.options">
            <summary>
            Legacy OPTIONS sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.achievements">
            <summary>
            Legacy ACHIVEMENTS sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.record">
            <summary>
            Legacy RECORD sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.debugArrow">
            <summary>
            Debug vector arrow sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.loadingText">
            <summary>
            Loading text
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.progressArrow">
            <summary>
            Loading arrow
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.medal">
            <summary>
            Blue star medal
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.starMedal">
            <summary>
            Purple star medal
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.brimMedal">
            <summary>
            Empty medal
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GlobalResources.Sprites.loadingTexture">
            <summary>
            Root texture
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.FightResources.LoadContent``1(System.String,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads a file (Cross-platform, internally calls <see cref="M:UndyneFight_Ex.DrawingLab.LoadContent``1(System.String,Microsoft.Xna.Framework.Content.ContentManager)"/>)
            </summary>
            <typeparam name="T">Content type</typeparam>
            <param name="path">Path to file</param>
            <param name="cm">Content manager to use</param>
            <returns>The loaded content</returns>
        </member>
        <member name="T:UndyneFight_Ex.FightResources.Font">
            <summary>
            A list of built-in fonts
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Font.FightFont">
            <summary>
            Mars Needs Cunnilingus
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Font.SansFont">
            <summary>
            Sans Undertale
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Font.DamageFont">
            <summary>
            Hachicro
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Font.NormalFont">
            <summary>
            Determination Mono
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Font.Japanese">
            <summary>
            ta_pop_M
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Font.Chinese">
            <summary>
            FZXS 12
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.FightResources.Sprites">
            <summary>
            A list of built-in sprites
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.arrow">
            <summary>
            The arrow sprite, the first dimension indicates the arrow color, the second dimension of the array indicates the  mode of the arrow (Normal, Yellow, Green, Purple), the third dimension indicates the damage level
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.arrowShards">
            <summary>
            The arrow sprite, the first dimension of the array indicates the color (Blue, Red, Green, Purple), the second dimension indicates the mode of the arrow (Normal, Yellow, Green, Purple), the third dimension indicates the shard type
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.voidarrow">
            <summary>
            Sprites of the void arrows
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.player">
            <summary>
            Sprite of the Soul
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.soulCollide">
            <summary>
            Sprite of the Graze of the soul
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.brokenHeart">
            <summary>
            Sprite of the heart broken in game over
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.star">
            <summary>
            Sprite of a star
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.knife">
            <summary>
            Sprite of a slash beam
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.KnifeWarn">
            <summary>
            Sprite of a knife beam warning
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.fireball">
            <summary>
            Sprite of a fireball
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.leftHeart">
            <summary>
            Left and right halves of the heart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.rightHeart">
            <summary>
            Left and right halves of the heart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.heartPieces">
            <summary>
            Sprites of heart pieces in game over
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.pixUnit">
            <summary>
            One pixel
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.fireParticle">
            <summary>
            Trail sprite for arrow speed up
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.bullet">
            <summary>
            Gun bullet sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.target">
            <summary>
            Gun aiming target sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.lightBall">
            <summary>
            Circle sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.lightLine">
            <summary>
            Sprite of pixel with bloom effect
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.square">
            <summary>
            Square sprite
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.shield">
            <summary>
            The sprite of the player's shield
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.shinyShield">
            <summary>
            The sprite to display on the shield when arrow collides
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.ShieldCircle">
            <summary>
            Sprite background for the shield
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.spear">
            <summary>
            Sprite of a spear
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.spike">
            <summary>
            Sprite of a bone spike
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.spider">
            <summary>
            Sprite of a spider
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.boxPiece">
            <summary>
            Sprite of a broken box side (Unused)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.Croissant">
            <summary>
            Sprite of croissant (Spider Dance)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.stuck1">
            <summary>
            Sprites of Green Soul Blaster hitting the shield
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.stuck2">
            <summary>
            Sprites of Green Soul Blaster hitting the shield
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.hpText">
            <summary>
            Sprite of HP of UI
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.krText">
            <summary>
            Sprite of KR of UI
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.boneHead">
            <summary>
            Sprites of bone parts
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.boneBody">
            <summary>
            Sprites of bone parts
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.platform">
            <summary>
            Sprites for platform
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.platformSide">
            <summary>
            Sprites for platform
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.GBStart">
            <summary>
            Sprites of GB beginning to fire
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.GBShooting">
            <summary>
            Sprites of GB during fire
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.GBLaser">
            <summary>
            Sprite of GB beam
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.explodes">
            <summary>
            Sprite of explosion (Eternal Spring Dream)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.explodeTrigger">
            <summary>
            Sprite of exploding card (Eternal Spring Dream)
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.goldenBrim">
            <summary>
            Sprite of golden outline of arrow
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.accuracyBar">
            <summary>
            Sprite of accuracy bar on the bottom
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.allPerfectText">
            <summary>
            Sprite of ALL PERFECT displayed in result
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sprites.accuracyPointers">
            <summary>
            Sprites of accuracy bars on the bottom
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.SoulShoot">
            <summary>
            Sprite of yellow soul bullet
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.MettBlockA">
            <summary>
            Sprite of a breakable Mettaton block
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.MettBlockB">
            <summary>
            Sprite of a non-breakable Mettaton block
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.ParasolMett">
            <summary>
            Sprite of a Mettaton with parasol abrrage
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.MettBomb">
            <summary>
            Sprite of a Mettaton '+' bomb
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.MettBombCoreBlast">
            <summary>
            Sprite of the center part of the Mettaton bomb blast
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.MettBombBlast">
            <summary>
            Sprite of the horizontal Mettaton blast
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sprites.MettBullet">
            <summary>
            Sprite of Mettaton heart barrage
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.FightResources.Sounds">
            <summary>
            A list of built-in audio
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.switchScene">
            <summary>
            Used for large scale scene transition
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.boneSpawnLarge">
            <summary>
            Used for creating large bones
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.slam">
            <summary>
            Slamming SFX
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.playerSlice">
            <summary>
            SFX of player attack
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.printWord">
            <summary>
            SFX of text typing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.sansWord">
            <summary>
            SFX of Sans talking
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sounds.Warning">
            <summary>
            SFX of warning
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sounds.Ding">
            <summary>
            Ding~
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sounds.ArrowStuck">
            <summary>
            SFX of new arrow collision
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.heal">
            <summary>
            SFX of healing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.playerHurt">
            <summary>
            SFX of player taking damage
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.spearAppear">
            <summary>
            SFX of a spear appearing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.spearShoot">
            <summary>
            SFX of a spear being shot
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.pierce">
            <summary>
            SFX of piercing, often used for creating bones
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.select">
            <summary>
            SFX of selecting menu choice
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.changeSelection">
            <summary>
            SFX of changing menu choice
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.change">
            <summary>
            SFX of Sans flickering the screen
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.damaged">
            <summary>
            SFX of an enemy being damaged
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.die1">
            <summary>
            SFX of soul split in half
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.die2">
            <summary>
            SFX of soul shattering
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.GBSpawn">
            <summary>
            SFX of Gaster Blaster spawning
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.GBShoot">
            <summary>
            SFX of Gaster Blaster firing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.explode">
            <summary>
            SFX of an explosion
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.destroy">
            <summary>
            SFX of an item being destroyed
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.gunTargeting">
            <summary>
            SFX of a gun targetting
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.gunShot">
            <summary>
            SFX of a gun being fired
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.largeKnife">
            <summary>
            SFX of DT2 knife
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.boneSlabSpawn">
            <summary>
            SFX of a bone slab spawning/enemy encounter
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.giga">
            <summary>
            SFX of DT2 yelling
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.star0">
            <summary>
            SFX of star appearing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.star1">
            <summary>
            SFX of star firing
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.FightResources.Sounds.sparkles">
            <summary>
            SFX of a sparkle
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sounds.YellowShoot">
            <summary>
            Yellow soul bullet shooting SFX
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sounds.TargetBurst">
            <summary>
            SFX of a block destroyed by yellow bullet
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Sounds.Bomb">
            <summary>
            SFX of a yellow soul bomb exploding
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.FightResources.FightSprites">
            <summary>
            A list of sprites used in fighting
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.FightResources.Shaders">
            <summary>
            A list of built-in shaders
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Sinwave">
            <summary>
            Distorts the screen like a sine wave
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Aurora">
            <summary>
            An shader for creating an aurora
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.NeonLine">
            <summary>
            Creates arcade machine like lines on the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.ColorBlend">
            <summary>
            A shader that multiplies the blending
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Cos1Ball">
            <summary>
            Creates an arcade machine like screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.StepSample">
            <summary>
            Radical blur
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Scale">
            <summary>
            Scales the screen inwards
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Scatter">
            <summary>
            Creates a color scattering effect (RGB splitting)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Camera">
            <summary>
            3D camera effect
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Swirl">
            <summary>
            A swirl effect (Does not distort the screen), also used for creating noise
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Blur">
            <summary>
            Gaussian Blur shader
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.BlurKawase">
            <summary>
            Kawase blur sahder, more efficient
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Polar">
            <summary>
            Distorts the screen (It is difficult to explain)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Gray">
            <summary>
            Gray scales the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Seismic">
            <summary>
            Creates a ripple effect with minor scaling, do not confuse with <see cref="P:UndyneFight_Ex.FightResources.Shaders.RadialWave"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Mosaic">
            <summary>
            Pixelates the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Spiral">
            <summary>
            That one shader in TAS right before the glowing line
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Wrong">
            <summary>
            Glitch distortion shader (Sinusoidal intensity)
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Fire">
            <summary>
            Creates a fire effect on the bottom of the screen
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.LightSweep">
            <summary>
            Huge light beam
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.DislocationX">
            <summary>
            This shader is broken
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.Wave">
            <summary>
            Dislocates the screen by creating displacements and wave effect
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.FightResources.Shaders.RadialWave">
            <summary>
            Creates a ripple effect, do not confuse with <see cref="P:UndyneFight_Ex.FightResources.Shaders.Seismic"/>
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.IO.SaveInfo">
            <summary>
            Storage rules of <see cref="T:UndyneFight_Ex.IO.SaveInfo"/>:
            <para>[] are constants，{} are an array of <see cref="F:UndyneFight_Ex.IO.SaveInfo.values"/>, ->{} are an array of <see cref="F:UndyneFight_Ex.IO.SaveInfo.Nexts"/>, ',' is the separator of data</para>
            <para>Examples are as follows:</para>
            <para>(ChampionShips)->{div=[string],score=[int],position=[int]}</para>
            <para>PlayerName:[string],VIP:[bool]</para>
            <para>NormalFight->{(songName):noob=[int],easy=[int],...extreme=[int]}</para>
            <para>Achievements->{(achievementName):type=[bool],progress=[int]}</para>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.IO.SaveInfo.Item(System.String)">
            <summary>
            Gets the value in the save info with given string as key
            </summary>
            <param name="index">The key of the value</param>
            <returns>The saved value</returns>
        </member>
        <member name="P:UndyneFight_Ex.IO.SaveInfo.Item(System.Int32)">
            <summary>
            Gets the value in the save info with the given index
            </summary>
            <param name="index">The index of the save info to search for</param>
            <returns>The saved value</returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.SaveInfo.op_Implicit(UndyneFight_Ex.IO.SaveInfo)~System.Collections.Generic.List{System.String}">
            <summary>
            Converts the save info to a list of strings
            </summary>
            <param name="info">The save info to convert</param>
        </member>
        <member name="M:UndyneFight_Ex.IO.SaveInfo.op_Implicit(System.Collections.Generic.List{System.String})~UndyneFight_Ex.IO.SaveInfo">
            <summary>
            Converts a list of strings to save info (If the format is correct)
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:UndyneFight_Ex.IO.SaveInfo.op_Implicit(UndyneFight_Ex.IO.SaveInfo)~System.Collections.Generic.List{System.Byte}">
            <summary>
            Converts the save info to a list of bytes
            </summary>
            <param name="info">The save info to convert</param>
        </member>
        <member name="F:UndyneFight_Ex.IO.SaveInfo.HasDeepInfo">
            <summary>
            Whether the save info has nested information
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.IO.SaveInfo.Title">
            <summary>
            The title of the save info
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.IO.SaveInfo.fullValue">
            <summary>
            The full value of the save info, i.e. Info:A=1,B=2 will return "A=1,B=2"
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.IO.SaveInfo.values">
            <summary>
            The list of values in the save info
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.IO.SaveInfo.keysForIndexes">
            <summary>
            The index of the key, i.e. in A=1,B=2 -> "A" will return 0 and "B" will return 1
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.IO.SaveInfo.indexForKeys">
            <summary>
            The key of the index, i.e. in A=1,B=2 -> "0" will return A and "1" will return B
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.IO.SaveInfo.Nexts">
            <summary>
            The nested save info
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.IO.SaveInfo.SetNext(System.String,System.String)">
            <summary>
            Sets the next save info
            </summary>
            <param name="mission"></param>
            <param name="info"></param>
        </member>
        <member name="P:UndyneFight_Ex.IO.SaveInfo.FloatValue">
            <summary>
            The value as <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.IO.SaveInfo.IntValue">
            <summary>
            The value as <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.IO.SaveInfo.VectorValue">
            <summary>
            The value as <see cref="T:Microsoft.Xna.Framework.Vector2"/>, where both values are floats
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.IO.SaveInfo.BoolValue">
            <summary>
            The value as a <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.IO.SaveInfo.StringValue">
            <summary>
            The value as <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.IO.SaveInfo.#ctor(System.String)">
            <summary>
            Creates a save info with the given key
            </summary>
            <param name="val">The key and or value of the save info</param>
        </member>
        <member name="M:UndyneFight_Ex.IO.SaveInfo.PushNext(UndyneFight_Ex.IO.SaveInfo)">
            <summary>
            Adds nested SaveInfo in <see cref="F:UndyneFight_Ex.IO.SaveInfo.Nexts"/>
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:UndyneFight_Ex.IO.SaveInfo.GetDirectory(System.String)">
            <summary>
            Gets the save info of the given key, which is a nested save info
            </summary>
            <param name="path">The key of the save info</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.WriteCustomFile(System.String,System.Collections.Generic.List{System.Byte})">
            <summary>
            Creates an custom encoded file
            </summary>
            <param name="Location">File path</param>
            <param name="bytes">File content (as <see cref="T:System.Collections.Generic.List`1"/>)</param>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.WriteTmpFile(System.String,System.Collections.Generic.List{System.Byte})">
            <summary>
            <see cref="M:UndyneFight_Ex.IO.IOEvent.WriteCustomFile(System.String,System.Collections.Generic.List{System.Byte})"/> but with a file format of '.tmpf', they function the exact same
            </summary>
            <param name="Location">File path</param>
            <param name="bytes">File content</param>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.ReadCustomFile(System.String)">
            <summary>
            Reads the list of bytes of the custom image file
            </summary>
            <param name="Path">The path to the file</param>
            <returns>The list of bytes on the image file</returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.ReadTmpfFile(System.String)">
            <summary>
            读取Tmp图片上的像素块的颜色值并得到一串字符列表
            </summary>
            <returns>通过记忆图片得到的字符列表</returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.StringToByte(System.String)">
            <summary>
            Convert a string into bytes
            </summary>
            <param name="strings">The string to convert</param>
            <returns>The bytes of the string</returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.StringToByte(System.Collections.Generic.List{System.String})">
            <summary>
            Converts a list of strings into bytes
            </summary>
            <param name="strings">The list of strings</param>
            <returns>The list of strings in bytes</returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.ByteToString(System.Collections.Generic.List{System.Byte})">
            <summary>
            Converts a list of bytes into string
            </summary>
            <param name="bytes">The list of bytes</param>
            <returns>The list of bytes in strings</returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.ToInfo(System.Collections.Generic.List{System.String})">
            <summary>
            Converts a list of string into save info
            </summary>
            <param name="strs">The list of string</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.InfoToString(UndyneFight_Ex.IO.SaveInfo)">
            <summary>
            Converts a save info to a list of string
            </summary>
            <param name="info">The save info to convert</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.IOEvent.InfoToByte(UndyneFight_Ex.IO.SaveInfo)">
            <summary>
            Converts a save info into a list of bytes
            </summary>
            <param name="info">The save info to convert</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.FileIO.ReadFile(System.String)">
            <summary>
            读取Tmp图片上的像素块的颜色值并得到一串字符列表
            </summary>
            <returns>通过记忆图片得到的字符列表</returns>
        </member>
        <member name="M:UndyneFight_Ex.IO.FileIO.CreatePlayerFile(System.String)">
            <summary>
            Creates a new player file
            </summary>
            <param name="playerName">The name of the player</param>
        </member>
        <member name="M:UndyneFight_Ex.IO.FileIO.CreatePlayerFile(UndyneFight_Ex.IO.SaveInfo)">
            <summary>
            Creates a player file using existing save info data
            </summary>
            <param name="info">The save info of the player</param>
        </member>
        <member name="T:UndyneFight_Ex.DebugState">
            <summary>
            Debug variables for the SDK
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.DebugState.ShowRenderCost">
            <summary>
            Show the cost of rendering on screen during a chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.DebugState.ShowIntendedHitbox">
            <summary>
            Displays the intended hitbox of barrages during a chart
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.DebugState.Version">
            <summary>
            The version of UF-Ex
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.Aspect">
            <summary>
            Aspect ratio of the game
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.SurfaceScale">
            <summary>
            The surface scale of the game
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.ResizeMatrix">
            <summary>
            The world matrix
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.CurrentWindow">
            <summary>
            The current game window
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.GameOnFocus">
            <summary>
            Whether the game window is focused (Not tabbed out)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.ResetRendering">
            <summary>
            Resets rendering settings
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GameStates.GameRule.nameColor">
            <summary>
            The color of the player name, VIP can have blue/orange/colorful instead of only white
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.IsInChallenge">
            <summary>
            Whether the player is currently in a challenge
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GameStates.CurChallengeNum">
            <summary>
            The current challenge
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GameStates.ChallengeCount">
            <summary>
            The amount of challenges
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.SpriteBatch">
            <summary>
            The sprite batch of the game
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.GameWindow">
            <summary>
            The graphics device manager of the game
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.InstanceCreate(UndyneFight_Ex.GameObject)">
            <summary>
            Creates an instance
            </summary>
            <param name="e">The <see cref="T:UndyneFight_Ex.GameObject"/> to create</param>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.InstanceExists(System.Type)">
            <summary>
            Whether an instance already exists
            </summary>
            <param name="e">The game object to check</param>
            <returns></returns>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.InstanceDestroy(System.Type)">
            <summary>
            Destroy all instances of the given type
            </summary>
            <param name="e">The object to dispose</param>
            <returns></returns>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.CurrentScene">
            <summary>
            The current scene of the game, i.e. <see cref="T:UndyneFight_Ex.Entities.SongFightingScene"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.difficulty">
            <summary>
            The difficulty of the current chart in <see cref="T:System.Int32"/>, you can convert it back to <see cref="T:UndyneFight_Ex.SongSystem.Difficulty"/>
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.ForceDisableTimeTips">
            <summary>   
            Whether the time tips (Early, Late) are forcefully disabled
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.GameModeMemory">
            <summary>
            The GameMode used in the previous chart
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.ResetTime">
            <summary>
            Reset <see cref="F:UndyneFight_Ex.GameMain.gameTime"/> to 0
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.SelectBattle(UndyneFight_Ex.Fight.IClassicFight,UndyneFight_Ex.SongSystem.GameMode)">
            <summary>
            Selects a fight
            </summary>
            <param name="fightSet">The fight to select</param>
            <param name="mode">The gamemode of the fight</param>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.StartSong(UndyneFight_Ex.SongSystem.IWaveSet,Microsoft.Xna.Framework.Graphics.Texture2D,System.String,System.Int32,UndyneFight_Ex.SongSystem.JudgementState,UndyneFight_Ex.SongSystem.GameMode)">
            <summary>
            Starts a chart
            </summary>
            <param name="wave">The chart wave</param>
            <param name="songIllustration">The chart cover</param>
            <param name="path">The path to the music file</param>
            <param name="dif">The difficulty of the chart</param>
            <param name="judgeState">The judgement state of the chart</param>
            <param name="mode">The gamemode of the chart</param>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.StartSong(UndyneFight_Ex.Entities.SongFightingScene.SceneParams)">
            <summary>
            Starts a chart
            </summary>
            <param name="params">The parameters of the chart</param>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.ResetScene(UndyneFight_Ex.Scene)">
            <summary>
            Sets the current scene into a new one
            </summary>
            <param name="scene">The target scene to set to</param>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.ResetFightState">
            <summary>
            Resets the fight state
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.EndFight">
            <summary>
            Ends the current fight/chart
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.ChangeSpeedScale(System.Single)">
            <summary>
            Changes the speed of the game
            </summary>
            <param name="SpeedScale"></param>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.FileWriteText(System.String,System.String)">
            <summary>
            Writes text onto an external file
            </summary>
            <param name="name">The name of the file</param>
            <param name="data">The text to write</param>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.Broadcast(UndyneFight_Ex.GameEventArgs)">
            <summary>
            Broadcast an event globally
            </summary>
            <param name="gameEventArgs">The event to broadcast</param>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.DetectEvent(System.String)">
            <summary>
            Detect whether an event (Made from <see cref="M:UndyneFight_Ex.GameStates.Broadcast(UndyneFight_Ex.GameEventArgs)"/>) has been called
            </summary>
            <param name="ActionName">The name of the event to detect</param>
            <returns></returns>
        </member>
        <member name="F:UndyneFight_Ex.GameStates.AudioCache">
            <summary>
            The audio caches for song previews
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GameStates.file_path_list">
            <summary>
            [Directory, File Path]
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.LoadSongPreviews">
            <summary>
            Loads the song previews of the charts
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.WordsChanged">
            <summary>
            Player has typed
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameStates.CharInput">
            <summary>
            The character the player has inputted
            </summary>
        </member>
        <member name="F:UndyneFight_Ex.GameStates.keyEventBuffer">
            <summary>
            一个键盘操作录制器(播放)或者是一个键盘操作控制器(回放)
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.IsKeyPressed(UndyneFight_Ex.InputIdentity)">
            <summary>
            Check if a key is pressed (Used when <see cref="P:UndyneFight_Ex.GameObject.UpdateIn120"/> is false)
            </summary>
            <param name="key">The key to check</param>
            <returns>Whether the key is pressed</returns>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.IsKeyPressed120f(UndyneFight_Ex.InputIdentity)">
            <summary>
            Check if a key is pressed (Used when <see cref="P:UndyneFight_Ex.GameObject.UpdateIn120"/> is true)
            </summary>
            <param name="key">The key to check</param>
            <returns>Whether the key is pressed</returns>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.IsKeyDown(UndyneFight_Ex.InputIdentity)">
            <summary>
            Check if a key is being held
            </summary>
            <param name="key">The key to check</param>
            <returns>Whether the key is held</returns>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.IsKeyPressed120f(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check if a key is pressed (Used when <see cref="P:UndyneFight_Ex.GameObject.UpdateIn120"/> is true)
            </summary>
            <param name="key">The key to check</param>
            <returns>Whether the key is pressed</returns>
        </member>
        <member name="M:UndyneFight_Ex.GameStates.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check if a key is being held
            </summary>
            <param name="key">The key to check</param>
            <returns>Whether the key is held</returns>
        </member>
        <member name="T:UndyneFight_Ex.GameInterface.ClassicalGUI">
            <summary>
            The classic UF-Ex menu
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GameInterface.ClassicalGUI.MainMenuSettings">
            <summary>
            Settings for the game menu
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.ClassicalGUI.MainMenuSettings.RecordEnabled">
            <summary>
            Whether there is an option to see recordings
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.ClassicalGUI.MainMenuSettings.AchievementsEnabled">
            <summary>
            Whether there is an option to see achievements
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GameInterface.GameStartUp">
            <summary>
            The game start up event class
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.GameStartUp.MainSceneIntro">
            <summary>
            Your intro UI
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.GameInterface.GameStartUp.SetMainSongs(System.Collections.Generic.List{System.Type})">
            <summary>
            The list of main songs in the game
            </summary>
            <param name="fights">The list of charts</param>
        </member>
        <member name="M:UndyneFight_Ex.GameInterface.GameStartUp.AddMainSongs(System.Collections.Generic.List{System.Type})">
            <summary>
            Add main songs to the game
            </summary>
            <param name="fights">The list of charts</param>
        </member>
        <member name="M:UndyneFight_Ex.GameInterface.GameStartUp.PushStoreItem(UndyneFight_Ex.UserService.StoreItem)">
            <summary>
            Adds an item to the shop
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:UndyneFight_Ex.GameInterface.GameStartUp.PushChampionShip(UndyneFight_Ex.ChampionShips.ChampionShip)">
            <summary>
            Adds a championship
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:UndyneFight_Ex.GameInterface.GameStartUp.PushChallenge(UndyneFight_Ex.Challenge)">
            <summary>
            Adds a challenge
            </summary>
            <param name="challenge"></param>
        </member>
        <member name="M:UndyneFight_Ex.GameInterface.GameStartUp.PushAchievement(UndyneFight_Ex.Achievements.Achievement)">
            <summary>
            Adds an achievement
            </summary>
            <param name="achievement"></param>
        </member>
        <member name="M:UndyneFight_Ex.GameInterface.GameStartUp.PushExtra(UndyneFight_Ex.Fight.IExtraOption)">
            <summary>
            Adds extra fights
            </summary>
            <param name="classicFight"></param>
        </member>
        <member name="M:UndyneFight_Ex.GameInterface.GameStartUp.StartGame">
            <summary>
            Starts the game
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.GameStartUp.SetUpShower">
            <summary>
            The title set up display
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.GameStartUp.TitleShower">
            <summary>
            The title display
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.GameStartUp.AchievementUI">
            <summary>
            The UI used for achievements
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GameInterface.GameStartUp.LoadingSettings">
            <summary>
            User defined loading screen settings
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.GameStartUp.LoadingSettings.TitleCentrePosition">
            <summary>
            The position of the game logo
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.GameStartUp.LoadingSettings.TitleTextureRoot">
            <summary>
            The file path to the game logo sprite
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.GameStartUp.Initialize">
            <summary>
            Content initialization action
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.GameInterface.UFEXSettings">
            <summary>
            The settings for the base UF-Ex engine
            </summary>
        </member>
        <member name="P:UndyneFight_Ex.GameInterface.UFEXSettings.OnSongComplete">
            <summary>
            Actions to invoke when a chart is completed
            </summary>
        </member>
        <member name="E:UndyneFight_Ex.GameInterface.UFEXSettings.Update">
            <summary>
            Custom update action
            </summary>
        </member>
        <member name="T:UndyneFight_Ex.Program">
            <summary>
            The main class.
            </summary>
        </member>
        <member name="M:UndyneFight_Ex.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Extends.Star">
            <summary>
            A star (Used in Hopes and Dreams) (Please use something else)
            </summary>
        </member>
        <member name="P:Extends.Star.ColorType">
            <summary>
            The color type of the star
            </summary>
        </member>
        <member name="P:Extends.Star.PositionRoute">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Star.RotationRoute">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Star.RotationRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Star.PositionRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Star.AppearTime">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Star.CentrePosition">
            <inheritdoc/>
        </member>
        <member name="F:Extends.Star.rotatespeed">
            <summary>
            The rotation speed of the star
            </summary>
        </member>
        <member name="F:Extends.Star.starshadow">
            <summary>
            Whether the star has a shadow
            </summary>
        </member>
        <member name="M:Extends.Star.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a star with static position
            </summary>
            <param name="centre">The centre of the star</param>
            <param name="scale">The scale of the star</param>
        </member>
        <member name="M:Extends.Star.#ctor(System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Single)">
            <summary>
            Creates a star with an easing motion
            </summary>
            <param name="ease">The easing motion of the star</param>
            <param name="scale">The scale of the star</param>
        </member>
        <member name="M:Extends.Star.Draw">
            <inheritdoc/>
        </member>
        <member name="M:Extends.Star.Update">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Star.MarkScore">
            <summary>
            Whether the star counts to the score or not
            </summary>
        </member>
        <member name="P:Extends.Star.AutoDispose">
            <summary>
            Whether the star will automatically dispose when it leaves the screen
            </summary>
        </member>
        <member name="M:Extends.Star.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="M:Extends.Star.Dispose">
            <inheritdoc/>
        </member>
        <member name="F:Extends.Star.screen">
            <summary>
            The dimension of the screen to check during <see cref="P:Extends.Star.AutoDispose"/>
            </summary>
        </member>
        <member name="T:Extends.Fireball">
            <summary>
            A fireball
            </summary>
        </member>
        <member name="P:Extends.Fireball.ColorType">
            <summary>
            The color type of the fireball
            </summary>
        </member>
        <member name="P:Extends.Fireball.PositionRoute">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Fireball.RotationRoute">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Fireball.RotationRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Fireball.PositionRouteParam">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Fireball.AppearTime">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Fireball.CentrePosition">
            <inheritdoc/>
        </member>
        <member name="M:Extends.Fireball.#ctor(System.Func{UndyneFight_Ex.Entities.ICustomMotion,Microsoft.Xna.Framework.Vector2},System.Single)">
            <summary>
            Creates a fireball with easing motion
            </summary>
            <param name="ease">The easing function</param>
            <param name="scale">The scale of the fireball</param>
        </member>
        <member name="M:Extends.Fireball.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a fireball with static position
            </summary>
            <param name="centre">The position of the fireball</param>
            <param name="scale">The scale of the fireball</param>
        </member>
        <member name="F:Extends.Fireball.Alpha">
            <summary>
            The alpha of the fireball
            </summary>
        </member>
        <member name="M:Extends.Fireball.Draw">
            <inheritdoc/>
        </member>
        <member name="M:Extends.Fireball.GetCollide(UndyneFight_Ex.Entities.Player.Heart)">
            <inheritdoc/>
        </member>
        <member name="M:Extends.Fireball.Update">
            <inheritdoc/>
        </member>
        <member name="P:Extends.Fireball.IsHidden">
            <summary>
            Whether the fireball is masked inside of the board
            </summary>
        </member>
        <member name="M:Extends.Someway.SpecialRhythmCreate(System.Single,System.Single,System.Single,System.String[],System.String[],System.Action[])">
            <summary>
            使用一个特殊的节奏数组,并且支持在定点释放事件。
            规则如下：
            eventsname和events是对应的。例如第二个eventsname对应第二个events。
            GB的创建即
            "G001"，G表示固定方向，第二个字符为方向，第三个字符为颜色，第三个之后的字符表示持续beat拍（默认-5）
            "WR01"，W表示随机方向，第二个字符没有效果，第三个字符为颜色，第三个之后的字符表示持续beat拍（默认-5）
            "/"为空拍,x表示切分拍
            箭头第一个字符-方向 的规则: R 表示随机 D 表示与上次不同 +x 表示上一个方向的 +x方向 -x 表示上一个方向的 -x方向 $x 表示固定某个方向。
            箭头第二个字符-颜色 的规则：0蓝1红。
            箭头第三个字符-旋转type 的规则：0普通1旋转2斜矛。
            箭头修饰字符-箭头效果 的规则：前面加上~表示*1.2速加速，!表示右旋转，@表示左旋转
            箭头组合规则：字符串内加括号表示不仅创建一个箭头,例如"(R)(R1)"。
            PS："R(+0)" ≠ "(R)(+0)",后者才是两个矛叠一块，第一个会无效。
            </summary>
            <param name="beat">节奏数组的间隔拍，推荐三十二分音符为间隔</param>
            <param name="arrowspeed">假如创建出来箭头，那么这个箭头的速度</param>
            <param name="starttime">延迟的时间</param>
            <param name="rhythm">节奏数组</param>
            <param name="eventsname">节奏数组内事件的名称</param>
            <param name="events">节奏数组内的事件</param>
        </member>
        <member name="T:Extends.FightUtil">
            <summary>
            Utilities for bones
            </summary>
        </member>
        <member name="T:Extends.DrawingUtil">
            <summary>
            Utilities for drawing
            </summary>
        </member>
        <member name="M:Extends.DrawingUtil.CrossBone(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Creates a list of bones with provided motion and rotation
            </summary>
            <param name="start">The initial position of the bones</param>
            <param name="speed">The speed of the bones</param>
            <param name="length">The length of the bones</param>
            <param name="num">The amount of bones</param>
            <param name="color">The color of the bones</param>
            <param name="RotSpeed">The rotation speed of the bones (Default 4)</param>
        </member>
        <member name="M:Extends.DrawingUtil.SetScreenScale(System.Single,System.Single)">
            <summary>
            Sets the screen scale to the target size in the given duration using Quadratic easing (<see cref="F:UndyneFight_Ex.Entities.SimplifiedEasing.EaseState.Quad"/>)
            </summary>
            <param name="size">The target size of the screen</param>
            <param name="duration">The duration of the lerp</param>
        </member>
        <member name="M:Extends.DrawingUtil.ScreenAngle(System.Single,System.Single)">
            <summary>
            Sets the screen angle to the target angle in the given duration using Quadratic easing (<see cref="F:UndyneFight_Ex.Entities.SimplifiedEasing.EaseState.Quad"/>)
            </summary>
            <param name="angle">The target angle of the screen</param>
            <param name="time">The duration of the lerp</param>
        </member>
        <member name="M:Extends.DrawingUtil.Shock(System.Single,System.Single,System.Single)">
            <summary>
            Shakes the screen
            </summary>
            <param name="interval">The interval between each shake (Default 2 frames)</param>
            <param name="range">The shake intensity (Default 2 pixels)</param>
            <param name="times">Times to shake (Default 4 times)</param>
        </member>
        <member name="M:Extends.DrawingUtil.Shock(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Shakes the screen
            </summary>
            <param name="interval">The interval between each shake</param>
            <param name="rangeX">The shake intensity of the x-coordinate</param>
            <param name="rangeY">The shake intensity of the y-coordinate</param>
            <param name="times">Times to shake</param>
        </member>
        <member name="M:Extends.DrawingUtil.FadeScreen(System.Single,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Creates a screen fading in and out
            </summary>
            <param name="inDuration">The duration for the screen to fade in</param>
            <param name="duration">The duration of the fade screen</param>
            <param name="outDuration">The duration for the screen to fade out</param>
            <param name="color">The color of the fading (Default black)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Extends.DrawingUtil.RotateWithBack(System.Single,System.Single)">
            <summary>
            Rotates the camera and rotates back to origin
            </summary>
            <param name="duration">The duration of the rotations</param>
            <param name="range">The magnitude of the rotation</param>
        </member>
        <member name="M:Extends.DrawingUtil.RotateSymmetricBack(System.Single,System.Single)">
            <summary>
            Rotates the camera and rotates it to the negation of it before rotating it to the origin (10 -> 25 -> -25 -> 0)
            </summary>
            <param name="duration">The duration of the rotations</param>
            <param name="range">The magnitude of the rotations</param>
        </member>
        <member name="M:Extends.DrawingUtil.LerpGreenBox(System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Lerps the box and heart to green soul position (If the duration is shorter than the required lerp time, then the lerp will be incomplete. If the required lerp duration is shorter than the duration, then the lerp duration will be shortened)
            </summary>
            <param name="duration">The duration of the lerp</param>
            <param name="getto">The target position</param>
            <param name="lerpcount">The lerp amount</param>
        </member>
        <member name="M:Extends.DrawingUtil.LerpScreenPos(System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Lerps the screen position (If the duration is shorter than the required lerp time, then the lerp will be incomplete. If the required lerp duration is shorter than the duration, then the lerp duration will be shortened)
            </summary>
            <param name="duration">The duration of the lerp</param>
            <param name="getto">The target position</param>
            <param name="lerpcount">The lerp amount</param>
        </member>
        <member name="M:Extends.DrawingUtil.LerpScreenScale(System.Single,System.Single,System.Single)">
            <summary>
            Lerps the screen scale (If the duration is shorter than the required lerp time, then the lerp will be incomplete. If the required lerp duration is shorter than the duration, then the lerp duration will be shortened)
            </summary>
            <param name="duration">The duration of the lerp</param>
            <param name="getto">The target position</param>
            <param name="lerpcount">The lerp amount</param>
        </member>
        <member name="T:Extends.DrawingUtil.MaskSquare">
            <summary>
            Creates a masking rectangle
            </summary>
            <param name="LeftUpX">The x coordinate of the top left corner of the rectangle</param>
            <param name="LeftUpY">The y coordinate of the top left corner of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
            <param name="duration">The duration of the masking</param>
            <param name="color">The color of the rectangle</param>
            <param name="alpha">The alpha of the rectangle</param>
        </member>
        <member name="M:Extends.DrawingUtil.MaskSquare.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Creates a masking rectangle
            </summary>
            <param name="LeftUpX">The x coordinate of the top left corner of the rectangle</param>
            <param name="LeftUpY">The y coordinate of the top left corner of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
            <param name="duration">The duration of the masking</param>
            <param name="color">The color of the rectangle</param>
            <param name="alpha">The alpha of the rectangle</param>
        </member>
        <member name="M:Extends.DrawingUtil.MaskSquare.Draw">
            <inheritdoc/>
        </member>
        <member name="M:Extends.DrawingUtil.MaskSquare.Update">
            <inheritdoc/>
        </member>
        <member name="T:Extends.DrawingUtil.Circle">
            <summary>
            A circle
            </summary>
        </member>
        <member name="F:Extends.DrawingUtil.Circle.Alpha">
            <summary>
            The alpha of the circle
            </summary>
        </member>
        <member name="F:Extends.DrawingUtil.Circle.StartAng">
            <summary>
            The starting angle of the circle
            </summary>
        </member>
        <member name="F:Extends.DrawingUtil.Circle.EndAng">
            <summary>
            The ending angle of the circle
            </summary>
        </member>
        <member name="F:Extends.DrawingUtil.Circle.Radius">
            <summary>
            The radius of the circle
            </summary>
        </member>
        <member name="F:Extends.DrawingUtil.Circle.Thickness">
            <summary>
            The thickness of the circle
            </summary>
        </member>
        <member name="F:Extends.DrawingUtil.Circle.color">
            <summary>
            The color of the circle
            </summary>
        </member>
        <member name="M:Extends.DrawingUtil.Circle.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Nullable{System.Single},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Creates a circle
            </summary>
            <param name="pos">The position of the circle</param>
            <param name="rad">The radius of the circle</param>
            <param name="thick">The thickness of the circle (Default full)</param>
            <param name="col">The color of the circle (Default black)</param>
        </member>
        <member name="M:Extends.LineMoveLibrary.AlphaSin(Extends.DrawingUtil.Linerotate,System.Single)">
            <summary>
            线段的Alpha-Sin,该重载表示经过duration时间闪烁一次(alpha=1)
            </summary>
        </member>
        <member name="M:Extends.LineMoveLibrary.AlphaSin(System.String,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            提供一些线段有的Tag,赋予这些线段的Alpha以Sin缓动
            </summary>
        </member>
        <member name="M:Extends.LineMoveLibrary.AlphaLerp(System.String,System.Single,System.Single,System.Single)">
            <summary>
            提供一些线段有的Tag,赋予这些线段的Alpha以Lerp缓动
            </summary>
        </member>
        <member name="M:Extends.LineMoveLibrary.VecLerp(System.String,System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            提供一些线段有的Tag,赋予这些线段的Vector2以Lerp缓动
            </summary>
        </member>
        <member name="M:Extends.LineMoveLibrary.VecLerpAdd(System.String,System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            提供一些线段有的Tag,赋予这些线段的Vector2给一个Vec的速度并且这个速度是lerp缓动
            </summary>
        </member>
        <member name="M:Extends.LineMoveLibrary.RotLerp(Extends.DrawingUtil.Linerotate,System.Single,System.Single,System.Single)">
            <summary>
            线段的Rotate-Lerp缓动,count为目标的lerp插值
            </summary>
        </member>
    </members>
</doc>
